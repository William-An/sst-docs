"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9792],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),c=a,g=m["".concat(o,".").concat(c)]||m[c]||d[c]||l;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<l;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2832:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>u,toc:()=>m});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),s=["components"],i={title:"Mersenne RNG"},o=void 0,u={unversionedId:"core/rng/mersenne",id:"core/rng/mersenne",title:"Mersenne RNG",description:'The Mersenne generator provides better "randomness" compared to Marsaglia but is also more computationally intensive. The generator uses just one seed compared to Marsaglia\'s two.',source:"@site/../docs/core/rng/mersenne.md",sourceDirName:"core/rng",slug:"/core/rng/mersenne",permalink:"/sst-docs/docs/core/rng/mersenne",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/rng/mersenne.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1678138197,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{title:"Mersenne RNG"},sidebar:"Core API",previous:{title:"Marsaglia RNG",permalink:"/sst-docs/docs/core/rng/marsaglia"},next:{title:"XOR-Shift RNG",permalink:"/sst-docs/docs/core/rng/xorshift"}},p={},m=[{value:"Constructor",id:"constructor",level:2},{value:"Parameters",id:"parameters",level:4},{value:"generateNextInt32",id:"generatenextint32",level:2},{value:"Parameters",id:"parameters-1",level:4},{value:"generateNextInt64",id:"generatenextint64",level:2},{value:"Parameters",id:"parameters-2",level:4},{value:"generateNextUInt32",id:"generatenextuint32",level:2},{value:"Parameters",id:"parameters-3",level:4},{value:"generateNextUInt64",id:"generatenextuint64",level:2},{value:"Parameters",id:"parameters-4",level:4},{value:"nextUniform",id:"nextuniform",level:2},{value:"Parameters",id:"parameters-5",level:4},{value:"seed",id:"seed",level:2},{value:"Parameters",id:"parameters-6",level:4},{value:"Examples",id:"examples",level:2},{value:"Example 1: generateNextInt32()",id:"example-1-generatenextint32",level:3},{value:"Example 2: generateNextUInt32()",id:"example-2-generatenextuint32",level:3},{value:"Example 3: generateNextUInt64()",id:"example-3-generatenextuint64",level:3},{value:"Header",id:"header",level:2}],d={toc:m},c="wrapper";function g(e){var t=e.components,n=(0,a.Z)(e,s);return(0,l.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,'The Mersenne generator provides better "randomness" compared to Marsaglia but is also more computationally intensive. The generator uses just one seed compared to Marsaglia\'s two.'),(0,l.kt)("h2",{id:"constructor"},"Constructor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// #1 - use a random seed based on time-of-day\n// NOTE: this will create variation between runs and between platforms.\nMersenneRNG::MersenneRNG();\n\n// #2 - use explicitly defined seed\nMersenneRNG::MersenneRNG(unsigned int seed);\n")),(0,l.kt)("p",null,"Create a new Mersenne random number generator."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returns")," None")),(0,l.kt)("h2",{id:"generatenextint32"},"generateNextInt32"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int32_t generateNextInt32();\n")),(0,l.kt)("p",null,"Generate the next signed 32-bit integer."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returns")," (int32_t) The next signed 32-bit integer.")),(0,l.kt)("h2",{id:"generatenextint64"},"generateNextInt64"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int64_t generateNextInt64();\n")),(0,l.kt)("p",null,"Generate the next signed 64-bit integer."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returns")," (int64_t) The next signed 64-bit integer.")),(0,l.kt)("h2",{id:"generatenextuint32"},"generateNextUInt32"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"uint32_t generateNextUInt32();\n")),(0,l.kt)("p",null,"Generate the next unsigned 32-bit integer."),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returns")," (uint32_t) The next unsigned 32-bit integer.")),(0,l.kt)("h2",{id:"generatenextuint64"},"generateNextUInt64"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"uint64_t generateNextUInt64();\n")),(0,l.kt)("p",null,"Generate the next unsigned 64-bit integer."),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returns")," (uint64_t) The next unsigned 64-bit integer")),(0,l.kt)("h2",{id:"nextuniform"},"nextUniform"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"double  nextUniform();\n")),(0,l.kt)("p",null,"Generate the next double within the range [0,1)."),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returns")," (double) The next double within the range [0,1).")),(0,l.kt)("h2",{id:"seed"},"seed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void seed(uint64_t newSeed);\n")),(0,l.kt)("p",null,"Re-seed the random number generator."),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"newSeed")," (uint64_t) A seed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returns")," None")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"example-1-generatenextint32"},"Example 1: generateNextInt32()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::RNG::MersenneRNG* rng = new SST::RNG::MersenneRNG(11);\n\nint rndNumber;\nrndNumber = (int)(rng->generateNextInt32());\nrndNumber = (rndNumber & 0x0000FFFF) ^ ((rndNumber & 0xFFFF0000) >> 16);\nrndNumber = abs((int)(rndNumber % 3));\n\n")),(0,l.kt)("h3",{id:"example-2-generatenextuint32"},"Example 2: generateNextUInt32()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::RNG::MersenneRNG randomGenerator = new SST::RNG::MersenneRNG(11);\n\nint rndNumber;\nint index = randomGenerator.generateNextUInt32() % (numWays-1);\n")),(0,l.kt)("h3",{id:"example-3-generatenextuint64"},"Example 3: generateNextUInt64()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::RNG::MersenneRNG rng = new SST::RNG::MersenneRNG(11);\n\nuint64_t selectA = (rng.generateNextUInt64() % pageCount);\nuint64_t selectB = (rng.generateNextUInt64() % pageCount);\n")),(0,l.kt)("h2",{id:"header"},"Header"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/rng/mersenne.h>\n")))}g.isMDXComponent=!0}}]);