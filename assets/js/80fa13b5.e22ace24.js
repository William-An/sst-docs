"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2055],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4833:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),l=["components"],s={title:"constructor"},i=void 0,c={unversionedId:"core/unitalgebra/constructor",id:"core/unitalgebra/constructor",title:"constructor",description:"Create a new UnitAlgebra. The string passed to the constructor should include both the value and the units, for example, 3s. If the default constructor is used, UnitAlgebra::init() must be called to initialize the object.",source:"@site/../docs/core/unitalgebra/constructor.md",sourceDirName:"core/unitalgebra",slug:"/core/unitalgebra/constructor",permalink:"/sst-docs/docs/core/unitalgebra/constructor",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/unitalgebra/constructor.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1678138197,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{title:"constructor"},sidebar:"Core API",previous:{title:"SST::UnitAlgebra",permalink:"/sst-docs/docs/core/unitalgebra/class"},next:{title:"destructor",permalink:"/sst-docs/docs/core/unitalgebra/destructor"}},u={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Examples of valid format strings",id:"examples-of-valid-format-strings",level:3},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],d={toc:p},m="wrapper";function f(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"UnitAlgebra(const std::string& val);\nUnitAlgebra();\n")),(0,o.kt)("p",null,"Create a new UnitAlgebra. The string passed to the constructor should include both the value and the units, for example, ",(0,o.kt)("inlineCode",{parentName:"p"},"3s"),". If the default constructor is used, ",(0,o.kt)("a",{parentName:"p",href:"init"},"UnitAlgebra::init()")," must be called to initialize the object."),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"val")," (std::string) value. The format must be ",(0,o.kt)("inlineCode",{parentName:"li"},"<NUMBER>?<UNITS>")," where:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"NUMBER      := (-)?[0-9]+(.[0-9]+)?\nUNITS       := UNITGROUP(/UNITGROUP)\nUNITGROUP   := UNIT(-UNIT)*\nUNIT        := (SIPREFIX)?(BASEUNIT|COMPUNIT)\nSIPREFIX    := {a,f,p,n,u,m,[kKMGTPE]i?}\nBASEUNIT    := {s,B,b,events}\nCOMPUNIT    := {Hz,hz,Bps,bps,event}\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"examples-of-valid-format-strings"},"Examples of valid format strings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"1s\n3MHz\n-3ms\n24KiB\n5.5GHz\n8b/s\n8bps\n3 events\n90 Thz\n24 s/B\n")),(0,o.kt)("h3",{id:"example-1"},"Example 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'\nSST::UnitAlgebra* num0 = new UnitAlgebra("200MHz");\nSST::UnitAlgebra* num1 = new UnitAlgebra("20KB/s");\n\n// Use default constructor\nSST::UnitAlgebra* num2 = new UnitAlgebra();\nnum2->init("1us");\n\n// The constructor can be invoked directly from params.find()\nUnitAlgebra num3 = params.find<UnitAlgebra>("clock_frequency", "3GHz");\n')),(0,o.kt)("h2",{id:"header"},"Header"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/unitalgebra.h>\n")))}f.isMDXComponent=!0}}]);