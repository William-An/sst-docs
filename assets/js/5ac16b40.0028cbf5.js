"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6994],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},23352:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={title:"SST::Random"},l=void 0,o={unversionedId:"core/rng/rng",id:"core/rng/rng",title:"SST::Random",description:"SST includes a few random number generators (RNGs) that can be used by SST objects. These generators produce identical and deterministic output across all platforms and compilers that SST supports. The RNGs have a shared API.",source:"@site/../docs/core/rng/rng.md",sourceDirName:"core/rng",slug:"/core/rng/",permalink:"/sst-docs/docs/core/rng/",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/rng/rng.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1695940750,formattedLastUpdatedAt:"Sep 28, 2023",frontMatter:{title:"SST::Random"},sidebar:"core",previous:{title:"print_all_params",permalink:"/sst-docs/docs/core/params/print_all_params"},next:{title:"Marsaglia RNG",permalink:"/sst-docs/docs/core/rng/marsaglia"}},s={},p=[{value:"API",id:"api",level:2},{value:"nextUniform",id:"nextuniform",level:3},{value:"generateNextUInt32",id:"generatenextuint32",level:3},{value:"generateNextUInt64",id:"generatenextuint64",level:3},{value:"generateNextInt32",id:"generatenextint32",level:3},{value:"generateNextInt64",id:"generatenextint64",level:3},{value:"Header",id:"header",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"SST includes a few random number generators (RNGs) that can be used by SST objects. These generators produce identical and deterministic output across all platforms and compilers that SST supports. The RNGs have a shared API. "),(0,a.kt)("p",null,"Generators include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Marsaglia"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SST::RNG::MarsagliaRNG")),(0,a.kt)("li",{parentName:"ul"},"An RNG using the Marsaglia method. This is computationally cheap and provides a reasonable distribution of random numbers. The Mersenne RNG is an alternative for a stronger distribution."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Mersenne"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SST::RNG::MersenneRNG")),(0,a.kt)("li",{parentName:"ul"},'A Mersenne-based RNG. This provides better "randomness" compared to Marsaglia but is more computationally expensive.'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"XOR-Shift"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SST::RNG::XORShift")),(0,a.kt)("li",{parentName:"ul"},"A lightweight and computationally inexpensive RNG based on xor-shift operations. Implements the algorithm described ",(0,a.kt)("a",{parentName:"li",href:"http://en.wikipedia.org/wiki/Xorshift"},"here"),".")))),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("p",null,"Random number generators implement the following API:"),(0,a.kt)("h3",{id:"nextuniform"},"nextUniform"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual double nextUniform();\n")),(0,a.kt)("p",null,"Return the next random number in the range[0,1)."),(0,a.kt)("h3",{id:"generatenextuint32"},"generateNextUInt32"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual uint32_t generateNextUint32();\n")),(0,a.kt)("p",null,"Generate the next random number as a 32-bit unsigned integer."),(0,a.kt)("h3",{id:"generatenextuint64"},"generateNextUInt64"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual uint64_t generateNextUint64();\n")),(0,a.kt)("p",null,"Generate the next random number as a 64-bit unsigned integer."),(0,a.kt)("h3",{id:"generatenextint32"},"generateNextInt32"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual int32_t generateNextInt32();\n")),(0,a.kt)("p",null,"Generate the next random number as a 32-bit signed integer."),(0,a.kt)("h3",{id:"generatenextint64"},"generateNextInt64"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual int64_t generateNextInt64();\n")),(0,a.kt)("p",null,"Generate the next random number as a 64-bit signed integer."),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/rng.h>\n")))}d.isMDXComponent=!0}}]);