"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4151],{2936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var r=t(74848),l=t(28453);const o={title:"replaceFunctor"},a=void 0,s={id:"core/link/replaceFunctor",title:"replaceFunctor",description:"Set the callback handler for events arriving on a link. Also deletes the previous handler registered to the link.",source:"@site/../docs/core/link/replaceFunctor.md",sourceDirName:"core/link",slug:"/core/link/replaceFunctor",permalink:"/sst-docs/docs/core/link/replaceFunctor",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/link/replaceFunctor.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1716583959e3,frontMatter:{title:"replaceFunctor"},sidebar:"core",previous:{title:"setFunctor",permalink:"/sst-docs/docs/core/link/setFunctor"},next:{title:"addSendLatency",permalink:"/sst-docs/docs/core/link/addSendLatency"}},c={},i=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"void replaceFunctor(Event::HandlerBase* functor);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Set the callback handler for events arriving on a link. Also deletes the previous handler registered to the link."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"This function cannot be used on a Link that was configured as a polling link (i.e., configured without a handler)."})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"functor"})," (Event::HandlerBase*) Event handler to invoke for event arrivals"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Configure a link connected to a port named 'port' \nSST::Link* link = configureLink(\"port\", new Event::Handler2<example,&example::handleEvent>(this));\n\n// Change the link to call otherHandleEvent() instead of handleEvent() when an event arrives\n// The original handler will be deleted\nlink->replaceFunctor(new Event::Handler2<example,&example::otherHandleEvent>(this));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/link.h>\n"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(96540);const l={},o=r.createContext(l);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);