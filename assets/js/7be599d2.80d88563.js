"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7695],{3905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>y});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},m=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),d=p(t),c=o,y=d["".concat(s,".").concat(c)]||d[c]||u[c]||i;return t?n.createElement(y,l(l({ref:r},m),{},{components:t})):n.createElement(y,l({ref:r},m))}));function y(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=c;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a[d]="string"==typeof e?e:o,l[1]=a;for(var p=2;p<i;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},35894:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var n=t(87462),o=(t(67294),t(3905));const i={title:"SST_ELI_REGISTER_PYTHON_MODULE",sidebar_label:"Python Module"},l=void 0,a={unversionedId:"core/eli/register/sst_eli_register_python_module",id:"core/eli/register/sst_eli_register_python_module",title:"SST_ELI_REGISTER_PYTHON_MODULE",description:"Libraries can implement python modules to assist with, for example, configuration. Such modules use this macro to register with the SST Core. Modules will be available as submodules in the 'sst' python module.",source:"@site/../docs/core/eli/register/sst_eli_register_python_module.md",sourceDirName:"core/eli/register",slug:"/core/eli/register/sst_eli_register_python_module",permalink:"/sst-docs/docs/core/eli/register/sst_eli_register_python_module",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/eli/register/sst_eli_register_python_module.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"SST_ELI_REGISTER_PYTHON_MODULE",sidebar_label:"Python Module"},sidebar:"core",previous:{title:"Profile Tool",permalink:"/sst-docs/docs/core/eli/register/sst_eli_register_profiletool"},next:{title:"Document",permalink:"/sst-docs/docs/category/document"}},s={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}],m={toc:p},d="wrapper";function u(e){let{components:r,...t}=e;return(0,o.kt)(d,(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'SST_ELI_REGISTER_PYTHON_MODULE(class_name, "library", SST_ELI_ELEMENT_VERSION(major, minorX, minorY) )\n')),(0,o.kt)("p",null,"Libraries can implement python modules to assist with, for example, configuration. Such modules use this macro to register with the SST Core. Modules will be available as submodules in the 'sst' python module."),(0,o.kt)("admonition",{title:"Important",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This macro must reside in a ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," section of the module's C++ class declaration.")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"class_name")," (class) The name of the Component class. This is not a string."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"library")," (string) The name of the library that this Component belongs to. If the library name does not exist, it will be created."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"SST_ELI_ELEMENT_VERSION(major, minorX, minorY)")," This is a macro that specifies the version of a Component. ",(0,o.kt)("inlineCode",{parentName:"li"},"major"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"minorX"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"minorY")," are integers that form a version number major.minorX.minorY. For example: SST_ELI_ELEMENT_VERSION(3, 0, 9) yields a version of 3.0.9. Versions are not checked by SST, this is provided for developers to version and manage their libraries.")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"This example comes from SST's Merlin element library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'namespace SST {\nnamespace Merlin {\n\nclass MerlinPyModule : public SSTElementPythonModule {\npublic:\n\n    //highlight-start\n    SST_ELI_REGISTER_PYTHON_MODULE(\n        SST::Merlin::MerlinPyModule,    // Module class\n        "merlin",                       // Library name\n        SST_ELI_ELEMENT_VERSION(1,0,0)  // Module version\n    )\n    //highlight-end\n\n    /* Required for certain compilers because this class is not declared in a header file */\n    SST_ELI_EXPORT(SST::Merlin::MerlinPyModule)\n\n    /* Constructor, add the Python modules to SST */\n    MerlinPyModule(std::string library) :\n    SSTElementPythonModule(library)\n    {\n        auto primary_module = createPrimaryModule(pymerlin, "pymerlin.py");\n        primary_module->addSubModule("base",pymerlin_base,"pymerlin-base.py");\n        primary_module->addSubModule("endpoint",pymerlin_endpoint,"pymerlin-endpoint.py");\n        primary_module->addSubModule("router",pymerlin_router,"pymerlin-router.py");\n        primary_module->addSubModule("interface",pymerlin_interface,"interfaces/pymerlin-interface.py");\n        primary_module->addSubModule("targetgen",pymerlin_targetgen,"interfaces/pymerlin-targetgen.py");\n        primary_module->addSubModule("topology",pymerlin_topo_dragonfly,"topology/pymerlin-topo-dragonfly.py");\n        primary_module->addSubModule("topology",pymerlin_topo_hyperx,"topology/pymerlin-topo-hyperx.py");\n        primary_module->addSubModule("topology",pymerlin_topo_fattree,"topology/pymerlin-topo-fattree.py");\n        primary_module->addSubModule("topology",pymerlin_topo_mesh,"topology/pymerlin-topo-mesh.py");        \n    }\n};\n\n} } /* namespaces */\n')),(0,o.kt)("h2",{id:"header"},"Header"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/module/element_python.h>\n")))}u.isMDXComponent=!0}}]);