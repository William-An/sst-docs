"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2619],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),l=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,f=m["".concat(i,".").concat(d)]||m[d]||u[d]||a;return n?o.createElement(f,c(c({ref:t},p),{},{components:n})):o.createElement(f,c({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:r,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>m});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),c=["components"],s={title:"constructor"},i=void 0,l={unversionedId:"core/component/componentext/constructor",id:"core/component/componentext/constructor",title:"constructor",description:"Availability: ComponentExtension",source:"@site/../docs/core/component/componentext/constructor.md",sourceDirName:"core/component/componentext",slug:"/core/component/componentext/constructor",permalink:"/docs/docs/core/component/componentext/constructor",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/component/componentext/constructor.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"constructor"},sidebar:"Core API",previous:{title:"SST::ComponentExtension",permalink:"/docs/docs/core/component/componentext/class"},next:{title:"destructor",permalink:"/docs/docs/core/component/componentext/destructor"}},p={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],u={toc:m},d="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,c);return(0,a.kt)(d,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Subclass constructor\nComponentExtensionClassName(SST::ComponentId_t id, ...);\n// Base SST::ComponentExtension class constructor\nSST::ComponentExtension::ComponentExtension(SST::ComponentId_t id);\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Availability"),": ComponentExtension\nSST calls this constructor when a ComponentExtension is loaded."),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"id")," (ComponentId_t) A unique ID generated by SST for each component. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"...")," (Variable) Arguments specific to this class's constructor. These are provided by the Component that loads the extension."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"returns")," (ComponentExtension*) The newly constructed component")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'/* Source: memHierarchy/mshr.h\n\n#include <sst/core/componentextension.h>\n\n/* The MSHR is really just a buffer that a cache uses but it is useful to be able to access\n * some of the simulation time functions available to components. We could make this a subcomponent \n * but it doesn\'t need to be available to users to swap dynamically. \n */\nclass MSHR : public SST::ComponentExtension\n{\npublic:\n    // No ELI needed\n\n    // id is passed automatically by SST when loaded, the rest of the args are provided by the Component \n    // that loads this extension\n    MSHR(ComponentId_t id, Output* dbg, int maxSize, std::string cacheName, std::set<Addr> debugAddr);\n    virtual ~MSHR() {}\n\n    int getMaxSize();\n    int getSize();\n\n    /* Rest of class here */\n\n};\n\n/* Source: memHierarchy/mshr.cc */\n#include <sst_config.h>\n#include "mshr.h"\n\nMSHR::MSHR(ComponentId_t id, Output* debug, int maxSize, string cacheName, std::set<Addr> debugAddr) :\n    ComponentExtension(id)\n{\n    /* Constructor here */\n}\n\n/* Rest of functions defined here */\n\n')),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/componentExtension.h>\n")))}f.isMDXComponent=!0}}]);