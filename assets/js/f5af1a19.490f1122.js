"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1318],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(n),c=a,k=u["".concat(p,".").concat(c)]||u[c]||d[c]||r;return n?i.createElement(k,o(o({ref:t},m),{},{components:n})):i.createElement(k,o({ref:t},m))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7198:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>k,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],l={title:"Running Motifs"},p=void 0,s={unversionedId:"elements/ember/RunningMotifs",id:"elements/ember/RunningMotifs",title:"Running Motifs",description:"Ember Python Configuration",source:"@site/../docs/elements/ember/RunningMotifs.md",sourceDirName:"elements/ember",slug:"/elements/ember/RunningMotifs",permalink:"/sst-docs/docs/elements/ember/RunningMotifs",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/elements/ember/RunningMotifs.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"Running Motifs"},sidebar:"elements",previous:{title:"Creating Motifs",permalink:"/sst-docs/docs/elements/ember/CreatingMotifs"}},m={},u=[{value:"Ember Python Configuration",id:"ember-python-configuration",level:2},{value:"Running Ember",id:"running-ember",level:2},{value:"Key Components",id:"key-components",level:2},{value:"Topologies",id:"topologies",level:2},{value:"Creating a Router",id:"creating-a-router",level:2},{value:"Specifying Computation",id:"specifying-computation",level:2},{value:"Running the simulation",id:"running-the-simulation",level:2}],d={toc:u},c="wrapper";function k(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)(c,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"ember-python-configuration"},"Ember Python Configuration"),(0,r.kt)("p",null,"The Python file in Ember specifies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"How to set up the SST simulation"),(0,r.kt)("li",{parentName:"ul"},"Allows multiple configurations to be specified and run"),(0,r.kt)("li",{parentName:"ul"},"Loads Motifs into the simulation to be performed.")),(0,r.kt)("h2",{id:"running-ember"},"Running Ember"),(0,r.kt)("p",null,"Ember uses a python interpreter built into the SST compiler.\n",(0,r.kt)("inlineCode",{parentName:"p"},"sst python-file.py")," executes the python script."),(0,r.kt)("h2",{id:"key-components"},"Key Components"),(0,r.kt)("p",null,"The python file specifies the format of the SST simulation. The python file specifies components of our simulation such as network Topology, Routers, NetworkInterface and the computation to be performed in the form of Motifs."),(0,r.kt)("p",null,"First, we import the necessary components of merlin and set the Platform to firefly defaults."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'    import sst\n    from sst.merlin.base import *\n    from sst.merlin.endpoint import *\n    from sst.merlin.interface import *\n    from sst.merlin.topology import *\n\n    from sst.ember import *\n\n    if __name__ == "__main__":\n\n        PlatformDefinition.setCurrentPlatform("firefly-defaults")\n')),(0,r.kt)("p",null,"Next, we create a topology that our experiment will run on."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"topo = topoDragonFly()"),"\nCreates a dragonfly topology.\nWe can then specify parameters about the topology using a dot-operator. e.g.,\n",(0,r.kt)("inlineCode",{parentName:"p"},"topo.num_groups = 4")),(0,r.kt)("h2",{id:"topologies"},"Topologies"),(0,r.kt)("p",null,"The python file allows the user to specify comparable hardware configurations.\nFour different topologies can be specified with different routing algorithms.\nHere we give a comprehensive list of the topologies and how they can be initialized."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"HyperX ",(0,r.kt)("inlineCode",{parentName:"p"},"topoHyperX")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"shape"),"\nSpecifies the shape of the mesh. i.e. topo.shape=4x4 or topo.shape=4x4x4. Any number of dimensions is supported."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width"),"\nThe number of links between routers in each dimension is specified in the same manner as shape."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"local_ports"),"\nNumber of endpoints attached to each router"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"algorithm"),"\nRouting algorithm to use.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DOAL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DOR")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DOR-ND")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MIN-A")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"VDAL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"valiant")))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Torus ",(0,r.kt)("inlineCode",{parentName:"p"},"topoTorus")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Shape\nSpecifies the mesh grid size, i.e., topo.shape=4x4 or topo.shape=4x4x4. Any number of dimensions is supported."),(0,r.kt)("li",{parentName:"ul"},"Width\nNumber of links between routers in each dimension, specified in the same way as shape."),(0,r.kt)("li",{parentName:"ul"},"local","_","ports\nNumber of endpoints attached to each router"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fat Tree ",(0,r.kt)("inlineCode",{parentName:"p"},"topoFatTree")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"shape"),'\nThe shape of the fat tree. Specified as pair of downlinks and uplinks per level separated by a colon. i.e., topo.shape="4,2:3,5" specifies the first level has 4 down and 2 up, and the following level has 3 down and 5 up.\nIf only one number is given, it is interpreted as the number of downlinks and up is set to 0.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"routing_alg")," Routing algorithm to use",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deterministic")," (default)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"adaptive")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"adaptive threshold."),"\nThe threshold is used to determine if a packet will adaptively route."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Dragonfly ",(0,r.kt)("inlineCode",{parentName:"p"},"topoDragonFly")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hosts_per_router"),"\nNumber of hosts connected to each router"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"routers_per_group"),"\nThe number of links used to connect to routers in the same group."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"intergroup_per_router"),"\nThe number of links per router connected to other groups."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"intergroup_links"),"\nThe number of links between each pair of groups."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"num_groups"),"\nNumber of groups in a network"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"intergroup_links")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"algorithm"),"\nSpecifies how each virtual network routes messages.\nSpecified for each router.vn. i.e., if router.vn=2, than topo.algorithm=","[",'"minimal", "adaptive-local"], the first router uses minimal, and the second will use adaptive-local.',(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"minimal")," (default)\\"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"adaptive_local")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ugal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"min-a")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"valiant"),"\nValiant only operates if there are more than two num","_","groups. Otherwise, there is no point in using valiant routing."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"adaptive_threshold"),"\nThreshold when making adaptive routing decisions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"global_link_map"),"\nAn array specifying connectivity of global links in each dragonfly group"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"global_route_mode"),"\nMode for interpreting global link map",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"absolute")," (default)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"relative"))))))),(0,r.kt)("h2",{id:"creating-a-router"},"Creating a Router"),(0,r.kt)("p",null,"Once the router has been created, the topology needs to be linked to the router. Additionally, the link","_","latency can be set in the topology at this point."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'topo.router = router\ntopo.link_latency = "20ns"\n')),(0,r.kt)("p",null,"Parameters for a high radix router or  ",(0,r.kt)("inlineCode",{parentName:"p"},"hr_routers"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),"\nThe ID of the router"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"num_ports"),"\nNumber of ports the router has"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topology"),"\nName of the topology subcomponent loaded to control routing"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xbar_arb"),"\nArbitration unit used for the crossbar. Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"merlin.xbar_arb_lru"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"merlin.xbar_arb_lru"),"\nUses Least recently used arbitration for ",(0,r.kt)("inlineCode",{parentName:"li"},"hr_router.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"merlin.xbar_arb_age"),"\nAge-based arbitration unit for ",(0,r.kt)("inlineCode",{parentName:"li"},"hr_router")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"merlin.xbar_arb_lru"),"\nLeast recently used arbitration unit with infinite crossbar for ",(0,r.kt)("inlineCode",{parentName:"li"},"hr_router")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"merlin.xbar_arb_rand"),"\nRandom arbitration unit for ",(0,r.kt)("inlineCode",{parentName:"li"},"hr_router")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"merlin.xbar_arb_rr"),"\nRound-robin arbitration unit for ",(0,r.kt)("inlineCode",{parentName:"li"},"hr_router")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"link_bw"),"\nBandwidth of the links specified in either b/s or B/s (can include SI prefix)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flit_size"),"\nFlit size specified in either b or B"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xbar_bw"),"\nBandwidth of the crossbar specified in either b/s or B/s"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_latency"),"\nLatency of packets entering switch into input buffers. Specified in s."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"output_latency"),"\nLatency of packets exiting switch from output buffers. Specified in s."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"network_inspectors"),"\nComma-separated list of network inspectors to put on output ports"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"oql_track_port"),"\nSet to true track output queue length for an entire port. False tracks per VC (default).")),(0,r.kt)("h1",{id:"creating-network-interface"},"Creating Network Interface"),(0,r.kt)("p",null,"Create the network interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"networkif = ReorderLinkControl()\n")),(0,r.kt)("p",null,"The ReorderLinkControl() creates a network interface that can handle out-of-order packet arrival. Events are sequenced, and order is reconstructed on receive."),(0,r.kt)("h2",{id:"specifying-computation"},"Specifying Computation"),(0,r.kt)("p",null,"Initialize the MPIJob to use all the nodes in our topology:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ep = EmberMPIJob(0, topo.getNumNodes())"),"\nThe network interface then needs to be linked to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ep")," variable\n",(0,r.kt)("inlineCode",{parentName:"p"},"ep.network_interface = networkif()"),"\nThen a series of Motifs can be queued for computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'    ep.addMotif("Init")\n    ep.addMotif("Allreduce")\n    ep.addMotif("Fini")\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"addMotif")," function adds the specified Motif to a queue. The Motif is named through an ",(0,r.kt)("a",{parentName:"p",href:"../../core/eli/sst_eli_register_subcomponent"},(0,r.kt)("inlineCode",{parentName:"a"},"SST\\_ELI\\_REGISTER\\_SUBCOMPONENT"))," command in the C++ Motif definition. The ",(0,r.kt)("inlineCode",{parentName:"p"},"SST\\_ELI\\_REGISTER\\_SUBCOMPONENT"),' parameter follows the naming convention "ExampleMotif", and to add the Motif to ',(0,r.kt)("inlineCode",{parentName:"p"},"ep")," using ",(0,r.kt)("inlineCode",{parentName:"p"},'ep.addMotif("Example")')," The \"Motif\" portion is implied in the naming.\nParameters can be passed to motifs through the string. The parameters are read as a list of assignments, separated by whitespace. For example, a motif 'Sum' that takes three integers as a parameter named x, y, and z\nThe Motif would be invoked ",(0,r.kt)("inlineCode",{parentName:"p"},'ep.addMotif("Sum x=4 y=5 z=6")')," would pass the arguments as args.x, args.y, and args.z with assigned values 4, 5, and 6, respectively. The arguments are passed in a Param object to the motif generator to be parsed. "),(0,r.kt)("p",null,"Some additional functions that can be called on an endpoint or the ",(0,r.kt)("inlineCode",{parentName:"p"},"ep")," variable:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getName()"),'\nReturns the name of the ep. i.e., it will return "EmberMPIJob"'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enableMotifLog()"),"\nStarts logging the Motifs as they are executed.")),(0,r.kt)("p",null,"Some common MPI-function call motifs that exist in Ember:"),(0,r.kt)("h2",{id:"running-the-simulation"},"Running the simulation"),(0,r.kt)("p",null,"Finally, we create the 'system', which then runs the simulation. The topology is set with the setTopology function, and the endpoint is specified by system.allocateNodes. Build executes the motifs in the endpoint."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'    system = System()\n    system.setTopology(topo)\n    system.allocateNodes(ep,"linear")\n    system.build()\n')),(0,r.kt)("p",null,'While most of the System is self-explanatory, the system allows the user to specify how threads/processes are assigned to nodes in the allocateNodes function.\nThe allocateNodes function allows the user to specify how the nodes are allocated. In the example, "linear" is chosen. In linear, the nodes are sorted, and threads are placed in linear order onto the simulated nodes. There are additional ways to allocate nodes, such as "random", "interval", and "indexed".'))}k.isMDXComponent=!0}}]);