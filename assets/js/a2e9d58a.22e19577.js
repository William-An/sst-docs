"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5150],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,d=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,f=m["".concat(d,".").concat(u)]||m[u]||p[u]||s;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[m]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},11041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const s={title:"send"},o=void 0,i={unversionedId:"core/iface/StandardMem/send",id:"core/iface/StandardMem/send",title:"send",description:"Send a Request to the interface.",source:"@site/../docs/core/iface/StandardMem/send.md",sourceDirName:"core/iface/StandardMem",slug:"/core/iface/StandardMem/send",permalink:"/sst-docs/docs/core/iface/StandardMem/send",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/send.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"send"},sidebar:"core",previous:{title:"recvUntimedData",permalink:"/sst-docs/docs/core/iface/StandardMem/recvUntimedData"},next:{title:"sendUntimedData",permalink:"/sst-docs/docs/core/iface/StandardMem/sendUntimedData"}},d={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing send() in a StandardMem interface",id:"example-1-implementing-send-in-a-standardmem-interface",level:3},{value:"Example 2: Using send() from an endpoint",id:"example-2-using-send-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}],l={toc:c},m="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void send(Request* req) = 0;\n")),(0,a.kt)("p",null,"Send a Request to the interface."),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Memory interface")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Accept requests through this call. Requests cannot be refused so the interface must handle overflow internally."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Use this function to send requests to the memory system via the interface."),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"req")," (Request*) A Request to send to the memory system"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"returns")," none")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"example-1-implementing-send-in-a-standardmem-interface"},"Example 1: Implementing send() in a StandardMem interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'"Excerpt from sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"','"Excerpt':!0,from:!0,'sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"':!0},"void StandardInterface::send(StandardMem::Request* req)\n{\n    // Convert req to memHierarchy's internal event type, 'MemEventBase'\n    MemEventBase* me = static_cast<MemEventBase*>(req->convert(converter_));\n    if (req->needsResponse())\n    {\n        requests_[me->getID()] = std::make_pair(req, me->getCmd()); /* Save the request so we can use it to generate a response later */\n    } else \n    {\n        delete req;\n    }\n\n    link_->send(me);\n}\n")),(0,a.kt)("h3",{id:"example-2-using-send-from-an-endpoint"},"Example 2: Using send() from an endpoint"),(0,a.kt)("p",null,"StandardCPU issues memory transactions during its clock function, excerpted here."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/testcpu/standardCPU.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/memHierarchy/testcpu/standardCPU.cc"':!0},"bool standardCPU::clockTic ( Cycle_t )\n{\n    /* Bookkeeping here */\n\n    /* Generate a request if possible - pseudocode for brevity */\n    if ( /* conditions are right to generate a new request */ )\n    {\n        /* Randomly generate an address */\n        StandardMem::Addr addr = rng.generateNextUInt64();\n\n        uint32_t instNum = /* Randomly selected instruction type */\n        Interfaces::StandardMem::Request* req = create(/* Instruction with type instNum and address addr */);\n\n        memory->send(req);\n    }\n}\n")),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stdMem.h>\n")))}p.isMDXComponent=!0}}]);