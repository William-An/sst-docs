"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5503],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=s(n),u=a,v=c["".concat(d,".").concat(u)]||c[u]||m[u]||l;return n?r.createElement(v,i(i({ref:t},p),{},{components:n})):r.createElement(v,i({ref:t},p))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[c]="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>v,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],o={title:"send"},d=void 0,s={unversionedId:"core/link/send",id:"core/link/send",title:"send",description:"Send an event over the link, optionally, with additional latency added to the mimimum latency the link was configured with as well as any other latency added to the link.",source:"@site/../docs/core/link/send.md",sourceDirName:"core/link",slug:"/core/link/send",permalink:"/sst-website/docs/core/link/send",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/link/send.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"send"},sidebar:"Core API",previous:{title:"SST::Link",permalink:"/sst-website/docs/core/link/class"},next:{title:"recv",permalink:"/sst-website/docs/core/link/recv"}},p={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"Header",id:"header",level:2}],m={toc:c},u="wrapper";function v(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void send(SimTime_t delay, TimeConverter* tc, Event* event);\nvoid send(SimTime_t delay, Event* event);\nvoid send(Event* event);\n")),(0,l.kt)("p",null,"Send an event over the link, optionally, with additional latency added to the mimimum latency the link was configured with as well as any other latency added to the link."),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"delay")," (SimTime_t) Additional latency to add, specified as a cycle count"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"tc")," (TimeConverter*) Units of delay. If not specified, the units will be the link's default time base."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"event")," (Event*) The event to send."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returns")," none")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"example-1"},"Example 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'// #1 - with the Link\'s default delay + an additional delay using the specified TimeConverter\nSST::TimeConverter* nanoTimeConverter = Simulation::getSimulation()->getTimeLord()->getTimeConverter("1ns");\nEmberEvent* nextEv = evQueue.front();\nevQueue.pop();\n\n// issue the next event to the engine for deliver later, add nanoDelay * nanoTimeConverter latency\nselfEventLink->send(nanoDelay, nanoTimeConverter, nextEv);\n')),(0,l.kt)("h3",{id:"example-2"},"Example 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// #2 - with the Link's default delay + an additional delay using the default TimeConverter for the Link\nport_link->send(1,ev);\n")),(0,l.kt)("h3",{id:"example-3"},"Example 3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// #3 - send with the Link's default delay\nvoid free( SimVAddr addr, std::function<void(uint64_t)> fini ) {\n        Entry* entry = new Entry( fini );\n\n        MemoryHeapEvent* event = new MemoryHeapEvent;\n        event->key = (MemoryHeapEvent::Key) entry;\n        event->type = MemoryHeapEvent::Free;\n        event->addr = addr;\n\n        m_link->send(event);        \n}\n\n")),(0,l.kt)("h2",{id:"header"},"Header"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/link.h>\n")))}v.isMDXComponent=!0}}]);