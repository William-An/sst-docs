"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9670],{67804:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var t=s(74848),i=s(28453);const a={title:"Signal handling"},d=void 0,r={id:"guides/features/signal",title:"Signal handling",description:"SST handles the SIGINT, SIGTERM, SIGUSR1, and SIGUSR2 signals.",source:"@site/../docs/guides/features/signal.md",sourceDirName:"guides/features",slug:"/guides/features/signal",permalink:"/sst-docs/docs/guides/features/signal",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/guides/features/signal.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1727462588e3,frontMatter:{title:"Signal handling"},sidebar:"guides",previous:{title:"Checkpoint and restart",permalink:"/sst-docs/docs/guides/features/checkpoint"},next:{title:"Tips and Tricks",permalink:"/sst-docs/docs/category/tips-and-tricks"}},o={},l=[{value:"SIGINT and SIGTERM",id:"sigint-and-sigterm",level:2},{value:"SIGUSR1",id:"sigusr1",level:2},{value:"SIGUSR2",id:"sigusr2",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["SST handles the ",(0,t.jsx)(n.code,{children:"SIGINT"}),", ",(0,t.jsx)(n.code,{children:"SIGTERM"}),", ",(0,t.jsx)(n.code,{children:"SIGUSR1"}),", and ",(0,t.jsx)(n.code,{children:"SIGUSR2"})," signals."]}),"\n",(0,t.jsxs)(n.p,{children:["Signals are only detected and handled during SST's ",(0,t.jsx)(n.a,{href:"/sst-docs/docs/guides/concepts/lifecycle",children:"run phase"}),". Signals sent earlier may be missed. Signals sent later will be ignored."]}),"\n",(0,t.jsx)(n.h2,{id:"sigint-and-sigterm",children:"SIGINT and SIGTERM"}),"\n",(0,t.jsxs)(n.p,{children:["SIGINT and SIGTERM cause SST to initiate an emergency shutdown. It exits the run phase, calls ",(0,t.jsx)(n.code,{children:"emergencyShutdown()"})," on all components in the simulation, and exits."]}),"\n",(0,t.jsx)(n.h2,{id:"sigusr1",children:"SIGUSR1"}),"\n",(0,t.jsx)(n.p,{children:"Sending SST a SIGUSR1 causes the SST-Core to generate a status message with the current simulation time. The output looks like this."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"\tCurrentSimCycle:  11090000\n"})}),"\n",(0,t.jsx)(n.p,{children:"In parallel simulations, each parallel context (thread and/or rank) will generate its own message."}),"\n",(0,t.jsx)(n.h2,{id:"sigusr2",children:"SIGUSR2"}),"\n",(0,t.jsxs)(n.p,{children:["Sending SST a SIGUSR2 causes the SST-Core to generate a status message and every component in the simulation is also given the opportunity to generate a status update. SST-Core does this by calling the ",(0,t.jsx)(n.code,{children:"printStatus()"})," function on each component."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsxs)(n.p,{children:["When running SST with OpenMPI, signals sent to the ",(0,t.jsx)(n.code,{children:"mpirun"})," process are not always handled as expected. This can be avoided by sending the signal directly to one of the SST ranks."]}),(0,t.jsxs)(n.p,{children:["When sent to ",(0,t.jsx)(n.code,{children:"mpirun"}),":"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"SIGUSR1 and SIGUSR2 signals may be duplicated in SST."}),"\n",(0,t.jsx)(n.li,{children:"SIGINT and SIGTERM are not always delivered to the SST processes so emergency shutdown may not occur before SST is terminated."}),"\n"]})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>r});var t=s(96540);const i={},a=t.createContext(i);function d(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);