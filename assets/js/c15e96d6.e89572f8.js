"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7658],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=i,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},14442:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(87462),i=(r(67294),r(3905));const a={title:"requestToReceive"},o=void 0,l={unversionedId:"core/iface/SimpleNetwork/requestToReceive",id:"core/iface/SimpleNetwork/requestToReceive",title:"requestToReceive",description:"Checks if there is a waiting network request pending in the specified virtual network.",source:"@site/../docs/core/iface/SimpleNetwork/requestToReceive.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/requestToReceive",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/requestToReceive",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/requestToReceive.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"requestToReceive"},sidebar:"core",previous:{title:"recvUntimedData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/recvUntimedData"},next:{title:"send",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/send"}},s={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing requestToReceive in a SimpleNetwork interface",id:"example-1-implementing-requesttoreceive-in-a-simplenetwork-interface",level:3},{value:"Example 2: Calling requestToReceive from an endpoint",id:"example-2-calling-requesttoreceive-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual bool requestToReceive(int vn) = 0;\n")),(0,i.kt)("p",null,"Checks if there is a waiting network request pending in the specified virtual network."),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","Must return whether a network request is pending in the specified virtual network, ",(0,i.kt)("inlineCode",{parentName:"p"},"vn"),". If this function returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", a subsequent call to ",(0,i.kt)("inlineCode",{parentName:"p"},"recv()")," must return a request."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","Can use this function to determine if a request is waiting."),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"vn")," (int) Virtual network to check"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns")," (bool) ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if a network request is pending in the specified virtual network, ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," otherwise")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"example-1-implementing-requesttoreceive-in-a-simplenetwork-interface"},"Example 1: Implementing requestToReceive in a SimpleNetwork interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.h"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.h"':!0},"#include <sst/core/interfaces/simpleNetwork.h>\n\nbool requestToReceive( int vn )\n{\n    /* \n     * When LinkControl receives a request on a link, it puts \n     * the request into the input_queues buffer for the \n     * relevant virtual network\n     */\n    return !input_queues[vn].empty();\n}\n")),(0,i.kt)("h3",{id:"example-2-calling-requesttoreceive-from-an-endpoint"},"Example 2: Calling requestToReceive from an endpoint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"...\nif ( net_iface->requestToReceive(vn) )\n{\n    SST::Interfaces::SimpleNetwork::Request* req = net_iface->recv(vn); // Will not return nullptr since requestToReceive returned true\n    /* Do something with req here */\n    delete req;\n}\n...\n")),(0,i.kt)("h2",{id:"header"},"Header"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}m.isMDXComponent=!0}}]);