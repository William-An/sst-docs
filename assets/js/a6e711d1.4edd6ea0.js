"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4344],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),u=a,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},71619:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={title:"prospero"},i=void 0,s={unversionedId:"elements/prospero/intro",id:"elements/prospero/intro",title:"prospero",description:"Prospero is a trace-based core model. The core models memory instructions only. Multiple Prospero cores can be used in the same simulation, each running independent trace files, to model a multicore architecture. A Pintool for collecting traces from x86 binaries is included. Prospero interfaces with memory via the SST::StandardMem interface.",source:"@site/../docs/elements/prospero/intro.md",sourceDirName:"elements/prospero",slug:"/elements/prospero/intro",permalink:"/sst-docs/docs/elements/prospero/intro",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/elements/prospero/intro.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1698427633,formattedLastUpdatedAt:"Oct 27, 2023",frontMatter:{title:"prospero"},sidebar:"elements",previous:{title:"osseous",permalink:"/sst-docs/docs/elements/osseous/intro"},next:{title:"rdmaNic",permalink:"/sst-docs/docs/elements/rdmaNic/intro"}},l={},p=[{value:"Required dependencies: None",id:"required-dependencies-none",level:3},{value:"Optional dependencies: None",id:"optional-dependencies-none",level:3},{value:"Trace Format",id:"trace-format",level:2},{value:"Text",id:"text",level:3},{value:"Binary",id:"binary",level:3},{value:"Compressed",id:"compressed",level:3}],c={toc:p},m="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prospero")," is a trace-based core model. The core models memory instructions only. Multiple Prospero cores can be used in the same simulation, each running independent trace files, to model a multicore architecture. A Pintool for collecting traces from x86 binaries is included. Prospero interfaces with memory via the ",(0,a.kt)("a",{parentName:"p",href:"../../core/iface/StandardMem/class"},"SST::StandardMem")," interface."),(0,a.kt)("admonition",{title:"At a Glance",type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Source Code:")," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sstsimulator/sst-elements/tree/master/src/sst/elements/prospero"},"sst-elements/.../prospero")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"SST Name:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"prospero")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Maturity Level:")," Prototype (2) ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Development Path:")," Active ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Last Released:")," SST 13.0")),(0,a.kt)("h3",{id:"required-dependencies-none"},"Required dependencies: None"),(0,a.kt)("h3",{id:"optional-dependencies-none"},"Optional dependencies: None"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Pin")," If available, the included Pintool can be used to generate a trace for simulation, otherwise a trace must be acquired separately."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"zlib")," Enables reading and/or generating a compressed execution trace")),(0,a.kt)("h2",{id:"trace-format"},"Trace Format"),(0,a.kt)("h3",{id:"text"},"Text"),(0,a.kt)("p",null,"Each line of a text trace represents a separate memory access. The format is ",(0,a.kt)("inlineCode",{parentName:"p"},"cycles type address length")," where:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"cycles")," Minimum cycle count at which the request can be issued"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"type")," ",(0,a.kt)("inlineCode",{parentName:"li"},"R")," (read) or ",(0,a.kt)("inlineCode",{parentName:"li"},"W")," (write). Not case-sensitive."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"address")," Memory address"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"length")," Number of bytes to read or write")),(0,a.kt)("h3",{id:"binary"},"Binary"),(0,a.kt)("p",null,"Each record in a binary trace consists of the same four fields as the text trace, except that they are represented as a byte array (",(0,a.kt)("inlineCode",{parentName:"p"},"char*"),"). There is no separator between records and the size of each field is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"cycles")," ",(0,a.kt)("inlineCode",{parentName:"li"},"uint64_t")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"type")," ",(0,a.kt)("inlineCode",{parentName:"li"},"char")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"address")," ",(0,a.kt)("inlineCode",{parentName:"li"},"uint64_t")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"length")," ",(0,a.kt)("inlineCode",{parentName:"li"},"uint32_t"))),(0,a.kt)("h3",{id:"compressed"},"Compressed"),(0,a.kt)("p",null,"If zlib is available, use of compressed text or binary traces is supported."))}d.isMDXComponent=!0}}]);