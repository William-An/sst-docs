"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1129],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7120:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={title:"setDefaultTimeBase"},s=void 0,c={unversionedId:"core/link/setDefaultTimeBase",id:"core/link/setDefaultTimeBase",title:"setDefaultTimeBase",description:"Sets the default time base for the link. This will be the units of send latency if additional latency is added using send() without specifying units.",source:"@site/../docs/core/link/setDefaultTimeBase.md",sourceDirName:"core/link",slug:"/core/link/setDefaultTimeBase",permalink:"/docs/docs/core/link/setDefaultTimeBase",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/link/setDefaultTimeBase.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"setDefaultTimeBase"},sidebar:"Core API",previous:{title:"getDefaultTimeBase",permalink:"/docs/docs/core/link/getDefaultTimeBase"},next:{title:"sendUntimedData",permalink:"/docs/docs/core/link/sendUntimedData"}},p={},u=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],m={toc:u},d="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void setDefaultTimeBase(TimeConverter* tc);\n")),(0,i.kt)("p",null,"Sets the default time base for the link. This will be the units of send latency if additional latency is added using ",(0,i.kt)("inlineCode",{parentName:"p"},"send()")," without specifying units. "),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Calls to ",(0,i.kt)("a",{parentName:"p",href:"../component/time/registerClock"},(0,i.kt)("inlineCode",{parentName:"a"},"registerClock()"))," and ",(0,i.kt)("a",{parentName:"p",href:"../component/time/registerTimeBase"},(0,i.kt)("inlineCode",{parentName:"a"},"registerTimeBase()"))," can also affect a (sub)component's default time base.")),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"tc")," (TimeConverter*) A TimeConverter representing the default units of latency to use on the link"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns")," none")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"example-1"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"/* Excerpt from kingsley/linkControl.cc */\nvoid LinkControl::init(unsigned int phase)\n{\n    Event* ev;\n    NocInitEvent* init_ev;\n    switch ( init_state ) {\n        case 0:\n            /* Handle case 0 */\n        case 1:\n            ev = rtr_link->recvInitData();\n            if ( NULL == ev ) break;\n            init_ev = static_cast<NocInitEvent*>(ev);\n            UnitAlgebra flit_size_ua = init_ev->ua_value;\n            flit_size = flit_size_ua.getRoundedValue();\n\n            // Compute the link timebase based on the link bandwidth\n            UnitAlgebra link_clock = link_bw / flit_size_ua;\n\n            // Set the 'output_timing' link's timebase to match bandwdith\n            TimeConverter* tc = getTimeConverter(link_clock);\n            output_timing->setDefaultTimeBase(tc);\n        \n        /* Rest of case handling and init() */\n}\n")),(0,i.kt)("h2",{id:"header"},"Header"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/link.h>\n")))}f.isMDXComponent=!0}}]);