"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1770],{8602:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>l,toc:()=>i});var r=n(85893),s=n(11151);const c={title:"clone"},o=void 0,l={id:"core/events/clone",title:"clone",description:"clone() can be implemented by event classes for copying the event.",source:"@site/../docs/core/events/clone.md",sourceDirName:"core/events",slug:"/core/events/clone",permalink:"/sst-docs/docs/core/events/clone",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/events/clone.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"clone"},sidebar:"core",previous:{title:"serialize_order",permalink:"/sst-docs/docs/core/events/serialize_order"},next:{title:"generateUniqueId",permalink:"/sst-docs/docs/core/events/generateUniqueId"}},a={},i=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"virtual Event* clone();\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"clone()"})," can be implemented by event classes for copying the event."]}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"returns"})," A copy of the event"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/merlin/router.h"',children:"// Implement a clone function that can \n// be used to copy a RtrEvent for broadcasts\nvirtual RtrEvent* clone() override {\n    RtrEvent * ret = new RtrEvent(*this);\n    ret->request = this->request->clone(); // Clone the request that this event wraps\n    return ret;\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/event.h>\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>o});var r=n(67294);const s={},c=r.createContext(s);function o(e){const t=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(c.Provider,{value:t},e.children)}}}]);