"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5760],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(r),d=a,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2682:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],o={title:"setPrefix"},p=void 0,s={unversionedId:"core/output/setPrefix",id:"core/output/setPrefix",title:"setPrefix",description:"Sets the Output's prefix.",source:"@site/../docs/core/output/setPrefix.md",sourceDirName:"core/output",slug:"/core/output/setPrefix",permalink:"/sst-docs/docs/core/output/setPrefix",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/output/setPrefix.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"setPrefix"},sidebar:"Core API",previous:{title:"getPrefix",permalink:"/sst-docs/docs/core/output/getPrefix"},next:{title:"getVerboseLevel",permalink:"/sst-docs/docs/core/output/getVerboseLevel"}},u={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],m={toc:c},d="wrapper";function f(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)(d,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void setPrefix(const std::string& prefix);\n")),(0,i.kt)("p",null,"Sets the Output's prefix."),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"prefix")," (std::string) Prefix to be prepended to all strings emitted by calls to ",(0,i.kt)("a",{parentName:"li",href:"debug"},(0,i.kt)("inlineCode",{parentName:"a"},"debug()")),", ",(0,i.kt)("a",{parentName:"li",href:"verbose"},(0,i.kt)("inlineCode",{parentName:"a"},"verbose()")),", ",(0,i.kt)("a",{parentName:"li",href:"fatal"},(0,i.kt)("inlineCode",{parentName:"a"},"fatal()"))," and ",(0,i.kt)("a",{parentName:"li",href:"../output"},(0,i.kt)("inlineCode",{parentName:"a"},"output()"))," (depends on which variant of ",(0,i.kt)("inlineCode",{parentName:"li"},"output()")," is used). No space will be inserted between the prepended prefix string and the normal output string. The following escape codes may be used in prefixes:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\@f")," Name of the file in which output call was made."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\@l")," Line number in the file in which output call was made."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\@p")," Name of the function from which output call was made."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\@r")," MPI rank of the calling process.  Will be empty if MPI_COMM_WORLD size is 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\@R")," MPI rank of the calling process.  Will be 0 if MPI_COMM_WORLD size is 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\@i")," Thread Id of the calling process.  Will be empty if number of threads is 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\@I")," Thread Id of the calling process.  Will be 0 if number of threads is 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\@x")," Rank information of the calling process.  Will be empty if number of MPI ranks and number of threads are both 1. Same as ","[",(0,i.kt)("inlineCode",{parentName:"li"},"\\@r:\\@i"),"]"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\@X")," Rank information of the calling process.  Will be ","[0.0]"," if number of MPI ranks and number of threads are both 1. Same as ","[",(0,i.kt)("inlineCode",{parentName:"li"},"\\@R:\\@I"),"]"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\@t")," Simulation time.  Will be the raw simulation cycle time."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns")," none")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"example-1"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'out->setPrefix("All output begins with this ");\n')),(0,i.kt)("h2",{id:"header"},"Header"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/output.h>\n")))}f.isMDXComponent=!0}}]);