"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6794],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,v=d["".concat(c,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(v,l(l({ref:t},p),{},{components:n})):a.createElement(v,l({ref:t},p))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},51555:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={title:"recvUntimedData"},l=void 0,o={unversionedId:"core/link/recvUntimedData",id:"core/link/recvUntimedData",title:"recvUntimedData",description:"Receive an event during SST's init() or complete() phase. Event handlers are not active during this time, so links must be polled using this function.",source:"@site/../docs/core/link/recvUntimedData.md",sourceDirName:"core/link",slug:"/core/link/recvUntimedData",permalink:"/sst-docs/docs/core/link/recvUntimedData",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/link/recvUntimedData.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"recvUntimedData"},sidebar:"core",previous:{title:"sendUntimedData",permalink:"/sst-docs/docs/core/link/sendUntimedData"},next:{title:"sendInitData",permalink:"/sst-docs/docs/core/link/sendInitData"}},c={},s=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}],p={toc:s},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Event* recvUntimedData();\n")),(0,r.kt)("p",null,"Receive an event during SST's ",(0,r.kt)("a",{parentName:"p",href:"../component/lifecycle/init"},(0,r.kt)("inlineCode",{parentName:"a"},"init()"))," or ",(0,r.kt)("a",{parentName:"p",href:"../component/lifecycle/complete"},(0,r.kt)("inlineCode",{parentName:"a"},"complete()"))," phase. Event handlers are not active during this time, so links must be polled using this function."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"recvInitData")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"recvUntimedData")," functions are identical. The latter was added when SST added the ",(0,r.kt)("inlineCode",{parentName:"p"},"complete()")," phase to indicate that it could be used during ",(0,r.kt)("em",{parentName:"p"},"any")," untimed phase, not just ",(0,r.kt)("inlineCode",{parentName:"p"},"init()"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"recvInitData")," may eventually be deprecated in favor of ",(0,r.kt)("inlineCode",{parentName:"p"},"recvUntimedData"),".")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"returns")," Event received or ",(0,r.kt)("inlineCode",{parentName:"li"},"nullptr")," if none available")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="sst-elements/src/sst/elements/simpleElementExample/basicSimLifeCycle.cc"',title:'"sst-elements/src/sst/elements/simpleElementExample/basicSimLifeCycle.cc"'},'void basicSimLifeCycle::init(unsigned int phase) {\n\n    // Only send our info on phase 0\n    if (phase == 0) {\n        basicLifeCycleEvent* event = new basicLifeCycleEvent(getName(), eventsToSend);\n        leftLink->sendUntimedData(event);\n    }\n\n    // Check if an event is received. recvUntimedData returns nullptr if no event is available\n    //highlight-next-line\n    while (SST::Event* ev = rightLink->recvUntimedData()) {\n\n        basicLifeCycleEvent* event = dynamic_cast<basicLifeCycleEvent*>(ev);\n\n        if (event) {\n            if (event->getStr() == getName()) { // Event made it around the ring and back to this component\n                delete event;\n            } else { // Event is from another component\n                neighbors.insert(event->getStr());\n                eventsToSend += event->getNum();\n                leftLink->sendUntimedData(event);\n            }\n\n        } else {\n            out->fatal(CALL_INFO, -1, "Error in %s: Received an event during init() but it is not the expected type\\n", getName().c_str());\n        }\n    }\n}\n')),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/link.h>\n")))}m.isMDXComponent=!0}}]);