"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9674],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),o=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=o(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=o(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||c[m]||l;return n?a.createElement(f,p(p({ref:t},s),{},{components:n})):a.createElement(f,p({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,p=new Array(l);p[0]=d;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:r,p[1]=u;for(var o=2;o<l;o++)p[o]=n[o];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5988:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>u,metadata:()=>o,toc:()=>c});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),p=["components"],u={id:"debug",title:"debug()"},i=void 0,o={unversionedId:"cpp/output/debug",id:"cpp/output/debug",title:"debug()",description:"Fully Qualified Name",source:"@site/../docs/cpp/output/debug.md",sourceDirName:"cpp/output",slug:"/cpp/output/debug",permalink:"/sst-website/docs/cpp/output/debug",draft:!1,editUrl:"https://github.com/sstsimulator/sst-website/edit/master/docs/../docs/cpp/output/debug.md",tags:[],version:"current",lastUpdatedBy:"Ryan Ledbetter",lastUpdatedAt:1539909317,formattedLastUpdatedAt:"Oct 19, 2018",frontMatter:{id:"debug",title:"debug()"},sidebar:"C++",previous:{title:"send()",permalink:"/sst-website/docs/cpp/link/send"},next:{title:"fatal()",permalink:"/sst-website/docs/cpp/output/fatal"}},s={},c=[{value:"Fully Qualified Name",id:"fully-qualified-name",level:2},{value:"Remarks",id:"remarks",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"See Also",id:"see-also",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"fully-qualified-name"},"Fully Qualified Name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::Output::debug()\n")),(0,l.kt)("h3",{id:"remarks"},"Remarks"),(0,l.kt)("p",null,"Output the debug message with formatting as specified by the format parameter."),(0,l.kt)("p",null,"Output will occur only if specified output_level and output_bits meet criteria defined in the call to the ",(0,l.kt)("a",{parentName:"p",href:"/sst-website/docs/cpp/output/init"},"init function"),". The output will also be prepended with the expanded prefix set in the call to the ",(0,l.kt)("a",{parentName:"p",href:"/sst-website/docs/cpp/output/init"},"init function"),". "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE"),": Debug outputs will occur only if the SST_DEBUG_OUTPUT is defined. It can be set in source code or by setting the \u2013enable-debug option during SST configuration."),(0,l.kt)("h2",{id:"requirements"},"Requirements"),(0,l.kt)("p",null,"Main definition"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/output.h>\n")),(0,l.kt)("p",null,"Also included in the following"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/simulation.h>\n#include <sst/core/component.h>\n")),(0,l.kt)("h2",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"//#1\nvoid SST::Output::debug(uint32_t line, const char* file, const char* func, uint32_t output_level, uint32_t output_bits, const char* format, ... )\n")),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"line")," - Line number of calling function (use CALL_INFO macro)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"file")," - File name calling function (use CALL_INFO macro)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"func")," - Function name calling function (use CALL_INFO macro)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"output_level")," - For output to occur, output_level must be less than or equal to verbose_level set in the call to the ",(0,l.kt)("a",{parentName:"p",href:"/sst-website/docs/cpp/output/init"},"init function"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"output_bits")," - The Output object will output the message only if the set bits of the output_bits parameter are set in the verbose_mask (see the ",(0,l.kt)("a",{parentName:"p",href:"/sst-website/docs/cpp/output/init"},"init function"),"). It uses this logic: if (~verbose_mask & output_bits == 0) then output is enabled."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"format")," - Format string. All valid formats for printf are available."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"...")," - Arguments for format."),(0,l.kt)("h2",{id:"return-value"},"Return Value"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"None")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"example-1"},"Example 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'schedout.debug(CALL_INFO, 1, 0, "Initializing MBSAllocator:");\n')),(0,l.kt)("h3",{id:"example-2"},"Example 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'m_dbg.debug(CALL_INFO,1,2,"netId=%d netMapId=%d netMapSize=%d\\n",\n             netId, netMapId, m_netMapSize );\n')),(0,l.kt)("h3",{id:"example-3"},"Example 3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'schedout.debug(CALL_INFO, 7, 0, "Allocating %s \\n", job -> toString().c_str());\n')),(0,l.kt)("h2",{id:"see-also"},"See Also"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/init"},"init()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/"},"output()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/verbose"},"verbose()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/fatal"},"fatal()"))))}m.isMDXComponent=!0}}]);