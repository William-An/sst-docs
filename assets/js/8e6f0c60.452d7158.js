"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2019],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,y=m["".concat(i,".").concat(d)]||m[d]||u[d]||c;return n?r.createElement(y,l(l({ref:t},s),{},{components:n})):r.createElement(y,l({ref:t},s))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,l=new Array(c);l[0]=d;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a[m]="string"==typeof e?e:o,l[1]=a;for(var p=2;p<c;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5905:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>y,frontMatter:()=>a,metadata:()=>p,toc:()=>m});var r=n(7462),o=n(3366),c=(n(7294),n(3905)),l=["components"],a={title:"getNextClockCycle"},i=void 0,p={unversionedId:"core/component/time/getNextClockCycle",id:"core/component/time/getNextClockCycle",title:"getNextClockCycle",description:"Availability: Component, SubComponent, ComponentExtension",source:"@site/../docs/core/component/time/getNextClockCycle.md",sourceDirName:"core/component/time",slug:"/core/component/time/getNextClockCycle",permalink:"/sst-docs/docs/core/component/time/getNextClockCycle",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/component/time/getNextClockCycle.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"getNextClockCycle"},sidebar:"Core API",previous:{title:"reregisterClock",permalink:"/sst-docs/docs/core/component/time/reregisterClock"},next:{title:"registerTimeBase",permalink:"/sst-docs/docs/core/component/time/registerTimeBase"}},s={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],u={toc:m},d="wrapper";function y(e){var t=e.components,n=(0,o.Z)(e,l);return(0,c.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"Cycle_t getNextClockCycle(TimeConverter* freq);\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Availability:")," Component, SubComponent, ComponentExtension"),(0,c.kt)("p",null,"Return the next cycle count that a clock with the provided frequency would fire. If called prior to the simulation run loop, returns 0. If called after the simulation run loop, returns one cycle past the time that the simulation ended. "),(0,c.kt)("h2",{id:"parameters"},"Parameters"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"freq")," (TimeConverter*) Frequency of the clock"),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"returns")," (Cycle_t) Cycle count that the clock would next be fired at ")),(0,c.kt)("h2",{id:"examples"},"Examples"),(0,c.kt)("h3",{id:"example-1"},"Example 1"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},'\nvoid example::handleEvent(SST::Event* ev) {\n    \n    /** Handle event here */\n\n    output.output("Received event at cycle %" PRIu64 "\\n", getNextClockCycle());\n}\n')),(0,c.kt)("h2",{id:"header"},"Header"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n")))}y.isMDXComponent=!0}}]);