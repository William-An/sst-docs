"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5843],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(r),d=o,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return r?n.createElement(h,a(a({ref:t},u),{},{components:r})):n.createElement(h,a({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},99206:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const i={title:"Community"},a=void 0,s={unversionedId:"community/index",id:"community/index",title:"Community",description:"Many community SST developers maintain additional element libraries and tools. We've collected a list of them here.",source:"@site/../docs/community/index.md",sourceDirName:"community",slug:"/community/",permalink:"/sst-docs/docs/community/",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/community/index.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1696261951,formattedLastUpdatedAt:"Oct 2, 2023",frontMatter:{title:"Community"}},l={},c=[{value:"Element Libraries",id:"element-libraries",level:2},{value:"BE-SST",id:"be-sst-github",level:3},{value:"REV",id:"rev-github",level:3},{value:"SST-STONNE",id:"sst-stonne-github",level:3},{value:"Tools",id:"tools",level:2},{value:"AHP Graphs for SST",id:"ahp-graphs-for-sst",level:3},{value:"sst-containers",id:"sst-containers",level:3},{value:"sst-dbg",id:"sst-dbg",level:3},{value:"sst-viz",id:"sst-viz",level:3},{value:"Contribute",id:"contribute",level:2}],u={toc:c},m="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Many community SST developers maintain additional element libraries and tools. We've collected a list of them here."),(0,o.kt)("h2",{id:"element-libraries"},"Element Libraries"),(0,o.kt)("h3",{id:"be-sst-github"},(0,o.kt)("a",{parentName:"h3",href:"https://github.com/SHREC-DOE-UF/BE-SST",title:"BE-SST Github"},"BE-SST")),(0,o.kt)("p",null,"BE-SST is a coarse-grained parallel discrete-event simulator, developed at the PSAAP II Center for Compressible Multiphase Turbulence at the University of Florida, used for system-level modeling and simulation of existing and notional HPC systems."),(0,o.kt)("h3",{id:"rev-github"},(0,o.kt)("a",{parentName:"h3",href:"https://github.com/tactcomplabs/rev",title:"Rev GitHub"},"REV")),(0,o.kt)("p",null,"The Rev SST component is designed to provide cycle-based simulation capabilities of an arbitrary RISC-V core or cores."),(0,o.kt)("h3",{id:"sst-stonne-github"},(0,o.kt)("a",{parentName:"h3",href:"https://github.com/stonne-simulator/sst-elements-with-stonne",title:"SST-STONNE GitHub"},"SST-STONNE")),(0,o.kt)("p",null,"STONNE is a cycle-level microarchitectural simulator for flexible DNN inference accelerators. STONNE models all the major components required to build  next-generation flexible DNN accelerators like MAERI or SIGMA. All the on-chip components are interconnected by using a three-tier network fabric composed of a Distribution Network(DN), a Multiplier Network (MN), and a Reduce Network(RN), inspired by the taxonomy of on-chip communication flows within DNN accelerators. STONNE has been integrated as a component called sstStonne in SST. sstStonne connects to memHierarchy component to faithfully model the memory hierarchy of the accelerator. The STONNE-MemHierarchy integration allows to run four main operations: CONVOLUTION, GEMM (Dense matrix multiplication), sparse-sparse GEMM operation where the matrices are encoded using a bitmat format, and sparse-dense matrix multiplication (spMM) where the sparse matrix in encoded in CSR format. The simulator is configurable to support different architectural parameters and different memory hiearchy organizations. Basic installation/usage instructions can be found in the additional external elements section of the current SST release documentation."),(0,o.kt)("h2",{id:"tools"},"Tools"),(0,o.kt)("h3",{id:"ahp-graphs-for-sst"},(0,o.kt)("a",{parentName:"h3",href:"https://github.com/lpsmodsimteam/ahp_graph"},"AHP Graphs for SST")),(0,o.kt)("p",null,"Attributed Hierarchical Port Graphs for SST."),(0,o.kt)("h3",{id:"sst-containers"},(0,o.kt)("a",{parentName:"h3",href:"https://github.com/tactcomplabs/sst-containers"},"sst-containers")),(0,o.kt)("p",null,"Build scripts for SST containers."),(0,o.kt)("h3",{id:"sst-dbg"},(0,o.kt)("a",{parentName:"h3",href:"https://github.com/tactcomplabs/sst-dbg"},"sst-dbg")),(0,o.kt)("p",null,"A debug library for SST components."),(0,o.kt)("h3",{id:"sst-viz"},(0,o.kt)("a",{parentName:"h3",href:"https://github.com/tactcomplabs/sst-viz"},"sst-viz")),(0,o.kt)("p",null,"A web-based viz tool."),(0,o.kt)("h2",{id:"contribute"},"Contribute"),(0,o.kt)("p",null,"Have an SST element, tool, or other resource to share? Fork the sst-docs ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sstsimulator/sst-docs"},"repository")," and submit a pull request to add it.\nRequests should:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Include a link to the resource"),(0,o.kt)("li",{parentName:"ul"},"Include a short description"),(0,o.kt)("li",{parentName:"ul"},"Be added to the list in alphabetical order by resource name")))}p.isMDXComponent=!0}}]);