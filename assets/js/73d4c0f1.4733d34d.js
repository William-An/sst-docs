"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[888],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},13942:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={title:"setup"},o=void 0,s={unversionedId:"core/iface/StandardMem/setup",id:"core/iface/StandardMem/setup",title:"setup",description:"See setup() for a description of SST's setup phase and the use of this function. The (Sub)Component that loaded a StandardMem interface should call this function during its own setup() function. A StandardMem interface may implement this function if needed, but it is not required.",source:"@site/../docs/core/iface/StandardMem/setup.md",sourceDirName:"core/iface/StandardMem",slug:"/core/iface/StandardMem/setup",permalink:"/sst-docs/docs/core/iface/StandardMem/setup",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/setup.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"setup"},sidebar:"core",previous:{title:"init",permalink:"/sst-docs/docs/core/iface/StandardMem/init"},next:{title:"complete",permalink:"/sst-docs/docs/core/iface/StandardMem/complete"}},p={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing setup() in StandardMem",id:"example-1-implementing-setup-in-standardmem",level:3},{value:"Example 2: Supporting setup() at an endpoint",id:"example-2-supporting-setup-at-an-endpoint",level:3},{value:"Header",id:"header",level:2}],l={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void setup();\n")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"../../component/lifecycle/setup"},(0,a.kt)("inlineCode",{parentName:"a"},"setup()"))," for a description of SST's setup phase and the use of this function. The (Sub)Component that loaded a StandardMem interface should call this function during its own ",(0,a.kt)("inlineCode",{parentName:"p"},"setup()")," function. A StandardMem interface may implement this function if needed, but it is not required."),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Memory interface")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","This function may be optionally implemented."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Call ",(0,a.kt)("inlineCode",{parentName:"p"},"setup()")," on the interface during the ",(0,a.kt)("inlineCode",{parentName:"p"},"setup()")," phase as SST does not automatically call this function on SubComponents. "),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"returns")," none")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"example-1-implementing-setup-in-standardmem"},"Example 1: Implementing setup() in StandardMem"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"':!0},'void StandardInterface::setup() { \n    /* Report some debug information about the interface setup */\n    debug.debug(_L9_, "%s, INFO: Line size: %" PRIu64 ", Mask: 0x%" PRIx64 "\\n", getName().c_str(), lineSize_, baseAddrMask_);\n    if (noncacheableRegions.empty()) {\n        debug.debug(_L9_, "%s, INFO: No noncacheable regions discovered\\n", getName().c_str());\n    } else {\n        std::ostringstream regstr;\n        regstr << getName() << ", INFO: Discovered noncacheable regions:";\n        for (std::multimap<Addr, MemRegion>::iterator it = noncacheableRegions.begin(); it != noncacheableRegions.end(); it++) {\n            regstr << " [" << it->second.toString() << "]";\n        }\n        debug.debug(_L9_, "%s\\n", regstr.str().c_str());\n    }\n    /* Call setup() on SubComponents */\n    link_->setup();\n}\n')),(0,a.kt)("h3",{id:"example-2-supporting-setup-at-an-endpoint"},"Example 2: Supporting setup() at an endpoint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void Endpoint::setup() \n{\n    mem_iface->setup();\n}\n")),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stdMem.h>\n")))}u.isMDXComponent=!0}}]);