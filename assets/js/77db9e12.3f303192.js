"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8974],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},o=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,k=u["".concat(d,".").concat(m)]||u[m]||c[m]||l;return n?a.createElement(k,i(i({ref:t},o),{},{components:n})):a.createElement(k,i({ref:t},o))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},51188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={title:"FlushResp"},i=void 0,s={unversionedId:"core/iface/StandardMem/req/flushresp",id:"core/iface/StandardMem/req/flushresp",title:"FlushResp",description:"Response Type None  &nbsp;",source:"@site/../docs/core/iface/StandardMem/req/flushresp.md",sourceDirName:"core/iface/StandardMem/req",slug:"/core/iface/StandardMem/req/flushresp",permalink:"/sst-docs/docs/core/iface/StandardMem/req/flushresp",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/req/flushresp.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"FlushResp"},sidebar:"core",previous:{title:"FlushAddr",permalink:"/sst-docs/docs/core/iface/StandardMem/req/flushaddr"},next:{title:"MoveData",permalink:"/sst-docs/docs/core/iface/StandardMem/req/movedata"}},d={},p=[{value:"Member variables",id:"member-variables",level:2},{value:"Member functions",id:"member-functions",level:2},{value:"Defined in <code>Request</code> base class",id:"defined-in-request-base-class",level:3},{value:"Virtual functions inherited from the <code>Request</code> base class",id:"virtual-functions-inherited-from-the-request-base-class",level:3},{value:"makeResponse",id:"makeresponse",level:4},{value:"needsResponse",id:"needsresponse",level:4},{value:"convert",id:"convert",level:4},{value:"handle",id:"handle",level:4},{value:"getString",id:"getstring",level:4},{value:"Header",id:"header",level:2}],o={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Constructor\nSST::Interfaces::StandardMem::FlushResp(id_t id, Addr pAddr, uint64_t size, flags_t flags = 0,\n    Addr vAddr = 0, Addr iPtr = 0, uint32_t tid = 0);\nSST::Interfaces::StandardMem::FlushResp(FlushAddr* fl, flags_t newFlags = 0);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response Type")," None  ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Needs Response")," ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"  ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Corresponding request types")," ",(0,r.kt)("a",{parentName:"p",href:"flushaddr"},"StandardMem::FlushAddr")),(0,r.kt)("p",null,"The StandardMem::FlushResp request class defines a response to a cache flush (",(0,r.kt)("a",{parentName:"p",href:"flushaddr"},"SST::StandardMem::Request::FlushAddr"),"). The ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pAddr"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vAddr"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"size"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tid")," fields are copied from the corresponding Flush request. In some memory system implementations, flushes can fail. As such, a ",(0,r.kt)("inlineCode",{parentName:"p"},"FlushResp")," may have the ",(0,r.kt)("inlineCode",{parentName:"p"},"F_FAIL")," flag set on it and the endpoint would need to handle that case appropriately. In the constructor above, the ",(0,r.kt)("inlineCode",{parentName:"p"},"newFlags")," field is added to the existing set of flags copied from the flush request (flushEv)."),(0,r.kt)("h2",{id:"member-variables"},"Member variables"),(0,r.kt)("p",null,"Including those inherited from the ",(0,r.kt)("inlineCode",{parentName:"p"},"StandardMem::Request")," base class, ",(0,r.kt)("inlineCode",{parentName:"p"},"StandardMem::FlushResp")," includes the following member variables."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"id")," (id_t) A request or response identifier. This id matches that of the corresponding flush request."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"flags")," (flags_t) A 32-bit vector indicating any special flags added to the request"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"pAddr")," (Addr) The physical byte address for the line being flushed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"vAddr")," (Addr) The virtual (if any) address for the line being flushed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"size")," (uint64_t) The number of bytes to flush"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"iPtr")," (Addr) An instruction pointer. This is optional metadata."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"tid")," (uint32_t) An optional thread ID, can be used by memory systems if needed")),(0,r.kt)("h2",{id:"member-functions"},"Member functions"),(0,r.kt)("h3",{id:"defined-in-request-base-class"},"Defined in ",(0,r.kt)("a",{parentName:"h3",href:"class"},(0,r.kt)("inlineCode",{parentName:"a"},"Request"))," base class"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setNoncacheable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetNoncacheable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getNoncacheable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setFail")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetFail")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFail")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setTrace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetTrace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getTrace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setFlag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetFlag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFlag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clearAllFlags")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getAllFlags")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFlagString"))),(0,r.kt)("h3",{id:"virtual-functions-inherited-from-the-request-base-class"},"Virtual functions inherited from the ",(0,r.kt)("a",{parentName:"h3",href:"class"},(0,r.kt)("inlineCode",{parentName:"a"},"Request"))," base class"),(0,r.kt)("h4",{id:"makeresponse"},"makeResponse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Request* makeResponse();\n")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"nullptr"),"."),(0,r.kt)("h4",{id:"needsresponse"},"needsResponse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool needsResponse();\n")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h4",{id:"convert"},"convert"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::Event* convert(RequestConverter* converter);\n")),(0,r.kt)("p",null,"Invokes ",(0,r.kt)("inlineCode",{parentName:"p"},"convert()")," on the supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"converter")," visitor class to return an SST::Event in an implementation-specific format."),(0,r.kt)("h4",{id:"handle"},"handle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void handle(RequestHandler* handler) =0;\n")),(0,r.kt)("p",null,"Invokes ",(0,r.kt)("inlineCode",{parentName:"p"},"handle()")," on the supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," visitor class to handle the event according to type."),(0,r.kt)("h4",{id:"getstring"},"getString"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual std::string getString() =0;\n")),(0,r.kt)("p",null,"Returns a formatted string listing all fields of the FlushResp."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"Example Outputs:\nID: 112, Type: FlushResp, Flags: [F_FAIL] PhysAddr: 0x13158, VirtAddr: 0x13158, Size: 8, InstPtr: 0x10176, ThreadID: 0\nID: 112, Type: FlushResp, Flags: [] PhysAddr: 0x13158, VirtAddr: 0x13158, Size: 8, InstPtr: 0x10176, ThreadID: 0\n")),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stdMem.h>\n")))}c.isMDXComponent=!0}}]);