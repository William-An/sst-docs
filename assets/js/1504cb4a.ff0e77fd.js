"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6133],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},53115:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={title:"setNotifyOnReceive"},o=void 0,l={unversionedId:"core/iface/SimpleNetwork/setNotifyOnReceive",id:"core/iface/SimpleNetwork/setNotifyOnReceive",title:"setNotifyOnReceive",description:"An endpoint uses this function to register a functor of the appropriate form. This functor will be called when a Request is received by the interface. The registered function is a notification only and the endpoint must subsequently call recv() to acquire the received Request.",source:"@site/../docs/core/iface/SimpleNetwork/setNotifyOnReceive.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/setNotifyOnReceive",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/setNotifyOnReceive",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/setNotifyOnReceive.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"setNotifyOnReceive"},sidebar:"core",previous:{title:"sendUntimedData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/sendUntimedData"},next:{title:"setNotifyOnSend",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/setNotifyOnSend"}},c={},s=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Registering a callback handler in a SimpleNetwork interface",id:"example-1-registering-a-callback-handler-in-a-simplenetwork-interface",level:3},{value:"Example 2: Registering a callback handler from an Endpoint",id:"example-2-registering-a-callback-handler-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void setNotifyOnReceive(HandlerBase* functor) = 0;\n")),(0,a.kt)("p",null,"An endpoint uses this function to register a functor of the appropriate ",(0,a.kt)("a",{parentName:"p",href:"handler"},"form"),". This functor will be called when a Request is received by the interface. The registered function is a notification only and the endpoint must subsequently call ",(0,a.kt)("a",{parentName:"p",href:"recv"},(0,a.kt)("inlineCode",{parentName:"a"},"recv()"))," to acquire the received Request."),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Must support registering this functor. If a functor is registered, it must be called when a Request is received at the interface during simulation (i.e., during SST's run loop). During ",(0,a.kt)("inlineCode",{parentName:"p"},"init()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"complete()"),", links are polling only and this functor should not be called."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","May optionally use this function to be notified when requests arrive."),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"functor")," (HandlerBase*) A ",(0,a.kt)("a",{parentName:"li",href:"handler"},"handler functor")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"returns")," none")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"These examples show the registration only, for more information see the ",(0,a.kt)("a",{parentName:"p",href:"handler"},"handler")," documentation."),(0,a.kt)("h3",{id:"example-1-registering-a-callback-handler-in-a-simplenetwork-interface"},"Example 1: Registering a callback handler in a SimpleNetwork interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void NetworkInterfaceImplementation::setNotifyOnReceive(HandlerBase* functor)\n{\n    // receiveFunctor is defined as:\n    // HandlerBase* receiveFunctor;\n    receiveFunctor = functor;\n}\n")),(0,a.kt)("h3",{id:"example-2-registering-a-callback-handler-from-an-endpoint"},"Example 2: Registering a callback handler from an Endpoint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Assuming this is in a class named 'Endpoint' with a HandlerBase function named 'handler'\nnet_iface->setNotifyOnReceive(new SST::Interfaces::SimpleNetwork::Handler<Endpoint>(this, &Endpoint::handler));\n")),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}u.isMDXComponent=!0}}]);