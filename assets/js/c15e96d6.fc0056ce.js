"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7658],{72751:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>a});var r=n(85893),i=n(11151);const s={title:"requestToReceive"},c=void 0,o={id:"core/iface/SimpleNetwork/requestToReceive",title:"requestToReceive",description:"Checks if there is a waiting network request pending in the specified virtual network.",source:"@site/../docs/core/iface/SimpleNetwork/requestToReceive.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/requestToReceive",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/requestToReceive",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/requestToReceive.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"requestToReceive"},sidebar:"core",previous:{title:"recvUntimedData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/recvUntimedData"},next:{title:"send",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/send"}},l={},a=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing requestToReceive in a SimpleNetwork interface",id:"example-1-implementing-requesttoreceive-in-a-simplenetwork-interface",level:3},{value:"Example 2: Calling requestToReceive from an endpoint",id:"example-2-calling-requesttoreceive-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}];function d(e){const t={br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"virtual bool requestToReceive(int vn) = 0;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Checks if there is a waiting network request pending in the specified virtual network."}),"\n",(0,r.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Network interface"})," \xa0",(0,r.jsx)(t.br,{}),"\n","Must return whether a network request is pending in the specified virtual network, ",(0,r.jsx)(t.code,{children:"vn"}),". If this function returns ",(0,r.jsx)(t.code,{children:"true"}),", a subsequent call to ",(0,r.jsx)(t.code,{children:"recv()"})," must return a request."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Endpoint"})," \xa0",(0,r.jsx)(t.br,{}),"\n","Can use this function to determine if a request is waiting."]}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"vn"})," (int) Virtual network to check"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"returns"})," (bool) ",(0,r.jsx)(t.code,{children:"true"})," if a network request is pending in the specified virtual network, ",(0,r.jsx)(t.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.h3,{id:"example-1-implementing-requesttoreceive-in-a-simplenetwork-interface",children:"Example 1: Implementing requestToReceive in a SimpleNetwork interface"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.h"',children:"#include <sst/core/interfaces/simpleNetwork.h>\n\nbool requestToReceive( int vn )\n{\n    /* \n     * When LinkControl receives a request on a link, it puts \n     * the request into the input_queues buffer for the \n     * relevant virtual network\n     */\n    return !input_queues[vn].empty();\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"example-2-calling-requesttoreceive-from-an-endpoint",children:"Example 2: Calling requestToReceive from an endpoint"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"...\nif ( net_iface->requestToReceive(vn) )\n{\n    SST::Interfaces::SimpleNetwork::Request* req = net_iface->recv(vn); // Will not return nullptr since requestToReceive returned true\n    /* Do something with req here */\n    delete req;\n}\n...\n"})}),"\n",(0,r.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/interfaces/simpleNetwork.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>c});var r=n(67294);const i={},s=r.createContext(i);function c(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);