"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4337],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,f=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return a?n.createElement(f,s(s({ref:t},d),{},{components:a})):n.createElement(f,s({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5031:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),s=["components"],i={title:"find"},l=void 0,p={unversionedId:"core/params/find",id:"core/params/find",title:"find",description:"Find a key in the Params object and return the corresponding value as template type T. If desired, the function can also take a default value to be returned if the key is not found, and a boolean variable to set indicating whether the key was found.",source:"@site/../docs/core/params/find.md",sourceDirName:"core/params",slug:"/core/params/find",permalink:"/sst-docs/docs/core/params/find",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/params/find.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1678138197,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{title:"find"},sidebar:"Core API",previous:{title:"operator=",permalink:"/sst-docs/docs/core/params/operatoreq"},next:{title:"find_array",permalink:"/sst-docs/docs/core/params/find_array"}},d={},u=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],c={toc:u},m="wrapper";function f(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'template<class T> // All find functions below are templated on a single parameter, T\n\n/* Find a given key */\nT find(const std::string& key) const;\n\n/* Find a given key, return a default value if not found */\nT find(const std::string& key, T default_value) const;\nT find(const std::string& key, const std::string& default_value) const;\n\n/* Find a given key, also indicate if found */\nT find(const std::string& key, bool& found) const;\n\n/* Find a given key, return a default value if not found, also indicate if found */\nT find(const std::string& key, T default_value, bool& found) const;\nT find(const std::string& key, const std::string& default_value, bool& found) const;\n\n/* Special case for find<bool> to enable conversion of "T"/"F" to bool */\nT find(const std::string& key, const char* default_value) const;\nT find(const std::string& key, const char* default_value, bool& found) const;\n')),(0,o.kt)("p",null,"Find a key in the Params object and return the corresponding value as template type ",(0,o.kt)("inlineCode",{parentName:"p"},"T"),". If desired, the function can also take a default value to be returned if the key is not found, and a boolean variable to set indicating whether the key was found."),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"key")," (std::string) The key to find"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"default_value")," (T, std::string, char*) A value to return if the key is not found in the Params object"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"found")," (bool) A variable that will be set to True if the key is found or False otherwise"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"returns")," (T) The value matching the key, or the default_value if provided and the key is not found")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"example-1"},"Example 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'/* \n * Excerpt from: sst-elements/src/sst/elements/simpleElementExample/basicParams.cc \n * This Component has several parameters which are uncreatively named by their type \n * (e.g., "bool_param" is a bool)\n */\nbasicParams::basicParams(ComponentId_t id, Params& params) : Component(id)\n{\n    out = new Output("", 1, 0, Output::STDOUT);\n\n    bool param0 = params.find<bool>("bool_param", false);\n    uint32_t param1 = params.find<uint32_t>("uint32_param", 400);\n    double param2 = params.find<double>("double_param", 12.5);\n    std:;string param3 = params.find>std::string>("string_param", "hello");\n\n    out->output("Found basic parameters: bool_param = %d, uint32_param = %" PRIu32 ", double_param = %f, string_param = %s\\n",\n            param0, param1, param2, param3.c_str());\n\n    // Discover whether a parameter was passed in from the input file or not\n    bool found;\n    int param4 = params.find<int>("int_param", 0, found);\n\n    if (!found) {\n        out->fatal(CALL_INFO, -1, "Uh oh, in \'%s\', int_param is a required parameter, but it wasn\'t found in the parameter set.\\n",\n                getName().c_str());\n    } else {\n        out->output("Found the required parameter \'int_param\' and got %d\\n", param4);\n    }\n\n    /* More complex types that have constructors which take strings\n     * - UnitAlgebra is a class provided by SST\n     * - ExampleType is a made up class for this example, see basicParams.h\n     */ \n    UnitAlgebra param5 = params.find<UnitAlgebra>("ua_param", "2TB/s");\n    ExampleType param6 = params.find<ExampleType>("example_param", "key:5");\n\n    out->output("Read ua_param = %s\\n", param5.toStringBestSI().c_str());\n    out->output("Read example_param. key = %s, value = %d\\n", param6.key.c_str(), param6.value);\n}\n')),(0,o.kt)("h2",{id:"header"},"Header"),(0,o.kt)("p",null,"The Params header file is included with any SST object that supports Params."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h> // or\n#include <sst/core/params.h> // if not included in base class\n")))}f.isMDXComponent=!0}}]);