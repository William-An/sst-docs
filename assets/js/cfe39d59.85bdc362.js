"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6003],{35013:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=n(85893),o=n(11151);const s={title:"Compilation Tricks"},r=void 0,a={id:"guides/tips/compilation",title:"Compilation Tricks",description:"Avoid unneccessary recompilation",source:"@site/../docs/guides/tips/compilation.md",sourceDirName:"guides/tips",slug:"/guides/tips/compilation",permalink:"/sst-docs/docs/guides/tips/compilation",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/guides/tips/compilation.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"Compilation Tricks"},sidebar:"guides",previous:{title:"Tips and Tricks",permalink:"/sst-docs/docs/category/tips-and-tricks"},next:{title:"Development",permalink:"/sst-docs/docs/category/development"}},l={},c=[{value:"Avoid unneccessary recompilation",id:"avoid-unneccessary-recompilation",level:2},{value:"Ignore particular SST Elements",id:"ignore-particular-sst-elements",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"avoid-unneccessary-recompilation",children:"Avoid unneccessary recompilation"}),"\n",(0,i.jsxs)(t.p,{children:["To avoid a majority of redundant recompilation when developing SST Core and Elements, you can have the ",(0,i.jsx)(t.code,{children:"install"})," utility preserve timestamps of installed files. To do this, override the ",(0,i.jsx)(t.code,{children:"INSTALL"})," variable when configuring SST, prior to running ",(0,i.jsx)(t.code,{children:"make"}),". This will allow ",(0,i.jsx)(t.code,{children:"make"})," and friends to continue to work properly while reducing the amount of recompilation. Appending the ",(0,i.jsx)(t.code,{children:"INSTALL"})," flag to your configure scipt invocation will set it appropriately."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:'$ ../configure --prefix=$HOME/install <other configure flags> INSTALL="/usr/bin/install -p"\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You may need to adjust the path to reflect the location of your ",(0,i.jsx)(t.code,{children:"install"})," binary.\nOnce this is done, you should no longer need to perform unnecessary recompilations.\nPlease note that you must adjust your configuration for Core, Elements, and any other SST libraries."]}),"\n",(0,i.jsx)(t.h2,{id:"ignore-particular-sst-elements",children:"Ignore particular SST Elements"}),"\n",(0,i.jsxs)(t.p,{children:["To avoid compiling SST Elements that are not of interest, put a ",(0,i.jsx)(t.code,{children:".ignore"})," file in the element directory and run ",(0,i.jsx)(t.code,{children:"./autogen.sh"})," followed by configure and make. Note that this may cause some tests to fail if one element has a testing dependency on another that is not built. Additionally, placing a .unignore file in the same directory will override a .ignore file."]}),"\n",(0,i.jsx)(t.p,{children:"For example, to ignore the Ariel library:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"$ cd sst-elements\n$ touch src/sst/elements/ariel/.ignore\n$ ./autogen.sh\n$ ./configure <configure flags>\n$ make all install\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var i=n(67294);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);