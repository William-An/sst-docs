"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2233],{13302:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var r=n(74848),o=n(28453);const s={title:"operator!="},a=void 0,c={id:"core/unitalgebra/compneq",title:"operator!=",description:"Compare if this object is not equal to the argument v.",source:"@site/../docs/core/unitalgebra/compneq.md",sourceDirName:"core/unitalgebra",slug:"/core/unitalgebra/compneq",permalink:"/sst-docs/docs/core/unitalgebra/compneq",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/unitalgebra/compneq.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:168452215e4,frontMatter:{title:"operator!="},sidebar:"core",previous:{title:"operator==",permalink:"/sst-docs/docs/core/unitalgebra/compeq"},next:{title:"operator>",permalink:"/sst-docs/docs/core/unitalgebra/compgt"}},i={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"bool operator!=(const UnitAlgebra& v) const;\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Compare if this object is not equal to the argument ",(0,r.jsx)(t.code,{children:"v"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"v"})," (UnitAlgebra) Object to compare to"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"returns"})," (bool) Whether this object is not equal to the argument."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:'SST::UnitAlgebra* num0 = new UnitAlgebra("2bps");\nSST::UnitAlgebra* num1 = new UnitAlgebra("2b");\n\nsst_assert(num0 != num1, CALL_INFO, -1, "Error: These are not the same value, their units are different!!");\n'})}),"\n",(0,r.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/unitalgebra.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var r=n(96540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);