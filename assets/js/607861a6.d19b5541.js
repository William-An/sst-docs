"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5503],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>v});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(t),u=r,v=p["".concat(d,".").concat(u)]||p[u]||m[u]||l;return t?a.createElement(v,i(i({ref:n},c),{},{components:t})):a.createElement(v,i({ref:n},c))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=u;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5041:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const l={title:"send"},i=void 0,o={unversionedId:"core/link/send",id:"core/link/send",title:"send",description:"Send an event over the link, optionally, with additional latency added to the mimimum latency the link was configured with as well as any other latency added to the link.",source:"@site/../docs/core/link/send.md",sourceDirName:"core/link",slug:"/core/link/send",permalink:"/sst-docs/docs/core/link/send",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/link/send.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"send"},sidebar:"core",previous:{title:"SST::Link",permalink:"/sst-docs/docs/core/link/class"},next:{title:"recv",permalink:"/sst-docs/docs/core/link/recv"}},d={},s=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Using a TimeConverter to add additional latency when sending an event",id:"example-1-using-a-timeconverter-to-add-additional-latency-when-sending-an-event",level:3},{value:"Example 2: Using a Link&#39;s default TimeConverter to add additional latency when sending an event",id:"example-2-using-a-links-default-timeconverter-to-add-additional-latency-when-sending-an-event",level:3},{value:"Example 3: Send an event without additional delay",id:"example-3-send-an-event-without-additional-delay",level:3},{value:"Header",id:"header",level:2}],c={toc:s},p="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void send(SimTime_t delay, TimeConverter* tc, Event* event);\nvoid send(SimTime_t delay, Event* event);\nvoid send(Event* event);\n")),(0,r.kt)("p",null,"Send an event over the link, optionally, with additional latency added to the mimimum latency the link was configured with as well as any other latency added to the link."),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"delay")," (SimTime_t) Additional latency to add, specified as a cycle count"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"tc")," (TimeConverter*) Units of delay. If not specified, the units will be the link's default time base."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"event")," (Event*) The event to send."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"returns")," none")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"example-1-using-a-timeconverter-to-add-additional-latency-when-sending-an-event"},"Example 1: Using a TimeConverter to add additional latency when sending an event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'/* From constructor: nanoTimeConverter = getTimeConverter("1ns"); */\n\nEmberEvent* nextEv = evQueue.front();\nevQueue.pop();\n\n// issue the next event to the engine for deliver later, add nanoDelay * nanoTimeConverter latency\n// Latency: link latency (from input) + (nanoDelay * nanoTimeConverter)\nselfEventLink->send(nanoDelay, nanoTimeConverter, nextEv);\n')),(0,r.kt)("h3",{id:"example-2-using-a-links-default-timeconverter-to-add-additional-latency-when-sending-an-event"},"Example 2: Using a Link's default TimeConverter to add additional latency when sending an event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Latency: default link latency from input file + (1 * link's default TimeConverter)\nport_link->send(1,ev);\n")),(0,r.kt)("h3",{id:"example-3-send-an-event-without-additional-delay"},"Example 3: Send an event without additional delay"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Latency: default link latency from input file\nvoid MemLink::send(MemEventBase *ev) \n{\n    link->send(ev);\n}\n")),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/link.h>\n")))}m.isMDXComponent=!0}}]);