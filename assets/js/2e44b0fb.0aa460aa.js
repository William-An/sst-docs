"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9046],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),o=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=o(n),c=a,v=m["".concat(p,".").concat(c)]||m[c]||u[c]||l;return n?r.createElement(v,i(i({ref:t},s),{},{components:n})):r.createElement(v,i({ref:t},s))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var o=2;o<l;o++)i[o]=n[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>c,frontMatter:()=>d,metadata:()=>o,toc:()=>u});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],d={id:"send",title:"send()"},p=void 0,o={unversionedId:"cpp/link/send",id:"cpp/link/send",title:"send()",description:"Fully Qualified Name",source:"@site/../docs/cpp/link/send.md",sourceDirName:"cpp/link",slug:"/cpp/link/send",permalink:"/sst-website/docs/cpp/link/send",draft:!1,editUrl:"https://github.com/sstsimulator/sst-website/edit/master/docs/../docs/cpp/link/send.md",tags:[],version:"current",lastUpdatedBy:"Ryan Ledbetter",lastUpdatedAt:1539909317,formattedLastUpdatedAt:"Oct 19, 2018",frontMatter:{id:"send",title:"send()"},sidebar:"C++",previous:{title:"configureSelfLink()",permalink:"/sst-website/docs/cpp/link/configureSelfLink"},next:{title:"debug()",permalink:"/sst-website/docs/cpp/output/debug"}},s={},u=[{value:"Fully Qualified Name",id:"fully-qualified-name",level:2},{value:"Remarks",id:"remarks",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"Example 4",id:"example-4",level:3},{value:"Example 5",id:"example-5",level:3},{value:"See Also",id:"see-also",level:2}],m={toc:u};function c(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"fully-qualified-name"},"Fully Qualified Name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::Link::send(SimTime_t delay, TimeConverter* tc, Event* event)\n")),(0,l.kt)("h3",{id:"remarks"},"Remarks"),(0,l.kt)("p",null,"Send an event over the link with an optional additional delay."),(0,l.kt)("h2",{id:"requirements"},"Requirements"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/link.h>\n")),(0,l.kt)("h2",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// #1 - with the Link's default delay + an additional delay using the specified TimeConverter\nvoid SST::Link::send(SimTime_t delay, TimeConverter* tc, Event* event)\n\n// #2 - with the Link's default delay + an additional delay using the default TimeConverter for the Link\nvoid SST::Link::send(SimTime_t delay, Event* event)\n\n// #3 - with the Link's default delay\nvoid SST::Link::send(Event* event)\n")),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"delay")," - Additional delay."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"tc")," - Time converter to specify units for the additional delay."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"event")," - The Event to send."),(0,l.kt)("h2",{id:"return-value"},"Return Value"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"None")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"example-1"},"Example 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'// #1 - with the Link\'s default delay + an additional delay using the specified TimeConverter\nSST::TimeConverter* nanoTimeConverter = Simulation::getSimulation()->getTimeLord()->getTimeConverter("1ns");\nEmberEvent* nextEv = evQueue.front();\nevQueue.pop();\n\n// issue the next event to the engine for deliver later\nselfEventLink->send(nanoDelay, nanoTimeConverter, nextEv);\n')),(0,l.kt)("h3",{id:"example-2"},"Example 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// #2 - with the Link's default delay + an additional delay using the default TimeConverter for the Link\nport_link->send(1,ev);\n")),(0,l.kt)("h3",{id:"example-3"},"Example 3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// #2 - with the Link's default delay + an additional delay using the default TimeConverter for the Link\nvoid free( SimVAddr addr, std::function<void(uint64_t)> fini ) {\n        Entry* entry = new Entry( fini );\n\n        MemoryHeapEvent* event = new MemoryHeapEvent;\n        event->key = (MemoryHeapEvent::Key) entry;\n        event->type = MemoryHeapEvent::Free;\n        event->addr = addr;\n\n        m_link->send(0, event );        \n}\n\n")),(0,l.kt)("h3",{id:"example-4"},"Example 4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// #3 - with the Link's default delay\nint rndNumber;\nrndNumber = (int)(rng->generateNextInt32());\nrndNumber = (rndNumber & 0x0000FFFF) ^ ((rndNumber & 0xFFFF0000) >> 16);\nrndNumber = abs((int)(rndNumber % 3));\n\nport->send(new StringEvent(std::to_string(rndNumber)));\n")),(0,l.kt)("h3",{id:"example-5"},"Example 5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// #3 - with the Link's default delay\nEVENT* ev=makeEvent<EVENT>(this->out,_trans,this,!this->no_payload);\nthis->sst_link->send(ev);\n")),(0,l.kt)("h2",{id:"see-also"},"See Also"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/component/configureLink"},"configureLink()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/component/configureSelfLink"},"configureSelfLink()"))))}c.isMDXComponent=!0}}]);