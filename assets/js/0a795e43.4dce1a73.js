"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5172],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(7294);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var i=r.createContext({}),s=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,c=e.mdxType,o=e.originalType,i=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=s(t),k=c,h=u["".concat(i,".").concat(k)]||u[k]||p[k]||o;return t?r.createElement(h,l(l({ref:n},d),{},{components:t})):r.createElement(h,l({ref:n},d))}));function h(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var o=t.length,l=new Array(o);l[0]=k;var a={};for(var i in n)hasOwnProperty.call(n,i)&&(a[i]=n[i]);a.originalType=e,a[u]="string"==typeof e?e:c,l[1]=a;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},5564:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=t(7462),c=t(3366),o=(t(7294),t(3905)),l=["components"],a={id:"clock_handler",title:"Clock Handlers"},i=void 0,s={unversionedId:"core/clock/clock_handler",id:"core/clock/clock_handler",title:"Clock Handlers",description:"Clock handlers must follow the function definitions above. When the SSTCore invokes a handler, it passes in the current cycle count, and optionally, an additional argument provided by the user. The handler function should return a boolean value indicating whether the clock should be disabled (true) or stay enabled (false). Disabling a clock function through the handler is more efficient than using unregisterClock().",source:"@site/../docs/core/clock/clock_handler.md",sourceDirName:"core/clock",slug:"/core/clock/clock_handler",permalink:"/docs/docs/core/clock/clock_handler",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/clock/clock_handler.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{id:"clock_handler",title:"Clock Handlers"},sidebar:"Core API",previous:{title:"Clock",permalink:"/docs/docs/core/clock/class"},next:{title:"Introduction",permalink:"/docs/docs/core/component/introduction"}},d={},u=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],p={toc:u},k="wrapper";function h(e){var n=e.components,t=(0,c.Z)(e,l);return(0,o.kt)(k,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"bool handler( Cycle t cycle );\nbool handler( Cycle_t cycle, dataT data);\n")),(0,o.kt)("p",null,"Clock handlers must follow the function definitions above. When the SSTCore invokes a handler, it passes in the current cycle count, and optionally, an additional argument provided by the user. The handler function should return a boolean value indicating whether the clock should be disabled (true) or stay enabled (false). Disabling a clock function through the handler is more efficient than using ",(0,o.kt)("a",{parentName:"p",href:"../component/time/unregisterClock"},(0,o.kt)("inlineCode",{parentName:"a"},"unregisterClock()")),"."),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"cycle")," (Cycle_t) Current clock cycle count"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"data")," (dataT) Optional, arbitrary data that the handler is created with"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"returns")," (bool) Whether the clock should be disabled (true) or not (false)")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"example-1"},"Example 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/* simpleElementExample/basicClocks.h */\nclass basicClocks : public SST::Component\n{\npublic:\n    /* ELI and un-related functins omitted for brevity */\n    basicClocks(SST::ComponentId_t id, SST::Params& params);\nprivate:\n    //Handler function for one clock\n    bool mainTick(SST::Cycle_t cycle);\n\n    //Handler function for another clock\n    bool otherTick(SST::Cycle_t cycle, uint32_t id);\n\n    // Clock handler handle\n    Clock::HandlerBase* clock2Handler;\n};\n\n/* simpleElementExample/basicClocks.cc */\nbasicClocks::basicClocks(ComponentId_t id, Params& params) : Component(id)\n{\n    /* Code to read parameters for the clock frequencies clock0Freq, clock1Freq, clock2Freq */\n\n    // Register a clock at clock0Freq to call back the 'mainTick' function\n    registerClock(clock0Freq, new Clock::Handler<basicClocks>(this, &basicClocks::mainTick));\n\n    // Register a clock at clock1Freq to call back the 'otherTick' function. \n    // THe handler also has a uint32_t (our arbitrary data) and this handler will pass a '1' in that field\n    clock1converter = registerClock(clock1Freq,\n        new Clock::Handler<basicClocks, uint32_t>(this, &basicClocks::otherTick, 1));\n\n    // Register a clock at clock2Freq to also call back the 'otherTick' function. This will pass a '2' to the \n    // handler so we can differentiate when clock1 calls the handler vs. clock2\n    Clock::HandlerBase* handler = new Clock::Handler<basicClocks, uint32_t>(tis, &basicClocks::otherTick, 2);\n    clock2converter = registerClock(clock2Freq, handler);\n\n    // How many cycles we'll run the simulation\n    cycleCount = 100;\n}\n\nbool basicClocks::mainTick( Cycle_t cycle )\n{\n    // Do something when the clock is called\n    cycleCount--;\n\n    if (cycleCount == 0) {\n        // Let simulation end, unregister this clock since we have nothing else to do\n        primaryComponentOKTOEndSim();\n        return true;\n    } else {\n        // Keep the clock registered\n        return false;\n    }\n}\n\nbool basicClocks::otherTick ( Cycle_t cycle, uint32_t id )\n{\n    // Do something when the clock is called, maybe do something different if id=1 vs id=2\n    if (cycle == 10)\n        return true; // Stop calling this handler after 10 cycles\n    else\n        return false;\n}\n")),(0,o.kt)("h2",{id:"header"},"Header"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n")))}h.isMDXComponent=!0}}]);