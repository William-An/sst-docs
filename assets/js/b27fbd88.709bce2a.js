"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},69017:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={title:"complete"},i=void 0,l={unversionedId:"core/iface/SimpleNetwork/complete",id:"core/iface/SimpleNetwork/complete",title:"complete",description:"This function is called during SST's complete() phase. The (Sub)Component loading the interface should call this function on the interface during its own complete() function as SST does not automatically call it on SubComponents. See complete() for more information. A SubComponent implementing the SimpleNetwork interface should facilitate sending endpoint's events during complete(), even if it does not itself use the phase.",source:"@site/../docs/core/iface/SimpleNetwork/complete.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/complete",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/complete",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/complete.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1695940750,formattedLastUpdatedAt:"Sep 28, 2023",frontMatter:{title:"complete"},sidebar:"core",previous:{title:"setup",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/setup"},next:{title:"finish",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/finish"}},p={},s=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing complete() in a SimpleNetwork",id:"example-1-implementing-complete-in-a-simplenetwork",level:3},{value:"Example 2: Supporting complete() at an endpoint",id:"example-2-supporting-complete-at-an-endpoint",level:3},{value:"Header",id:"header",level:2}],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void complete(unsigned int phase);\n")),(0,o.kt)("p",null,"This function is called during SST's ",(0,o.kt)("inlineCode",{parentName:"p"},"complete()")," phase. The (Sub)Component loading the interface should call this function on the interface during its own ",(0,o.kt)("inlineCode",{parentName:"p"},"complete()")," function as SST does not automatically call it on SubComponents. See ",(0,o.kt)("a",{parentName:"p",href:"../../component/lifecycle/complete"},(0,o.kt)("inlineCode",{parentName:"a"},"complete()"))," for more information. A SubComponent implementing the SimpleNetwork interface should facilitate sending endpoint's events during ",(0,o.kt)("inlineCode",{parentName:"p"},"complete()"),", even if it does not itself use the phase."),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,o.kt)("br",{parentName:"p"}),"\n","Facilitate sending untimed requests sent by endpoints through the network"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,o.kt)("br",{parentName:"p"}),"\n","Call ",(0,o.kt)("inlineCode",{parentName:"p"},"complete()")," on the interface during each round of the ",(0,o.kt)("inlineCode",{parentName:"p"},"complete()")," phase as SST does not automatically call this function on SubComponents. "),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"phase")," (unsigned) The phase or round number (i.e., number of times complete() has been called on all components)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"returns")," none")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"example-1-implementing-complete-in-a-simplenetwork"},"Example 1: Implementing complete() in a SimpleNetwork"),(0,o.kt)("p",null,"The Merlin network continues to pass events on network links as needed during ",(0,o.kt)("inlineCode",{parentName:"p"},"complete()"),". Network libraries should do this to ensure that endpoints can send events to each other during ",(0,o.kt)("inlineCode",{parentName:"p"},"complete()")," if required."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"':!0},"void LinkControl::complete(unsigned int phase)\n{\n    // Pass any packets sent during complete to the parent\n    Event* ev;\n    RtrInitEvent* init_ev;\n\n    while ( (ev = rtr_link->recvUntimedData() ) != nullptr ) {\n        BaseRtrEvent* bev = static_cast<BaseRtrEvent*>(ev);\n        switch (bev->getType()) {\n            case BaseRtrEvent::PACKET:\n            init_events.push_back(static_cast<RtrEvent*>(ev)); // Save the event to be delivered when the parent calls 'recvUntimedData'\n            break;\n        default:\n            /* should not happen */\n            merlin_abort_full.fatal(CALL_INFO, 1, \"Reached state where a non-RtrEvent was not handled.\");\n            break;\n        }\n    }\n}\n")),(0,o.kt)("h3",{id:"example-2-supporting-complete-at-an-endpoint"},"Example 2: Supporting complete() at an endpoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void Endpoint::complete(unsigned int phase)\n{\n    net_iface->complete(phase); // Must call complete() on the SimpleNetwork interface\n}\n")),(0,o.kt)("h2",{id:"header"},"Header"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}u.isMDXComponent=!0}}]);