"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3623],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(r),v=a,m=d["".concat(c,".").concat(v)]||d[v]||p[v]||o;return r?n.createElement(m,i(i({ref:t},l),{},{components:r})):n.createElement(m,i({ref:t},l))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=v;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}v.displayName="MDXCreateElement"},41392:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const o={title:"RequestConverter"},i=void 0,s={unversionedId:"core/iface/StandardMem/reqconverter",id:"core/iface/StandardMem/reqconverter",title:"RequestConverter",description:"The StandardMem::Links. StandardMem implementations should derive from RequestConverter to define a conversion function for each built-in StandardMem request type. Upon receiving a request the StandardMem implementation can use the derived RequestoConverter class to convert StandardMem requests by type.",source:"@site/../docs/core/iface/StandardMem/reqconverter.md",sourceDirName:"core/iface/StandardMem",slug:"/core/iface/StandardMem/reqconverter",permalink:"/sst-docs/docs/core/iface/StandardMem/reqconverter",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/reqconverter.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"RequestConverter"},sidebar:"core",previous:{title:"CustomData",permalink:"/sst-docs/docs/core/iface/StandardMem/req/customdata"},next:{title:"RequestHandler",permalink:"/sst-docs/docs/core/iface/StandardMem/reqhandler"}},c={},u=[{value:"Constructor",id:"constructor",level:2},{value:"Required function implementations",id:"required-function-implementations",level:2},{value:"Header",id:"header",level:2}],l={toc:u},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The StandardMem::RequestConverter class is a pure virtual visitor class that allows StandardMem implementations to convert an incoming StandardMem::Request type to an SST::Event type that can be passed over SST::Links. StandardMem implementations should derive from RequestConverter to define a conversion function for each built-in StandardMem request type. Upon receiving a request the StandardMem implementation can use the derived RequestoConverter class to convert StandardMem requests by type. "),(0,a.kt)("p",null,"If a memory system implementation does not support a particular request type, it may call (",(0,a.kt)("a",{parentName:"p",href:"../../component/output/fatal"},"SubComponent::fatal"),") in the corresponding conversion function or otherwise indicate an error. "),(0,a.kt)("h2",{id:"constructor"},"Constructor"),(0,a.kt)("p",null,"The RequestConverter provides an empty constructor and destructor. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"RequestConverter() {}\nvirtual ~RequestConverter() {}\n")),(0,a.kt)("h2",{id:"required-function-implementations"},"Required function implementations"),(0,a.kt)("p",null,"The following functions are pure virtual within the RequestConverter class and must be implemented. The implementation should either convert the incoming request into an appropriate SST::Event type, or return an error indicating that the request type is not supported by the StandardMem implementation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual SST::Event* convert(Read* request) = 0;\nvirtual SST::Event* convert(ReadResp* request) = 0;\nvirtual SST::Event* convert(Write* request) = 0;\nvirtual SST::Event* convert(WriteResp* request) = 0;\nvirtual SST::Event* convert(FlushAddr* request) = 0;\nvirtual SST::Event* convert(FlushResp* request) = 0;\nvirtual SST::Event* convert(ReadLock* request) = 0;\nvirtual SST::Event* convert(WriteUnlock* request) = 0;\nvirtual SST::Event* convert(LoadLink* request) = 0;\nvirtual SST::Event* convert(StoreConditional* request) = 0;\nvirtual SST::Event* convert(MoveData* request) = 0;\nvirtual SST::Event* convert(CustomReq* request) = 0;\nvirtual SST::Event* convert(CustomResp* request) = 0;\nvirtual SST::Event* convert(InvNotify* request) = 0;\n")),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stdMem.h>\n")))}p.isMDXComponent=!0}}]);