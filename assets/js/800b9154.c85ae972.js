"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3756],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,f=m["".concat(c,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1949:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={title:"recvUntimedData"},o=void 0,l={unversionedId:"core/iface/SimpleNetwork/recvUntimedData",id:"core/iface/SimpleNetwork/recvUntimedData",title:"recvUntimedData",description:"This function should be used to check for received requests on a network during SST's untimed phases, init() and complete. This is not a pure virtual function, however, implementing it is recommended per the note below. See SST::recvUntimedData for additional detail on the use of this function.",source:"@site/../docs/core/iface/SimpleNetwork/recvUntimedData.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/recvUntimedData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/recvUntimedData",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/recvUntimedData.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"recvUntimedData"},sidebar:"core",previous:{title:"recvInitData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/recvInitData"},next:{title:"requestToReceive",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/requestToReceive"}},c={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing recvUntimedData() in a SimpleNetwork interface",id:"example-1-implementing-recvuntimeddata-in-a-simplenetwork-interface",level:3},{value:"Example 2: Using recvUntimedData() from an endpoint",id:"example-2-using-recvuntimeddata-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}],s={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual Request* recvUntimedData();\n")),(0,a.kt)("p",null,"This function should be used to check for received requests on a network during SST's untimed phases, ",(0,a.kt)("inlineCode",{parentName:"p"},"init()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"complete"),". This is not a pure virtual function, however, implementing it is recommended per the note below. See ",(0,a.kt)("a",{parentName:"p",href:"../../link/recvUntimedData"},"SST::Link::recvUntimedData")," for additional detail on the use of this function."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"recvInitData")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"recvUntimedData")," functions are identical. The latter was added when SST added the ",(0,a.kt)("inlineCode",{parentName:"p"},"complete()")," phase to indicate that it could be used during ",(0,a.kt)("em",{parentName:"p"},"any")," untimed phase, not just ",(0,a.kt)("inlineCode",{parentName:"p"},"init()"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"recvInitData")," is deprecated as of SST 13, and ",(0,a.kt)("inlineCode",{parentName:"p"},"recvUntimedData")," will become required (pure virtual) in SST 14.")),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Must support receiving events via this function during SST's ",(0,a.kt)("inlineCode",{parentName:"p"},"init()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"complete()")," phases. "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","May optionally use this function during ",(0,a.kt)("inlineCode",{parentName:"p"},"init()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"complete()")," to receive events sent over the network."),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"returns")," (Request*) A request if one was received, otherwise nullptr. The caller is responsible for deleting any Request returned.")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"example-1-implementing-recvuntimeddata-in-a-simplenetwork-interface"},"Example 1: Implementing recvUntimedData() in a SimpleNetwork interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"':!0},"SST::Interfaces::SimpleNetwork::Request* LinkControl::recvUntimedData()\n{\n    if ( init_events.size() ) {\n        RtrEvent *ev = init_events.front();\n        init_events.pop_front();\n        SST::Interfaces::SimpleNetwork::Request* ret = ev->takeRequest();\n        delete ev;\n        return ret;\n    } else {\n        return nullptr;\n    }\n}\n")),(0,a.kt)("h3",{id:"example-2-using-recvuntimeddata-from-an-endpoint"},"Example 2: Using recvUntimedData() from an endpoint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void Endpoint::init(unsigned int phase)\n{\n    net_iface->init(phase);\n    \n    if (net_iface->isNetworkInitialized())\n    {\n        while ( (SST::Interfaces::SimpleNetworkRequest* req = net_iface->recvUntimedData()) ) \n        {\n            /* Handle req here */\n            delete req;\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}d.isMDXComponent=!0}}]);