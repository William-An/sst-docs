"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7693],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>d});var o=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function m(n,e){if(null==n)return{};var t,o,a=function(n,e){if(null==n)return{};var t,o,a={},r=Object.keys(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var i=o.createContext({}),c=function(n){var e=o.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},p=function(n){var e=c(n.components);return o.createElement(i.Provider,{value:e},n.children)},u="mdxType",l={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},b=o.forwardRef((function(n,e){var t=n.components,a=n.mdxType,r=n.originalType,i=n.parentName,p=m(n,["components","mdxType","originalType","parentName"]),u=c(t),b=a,d=u["".concat(i,".").concat(b)]||u[b]||l[b]||r;return t?o.createElement(d,s(s({ref:e},p),{},{components:t})):o.createElement(d,s({ref:e},p))}));function d(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=t.length,s=new Array(r);s[0]=b;var m={};for(var i in e)hasOwnProperty.call(e,i)&&(m[i]=e[i]);m.originalType=n,m[u]="string"==typeof n?n:a,s[1]=m;for(var c=2;c<r;c++)s[c]=t[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}b.displayName="MDXCreateElement"},8915:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>m,metadata:()=>c,toc:()=>u});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),s=["components"],m={title:"SST::SubComponent"},i=void 0,c={unversionedId:"core/component/subcomponent/class",id:"core/component/subcomponent/class",title:"SST::SubComponent",description:"A SubComponent is a modular piece of functionality that can be dynamically loaded into a Component or another SubComponent. SubComponents can be declared in the SST configuration input file (i.e., a user subcomponent) or can be loaded directly by a (sub)component such that the user may not have control over which component is loaded (i.e., an anonymous subcomponent). A parent (sub)Component interacts directly with its loaded subcomponent via function calls. SubComponents and their parents are always co-located when SST is running in parallel.",source:"@site/../docs/core/component/subcomponent/class.md",sourceDirName:"core/component/subcomponent",slug:"/core/component/subcomponent/class",permalink:"/docs/docs/core/component/subcomponent/class",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/component/subcomponent/class.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"SST::SubComponent"},sidebar:"Core API",previous:{title:"primaryComponentOKToEndSim",permalink:"/docs/docs/core/component/component/primaryComponentOKToEndSim"},next:{title:"SubComponent constructor",permalink:"/docs/docs/core/component/subcomponent/constructor"}},p={},u=[{value:"User versus Anonymous SubComponents",id:"user-versus-anonymous-subcomponents",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}],l={toc:u},b="wrapper";function d(n){var e=n.components,t=(0,a.Z)(n,s);return(0,r.kt)(b,(0,o.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A SubComponent is a modular piece of functionality that can be dynamically loaded into a Component or another SubComponent. SubComponents can be declared in the SST configuration input file (i.e., a ",(0,r.kt)("em",{parentName:"p"},"user")," subcomponent) or can be loaded directly by a (sub)component such that the user may not have control over which component is loaded (i.e., an ",(0,r.kt)("em",{parentName:"p"},"anonymous")," subcomponent). A parent (sub)Component interacts directly with its loaded subcomponent via function calls. SubComponents and their parents are always co-located when SST is running in parallel. "),(0,r.kt)("p",null,"SubComponents must inherit from a SubComponent API which must in turn inherit from the SST::SubComponent class. This allows SST to load any SubComponent that inherits from a given API into a slot designed for that API. "),(0,r.kt)("h2",{id:"user-versus-anonymous-subcomponents"},"User versus Anonymous SubComponents"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"User"),(0,r.kt)("th",{parentName:"tr",align:null},"Anonymous"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Defined in the simulation input file"),(0,r.kt)("td",{parentName:"tr",align:null},"Defined by the (sub)component that loads it")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Parameters come from simulation input"),(0,r.kt)("td",{parentName:"tr",align:null},"Parameters come from parent (sub)component")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Can have links"),(0,r.kt)("td",{parentName:"tr",align:null},"Can only use its parent's links")))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'/* Source: simpleElementExample/basicSubComponent_subcomponent.h */\n\n#include <sst/core/subcomponent.h>\n\n// SubComponent API - define an API for a type of subcomponent\nclass basicSubComponentAPI : public SST::SubComponent \n{\npublic:\n    // Tell SST that this class is a SubComponent API\n    SST_ELI_REGISTER_SUBCOMPONENT_API(SST::simpleElementExample::basicSubComponentAPI)\n\n    basicSubComponentAPI(ComponentId_t id, Params& params) : SubComponent(id) {}\n    virtual ~basicSubComponentAPI() {}\n\n    virtual int compute (int num) =0;\n    virtual std::string compute (std::string comp) =0;\n};\n\n// This is a subcomponent that implements the API defined above\nclass basicSubComponentIncrement : public basicSubComponentAPI \n{\npublic:\n    SST_ELI_REGISTER_SUBCOMPONENT(\n        basicSubComponentIncrement,     // Class name\n        "simpleElementExample",         // Library name, the \'lib\' in SST\'s lib.name format\n        "basicSubComponentIncrement",   // Name used to refer to this subcomponent, the \'name\' in SST\'s lib.name format\n        SST_ELI_ELEMENT_VERSION(1,0,0), // A version number\n        "SubComponent that increments a value", // Description\n        SST::simpleElementExample::basicSubComponentAPI) // Fully qualified name of the API this subcomponent implements\n\n    // Other ELI macros as needed for parameters, ports, statistics, and subcomponent slots\n    SST_ELI_DOCUMENT_PARAMS( { "amount", "Amount to increment by", "1" } )\n\n    basicSubComponentIncrement(ComponentId_t id, Params& params);\n    ~basicSubComponentIncrement();\n\n    // Implement the API functions\n    int compute( int num) override;\n    std::string compute( std::string comp ) override;\n\nprivate:\n    int amount;\n};\n\n/* Source: simpleElementExample/basicSubComponent_subcomponent.h */\n#include <sst_config.h>\n#include <basicSubComponent_subcomponent.h>\n\nbasicSubComponentIncrement::basicSubComponentIncrement(ComponentId_t id, Params& params) :\n    basicSubComponentAPI(id, params) \n{\n    amount = params.find<int>("amount",  1);\n}\n\nbasicSubComponentIncrement::~basicSubComponentIncrement() { }\n\nint basicSubComponentIncrement::compute( int num )\n{\n    return num + amount;\n}\n\nstd::string basicSubComponentIncrement::compute ( std::string comp )\n{\n    return "(" + comp + ")" + " + " + std::to_string(amount);\n}\n')),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/subcomponent.h>\n")))}d.isMDXComponent=!0}}]);