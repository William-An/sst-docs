"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3058],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),s=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(r),d=o,k=m["".concat(i,".").concat(d)]||m[d]||u[d]||c;return r?n.createElement(k,a(a({ref:t},p),{},{components:r})):n.createElement(k,a({ref:t},p))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,a=new Array(c);a[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<c;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7776:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var n=r(7462),o=r(3366),c=(r(7294),r(3905)),a=["components"],l={title:"unregisterClock"},i=void 0,s={unversionedId:"core/component/time/unregisterClock",id:"core/component/time/unregisterClock",title:"unregisterClock",description:"Availability: Component, SubComponent, ComponentExtension",source:"@site/../docs/core/component/time/unregisterClock.md",sourceDirName:"core/component/time",slug:"/core/component/time/unregisterClock",permalink:"/docs/docs/core/component/time/unregisterClock",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/component/time/unregisterClock.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"unregisterClock"},sidebar:"Core API",previous:{title:"registerClock",permalink:"/docs/docs/core/component/time/registerClock"},next:{title:"reregisterClock",permalink:"/docs/docs/core/component/time/reregisterClock"}},p={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],u={toc:m},d="wrapper";function k(e){var t=e.components,r=(0,o.Z)(e,a);return(0,c.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"void unregisterClock(TimeConverter* freq, Clock::HandlerBase* handler);\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Availability:")," Component, SubComponent, ComponentExtension"),(0,c.kt)("p",null,"Remove a clock. SST will no longer call the specified handler at the clock frequency specified by the time converter. Other clock handlers registered to the same time converter or other clocks registered with different time converters will be unaffected."),(0,c.kt)("h2",{id:"parameters"},"Parameters"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"freq")," (TimeConverter*) Frequency of the clock to unregister"),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"handler")," (Clock::HandlerBase*) Clock handler that should be unregistered"),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"returns")," (TimeConverter*) A time converter representing the clock frequency")),(0,c.kt)("h2",{id:"examples"},"Examples"),(0,c.kt)("h3",{id:"example-1"},"Example 1"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <sst/core/component.h>\nexample::example(ComponentId_t id, Params& params) : Component(id) \n{\n    /** Other configuration here */\n\n    // Register a clock\n    handler = new Clock::Handler<example>(this, &example::clockTick);\n    clock_tc = registerClock("1GHz", handler);\n\n    // Disable the clock for now\n    unregisterClock(clock_tc, handler);\n}\n')),(0,c.kt)("h2",{id:"header"},"Header"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n")))}k.isMDXComponent=!0}}]);