"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[426],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),m=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},i=function(e){var t=m(e.components);return r.createElement(d.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),l=m(n),u=a,f=l["".concat(d,".").concat(u)]||l[u]||p[u]||o;return n?r.createElement(f,s(s({ref:t},i),{},{components:n})):r.createElement(f,s({ref:t},i))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c[l]="string"==typeof e?e:a,s[1]=c;for(var m=2;m<o;m++)s[m]=n[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},22275:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const o={title:"constructor"},s=void 0,c={unversionedId:"core/iface/StandardMem/constructor",id:"core/iface/StandardMem/constructor",title:"constructor",description:"This constructor is called when a (Sub)Component loads a StandardMem interface.",source:"@site/../docs/core/iface/StandardMem/constructor.md",sourceDirName:"core/iface/StandardMem",slug:"/core/iface/StandardMem/constructor",permalink:"/sst-docs/docs/core/iface/StandardMem/constructor",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/constructor.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"constructor"},sidebar:"core",previous:{title:"class",permalink:"/sst-docs/docs/core/iface/StandardMem/class"},next:{title:"destructor",permalink:"/sst-docs/docs/core/iface/StandardMem/destructor"}},d={},m=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Example 1: Implementing a StandardMem constructor",id:"example-1-implementing-a-standardmem-constructor",level:3},{value:"Example 2: Loading a StandardMem interface",id:"example-2-loading-a-standardmem-interface",level:3},{value:"Header",id:"header",level:2}],i={toc:m},l="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"StandardMem(SST::ComponentId_t id, Params& params, TimeConverter* time, HandlerBase* handler);\n")),(0,a.kt)("p",null,"This constructor is called when a (Sub)Component loads a StandardMem interface."),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Memory interface")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","No specific requirements beyond constructing the object."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Do not call this function directly. The functions for loading SubComponents invoke this constructor."),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"id")," (ComponentId_t) A unique ID generated by SST for each SubComponent"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"params")," (Params&) The parameter set passed into the StandardMem SubComponent by the simulation configuration file if user-defined or by the parent (Sub)Component if anonymous"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"time")," (TimeConverter*) A time base to use for the SubComponent's links if needed"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"handler")," (HandlerBase*) A function callback for returning responses"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"returns")," (StandardMem) The newly constructed StandardMem SubComponent")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("h3",{id:"example-1-implementing-a-standardmem-constructor"},"Example 1: Implementing a StandardMem constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/standardInterface.h"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/memHierarchy/standardInterface.h"':!0},'#include <sst/core/interfaces/stdMem.h>\n\nclass StandardInterface : public SST::Interfaces::StandardMem {\npublic:\n    // Tell SST that this class is a SubComponent API\n    SST_ELI_REGISTER_SUBCOMPONENT(StandardInterface, "memHierarchy", "standardInterface", SST_ELI_ELEMENT_VERSION(1,0,0), "Interface to memory hierarchy between endpoint and cache. COnverts StandardMem requests into MemEventBases.", SST::Interfaces::StandardMem)\n\n    /* Rest of ELI macros */\n\n    StandardInterface(ComponentId_t cid, Params &params, TimeConverter* time, HandlerBase* handler = NULL);\n\n    ~StandardInterface();\n\n    /* Rest of class */\n};\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"':!0},'#include <sst_config.h>\n#include "standardInterface.h"\n\nStandardInterface::StandardInterface(ComponentId_t cid, Params &params, TimeConverter* time, HandlerBase* handler) :\n    StandardMem(id, params, time, handler)\n    {\n        setDefaultTimeBase(time); // Links are required to have a timebase\n\n        /** Rest of constructor implementation **/\n    }\n')),(0,a.kt)("h3",{id:"example-2-loading-a-standardmem-interface"},"Example 2: Loading a StandardMem interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/testcpu/standardCPU.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/memHierarchy/testcpu/standardCPU.cc"':!0},'standardCPU::standardCPU(ComponentId_t id, Params& params) : Component(id), rng(id, 13)\n{\n    /* Other standardCPU constructor code */\n\n    // Load interface subcomponent\n    // clockTC is standardCPU\'s clock timeconverter\n    memory = loadUserSubComponent<StandardMem>("memory", ComponentInfo::SHARE_NONE, clockTC,\n        new StandardMem::Handler<standardCPU>(this, &standardCPU::handleEvent));\n    \n    if (!memory) \n    {\n        out.fatal(CALL_INFO, -1, "Unable to load StandardMem subcomponent. Check that \'memory\' slot is filled in input.\\n");\n    }\n\n    /* Some more standardCPU constructor code */\n}\n')),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stdMem.h>\n")))}p.isMDXComponent=!0}}]);