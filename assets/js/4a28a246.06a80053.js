"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2824],{37926:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>l});var t=n(85893),r=n(11151);const d={title:"CustomReq"},c=void 0,i={id:"core/iface/StandardMem/req/customreq",title:"CustomReq",description:"Response Type StandardMem::CustomResp  &nbsp;",source:"@site/../docs/core/iface/StandardMem/req/customreq.md",sourceDirName:"core/iface/StandardMem/req",slug:"/core/iface/StandardMem/req/customreq",permalink:"/sst-docs/docs/core/iface/StandardMem/req/customreq",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/req/customreq.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1695940750,formattedLastUpdatedAt:"Sep 28, 2023",frontMatter:{title:"CustomReq"},sidebar:"core",previous:{title:"InvNotify",permalink:"/sst-docs/docs/core/iface/StandardMem/req/invnotify"},next:{title:"CustomResp",permalink:"/sst-docs/docs/core/iface/StandardMem/req/customresp"}},a={},l=[{value:"Member variables",id:"member-variables",level:2},{value:"Member functions",id:"member-functions",level:2},{value:"Defined in <code>Request</code> base class",id:"defined-in-request-base-class",level:3},{value:"Virtual functions inherited from the <code>Request</code> base class",id:"virtual-functions-inherited-from-the-request-base-class",level:3},{value:"makeResponse",id:"makeresponse",level:4},{value:"needsResponse",id:"needsresponse",level:4},{value:"convert",id:"convert",level:4},{value:"handle",id:"handle",level:4},{value:"getString",id:"getstring",level:4},{value:"Header",id:"header",level:2}];function o(e){const s={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"// Constructor\nSST::Interfaces::StandardMem::CustomReq(CustomData* data, flags_t flags = 0, Addr iPtr = 0, \n    uint32_t tid = 0);\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Response Type"})," ",(0,t.jsx)(s.a,{href:"customresp",children:"StandardMem::CustomResp"}),"  \xa0",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Needs Response"})," ",(0,t.jsx)(s.code,{children:"true"})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"CustomReq"})," class allows implementations (endpoints and/or memory systems) to add additional custom memory transactions to the set provided by StandardMem. The class wraps a generic data structure, ",(0,t.jsx)(s.a,{href:"customdata",children:(0,t.jsx)(s.code,{children:"CustomData"})})," which can be extended by endpoints and the memory system to dynamically add new request types to the StandardInterface. The ",(0,t.jsx)(s.code,{children:"CustomData"})," class provides a minimal set of functions to enable a memory system to route requests by address, create responses, and generate debug/output for the CustomReq."]}),"\n",(0,t.jsx)(s.h2,{id:"member-variables",children:"Member variables"}),"\n",(0,t.jsxs)(s.p,{children:["Including those inherited from the ",(0,t.jsx)(s.code,{children:"StandardMem::Request"})," base class, ",(0,t.jsx)(s.code,{children:"StandardMem::CustomReq"})," includes the following member variables."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"id"})," (id_t) A request or response identifier. A request and its response contain the same identifier."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"flags"})," (flags_t) A 32-bit vector indicating any special flags added to the request"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"data"})," (CustomData*) A custom data structure encapsulating any custom fields provided by the custom request"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"iPtr"})," (Addr) An instruction pointer. This is optional metadata."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"tid"})," (uint32_t) An optional thread ID, can be used by memory systems if needed"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"member-functions",children:"Member functions"}),"\n",(0,t.jsxs)(s.h3,{id:"defined-in-request-base-class",children:["Defined in ",(0,t.jsx)(s.a,{href:"class",children:(0,t.jsx)(s.code,{children:"Request"})})," base class"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"getId"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"setNoncacheable"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"unsetNoncacheable"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"getNoncacheable"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"setSuccess"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"unsetSuccess"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"getSuccess"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"setFail"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"unsetFail"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"getFail"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"setTrace"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"unsetTrace"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"getTrace"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"setFlag"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"unsetFlag"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"getFlag"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"clearAllFlags"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"getAllFlags"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"getFlagString"})}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"virtual-functions-inherited-from-the-request-base-class",children:["Virtual functions inherited from the ",(0,t.jsx)(s.a,{href:"class",children:(0,t.jsx)(s.code,{children:"Request"})})," base class"]}),"\n",(0,t.jsx)(s.h4,{id:"makeresponse",children:"makeResponse"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"Request* makeResponse();\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Creates a ",(0,t.jsx)(s.a,{href:"customresp",children:"CustomResp"})," initialized as a response to this CustomReq request. The ",(0,t.jsx)(s.code,{children:"data"})," field in the response is populated by calling ",(0,t.jsx)(s.code,{children:"makeResponse()"})," on this request's custom data object."]}),"\n",(0,t.jsx)(s.h4,{id:"needsresponse",children:"needsResponse"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"bool needsResponse();\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the result of calling ",(0,t.jsx)(s.code,{children:"needsResponse()"})," on the CustomData object ",(0,t.jsx)(s.code,{children:"data"}),"."]}),"\n",(0,t.jsx)(s.h4,{id:"convert",children:"convert"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"SST::Event* convert(RequestConverter* converter);\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Invokes ",(0,t.jsx)(s.code,{children:"convert()"})," on the supplied ",(0,t.jsx)(s.code,{children:"converter"})," visitor class to return an SST::Event in an implementation-specific format."]}),"\n",(0,t.jsx)(s.h4,{id:"handle",children:"handle"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"virtual void handle(RequestHandler* handler) =0;\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Invokes ",(0,t.jsx)(s.code,{children:"handle()"})," on the supplied ",(0,t.jsx)(s.code,{children:"handler"})," visitor class to handle the event according to type."]}),"\n",(0,t.jsx)(s.h4,{id:"getstring",children:"getString"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"virtual std::string getString() =0;\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns a formatted string listing the fields of the CustomReq request as well as the result of calling ",(0,t.jsx)(s.code,{children:"getString()"})," on the the CustomData object ",(0,t.jsx)(s.code,{children:"data"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sh",children:'Example Output:\n# In this example, data->getString() returns "atomic increment at addr 0x7ffffcf0"\nID: 133, Type: CustomReq, Flags: [],  atomic increment at addr 0x7ffffcf0, InstPtr: 0x0, ThreadID: 0\n'})}),"\n",(0,t.jsx)(s.h2,{id:"header",children:"Header"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"#include <sst/core/interfaces/stdMem.h>\n"})})]})}function h(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},11151:(e,s,n)=>{n.d(s,{Z:()=>i,a:()=>c});var t=n(67294);const r={},d=t.createContext(r);function c(e){const s=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(d.Provider,{value:s},e.children)}}}]);