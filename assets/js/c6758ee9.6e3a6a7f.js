"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3657],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=i(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||l;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var i=2;i<l;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5366:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>u,metadata:()=>i,toc:()=>c});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],u={id:"output",title:"output()"},p=void 0,i={unversionedId:"cpp/output/output",id:"cpp/output/output",title:"output()",description:"Fully Qualified Name",source:"@site/../docs/cpp/output/output.md",sourceDirName:"cpp/output",slug:"/cpp/output/",permalink:"/sst-website/docs/cpp/output/",draft:!1,editUrl:"https://github.com/sstsimulator/sst-website/edit/master/docs/../docs/cpp/output/output.md",tags:[],version:"current",lastUpdatedBy:"Ryan Ledbetter",lastUpdatedAt:1539909317,formattedLastUpdatedAt:"Oct 19, 2018",frontMatter:{id:"output",title:"output()"},sidebar:"C++",previous:{title:"init()",permalink:"/sst-website/docs/cpp/output/init"},next:{title:"verbose()",permalink:"/sst-website/docs/cpp/output/verbose"}},s={},c=[{value:"Fully Qualified Name",id:"fully-qualified-name",level:2},{value:"Remarks",id:"remarks",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"See Also",id:"see-also",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"fully-qualified-name"},"Fully Qualified Name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::Output::output()\n")),(0,l.kt)("h3",{id:"remarks"},"Remarks"),(0,l.kt)("p",null,"Print a message during execution. If called with the CALL_INFO macro, it will prepended the message with the expanded prefix set in the call to the ",(0,l.kt)("a",{parentName:"p",href:"/sst-website/docs/cpp/output/init"},"init function"),". If called with just a string, it will not prepend anything."),(0,l.kt)("h2",{id:"requirements"},"Requirements"),(0,l.kt)("p",null,"Main definition"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/output.h>\n")),(0,l.kt)("p",null,"Also included in the following"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/simulation.h>\n#include <sst/core/component.h>\n")),(0,l.kt)("h2",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"//#1 will prepend the prefix set in this Output object\n// NOTE: usually called with the CALL_INFO macro, which will take the place of the first 3 parameters\nvoid SST::Output::output(uint32_t line, const char* file, const char* func, const char* format, ... )\n\n//#2 outputs only the message provided. It will not prepend the prefix set in this Output object.\nvoid SST::Output::output(const char* format, ... )\n")),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"line")," - Line number of calling function (use CALL_INFO macro)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"file")," - File name calling function (use CALL_INFO macro)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"func")," - Function name calling function (use CALL_INFO macro)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"format")," - Format string. All valid formats for printf are available."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"...")," - Arguments for format."),(0,l.kt)("h2",{id:"return-value"},"Return Value"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"None")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"example-1"},"Example 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'//#1\nm_dbg.output(CALL_INFO,"Warn addr %" PRIx64 " ignored\\n", vec[i].addr);\n')),(0,l.kt)("h3",{id:"example-2"},"Example 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'//#2\noutput.output("WARNING:  Found dangling link: %s.  It is connected on one side to component %s.\\n",clink.name.c_str(),\n                    comps[clink.component[1]].name.c_str());\n')),(0,l.kt)("h3",{id:"example-3"},"Example 3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},' schedout.output("toRun:\\n");\nfor (vector<Job*>::iterator it2 = intoRun -> begin(); !found && it2 != intoRun -> end(); it2++) {\n    schedout.output("%s\\n", (*it2) -> toString().c_str());\n}\nschedout.output("running:\\n");\nfor (vector<Job*>::iterator it2 = inrunning -> begin(); !found && it2 != inrunning -> end(); it2++) {\n    schedout.output("%s\\n", (*it2) -> toString().c_str());\n} \nschedout.fatal(CALL_INFO, 1, "Could not find deep copy for %s\\nwhen copying StatefulScheduler estSched for FST\\n", (*it) -> j -> toString().c_str());\n         \n')),(0,l.kt)("h2",{id:"see-also"},"See Also"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/init"},"init()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/debug"},"debug()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/verbose"},"verbose()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/fatal"},"fatal()"))))}m.isMDXComponent=!0}}]);