"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4055],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(r),u=a,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||l;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},94075:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const l={title:"poll"},o=void 0,i={unversionedId:"core/iface/StandardMem/poll",id:"core/iface/StandardMem/poll",title:"poll",description:"Receive an event (request or response) from the interface. Use this method for polling-based applications.",source:"@site/../docs/core/iface/StandardMem/poll.md",sourceDirName:"core/iface/StandardMem",slug:"/core/iface/StandardMem/poll",permalink:"/sst-docs/docs/core/iface/StandardMem/poll",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/poll.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"poll"},sidebar:"core",previous:{title:"getLineSize",permalink:"/sst-docs/docs/core/iface/StandardMem/getLineSize"},next:{title:"recvUntimedData",permalink:"/sst-docs/docs/core/iface/StandardMem/recvUntimedData"}},s={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing poll() in a StandardMem interface",id:"example-1-implementing-poll-in-a-standardmem-interface",level:3},{value:"Example 2: Using poll from an endpoint",id:"example-2-using-poll-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual Request* poll() = 0;\n")),(0,a.kt)("p",null,"Receive an event (request or response) from the interface. Use this method for polling-based applications.\nRegister a ",(0,a.kt)("a",{parentName:"p",href:"handler"},"handler")," for push-based notification of responses. "),(0,a.kt)("p",null,"Upon receipt of a Request, the receiver takes responsibility for subsequently deleting the Request."),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Memory interface")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Return a waiting Request. If no Request is available, return ",(0,a.kt)("inlineCode",{parentName:"p"},"nullptr"),". If a ",(0,a.kt)("a",{parentName:"p",href:"constructor"},"response handler was registered")," with the interface, then this function may always return ",(0,a.kt)("inlineCode",{parentName:"p"},"nullptr"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Use this function to get messages from the interface if no handler was registered with the interface."),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"returns")," (Request*) A Request that was delivered to the interface from the memory system, or ",(0,a.kt)("inlineCode",{parentName:"li"},"nullptr")," if no Request is available.")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"example-1-implementing-poll-in-a-standardmem-interface"},"Example 1: Implementing poll() in a StandardMem interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"':!0},"// MemHierarchy's StandardInterface requires a handler so poll() always returns nullptr\nRequest* StandardInterface::poll()\n{\n    return nullptr;\n}\n")),(0,a.kt)("h3",{id:"example-2-using-poll-from-an-endpoint"},"Example 2: Using poll from an endpoint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Request* req = mem_iface->poll();\n\nif ( req != nullptr )\n{\n    /* Handle request here */\n    delete req;\n}\n")),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stdMem.h>\n")))}d.isMDXComponent=!0}}]);