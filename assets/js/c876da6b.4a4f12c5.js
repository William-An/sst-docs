"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},70804:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={title:"getEndpointID"},o=void 0,s={unversionedId:"core/iface/SimpleNetwork/getEndpointID",id:"core/iface/SimpleNetwork/getEndpointID",title:"getEndpointID",description:"Returns the ID assigned by the network to this endpoint. This is the same ID used in the Request src and dest fields. A SimpleNetwork interface must implement this function and an endpoint can use it to get the correct ID to fill the src field of its Requests with. Likewise, Requests whose dest field matches the ID returned by this function should be sent to this endpoint.",source:"@site/../docs/core/iface/SimpleNetwork/getEndpointID.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/getEndpointID",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/getEndpointID",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/getEndpointID.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"getEndpointID"},sidebar:"core",previous:{title:"finish",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/finish"},next:{title:"getLinkBW",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/getLinkBW"}},l={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Returning an ID from a SimpleNetwork",id:"example-1-returning-an-id-from-a-simplenetwork",level:3},{value:"Example 2: Using an ID from an endpoint",id:"example-2-using-an-id-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual nid_t getEndpointID() const = 0;\n")),(0,i.kt)("p",null,"Returns the ID assigned by the network to this endpoint. This is the same ID used in the ",(0,i.kt)("a",{parentName:"p",href:"Request"},"Request")," ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"dest")," fields. A SimpleNetwork interface ",(0,i.kt)("em",{parentName:"p"},"must")," implement this function and an endpoint can use it to get the correct ID to fill the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," field of its Requests with. Likewise, Requests whose ",(0,i.kt)("inlineCode",{parentName:"p"},"dest")," field matches the ID returned by this function should be sent to this endpoint."),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","Return a unique ID assigned to the endpoint. Does not need to return correct data ",(0,i.kt)("em",{parentName:"p"},"until")," ",(0,i.kt)("a",{parentName:"p",href:"isNetworkInitialized"},"isNetworkInitialized()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","Use this function to get the endpoint's ID and fill the source field of Requests sent with this ID. Cannot call this function prior to network initialization, when ",(0,i.kt)("inlineCode",{parentName:"p"},"isNetworkInitialized()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns")," (nid_t) The network ID assigned to this endpoint")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"example-1-returning-an-id-from-a-simplenetwork"},"Example 1: Returning an ID from a SimpleNetwork"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.h"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.h"':!0},"inline nid_t getEndpointID() const {\n    if (use_nid_map) {\n        return logical_nid;\n    } else {\n        return id;\n    }\n}\n")),(0,i.kt)("h3",{id:"example-2-using-an-id-from-an-endpoint"},"Example 2: Using an ID from an endpoint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"SimpleNetwork::Request* req = new SimpleNetwork::Request();\nreq->src = network_iface->getEndpointID();\n")),(0,i.kt)("h2",{id:"header"},"Header"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}m.isMDXComponent=!0}}]);