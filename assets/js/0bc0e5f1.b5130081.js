"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9930],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,k=c["".concat(o,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},87278:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={title:"InvNotify"},l=void 0,s={unversionedId:"core/iface/StandardMem/req/invnotify",id:"core/iface/StandardMem/req/invnotify",title:"InvNotify",description:"Response Type None  &nbsp;",source:"@site/../docs/core/iface/StandardMem/req/invnotify.md",sourceDirName:"core/iface/StandardMem/req",slug:"/core/iface/StandardMem/req/invnotify",permalink:"/sst-docs/docs/core/iface/StandardMem/req/invnotify",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/req/invnotify.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"InvNotify"},sidebar:"core",previous:{title:"MoveData",permalink:"/sst-docs/docs/core/iface/StandardMem/req/movedata"},next:{title:"CustomReq",permalink:"/sst-docs/docs/core/iface/StandardMem/req/customreq"}},o={},d=[{value:"Member variables",id:"member-variables",level:2},{value:"Member functions",id:"member-functions",level:2},{value:"Defined in <code>Request</code> base class",id:"defined-in-request-base-class",level:3},{value:"Virtual functions inherited from the <code>Request</code> base class",id:"virtual-functions-inherited-from-the-request-base-class",level:3},{value:"makeResponse",id:"makeresponse",level:4},{value:"needsResponse",id:"needsresponse",level:4},{value:"convert",id:"convert",level:4},{value:"handle",id:"handle",level:4},{value:"getString",id:"getstring",level:4},{value:"Header",id:"header",level:2}],p={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Constructor\nSST::Interfaces::StandardMem::InvNotify(Addr pAddr, uint64_t size, flags_t flags = 0,\n    Addr vAddr = 0, Addr iPtr = 0, uint32_t tid = 0);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response Type")," None  ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Needs Response")," ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("p",null,"The StandardMem::InvNotify passes a notification from the memory system to the compute endpoint. It indicates that an address has been invalidated from a local cache and can be used by processors that snoop these coherence transactions. Some inherited fields, such as instruction pointer (",(0,r.kt)("inlineCode",{parentName:"p"},"iPtr"),") and thread ID (",(0,r.kt)("inlineCode",{parentName:"p"},"tid"),") may not be relevant to this request type."),(0,r.kt)("h2",{id:"member-variables"},"Member variables"),(0,r.kt)("p",null,"Including those inherited from the ",(0,r.kt)("inlineCode",{parentName:"p"},"StandardMem::Request")," base class, ",(0,r.kt)("inlineCode",{parentName:"p"},"StandardMem::InvNotify")," includes the following member variables."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"id")," (id_t) A request or response identifier. This id matches that of the corresponding Write request."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"flags")," (flags_t) A 32-bit vector indicating any special flags added to the request"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"pAddr")," (Addr) The physical starting address for the bytes written"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"vAddr")," (Addr) The virtual (if any) starting address for the bytes written"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"size")," (uint64_t) The number of bytes that were requested to be written"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"iPtr")," (Addr) An instruction pointer. This is optional metadata."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"tid")," (uint32_t) An optional thread ID, can be used by memory systems if needed")),(0,r.kt)("h2",{id:"member-functions"},"Member functions"),(0,r.kt)("h3",{id:"defined-in-request-base-class"},"Defined in ",(0,r.kt)("a",{parentName:"h3",href:"class"},(0,r.kt)("inlineCode",{parentName:"a"},"Request"))," base class"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setNoncacheable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetNoncacheable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getNoncacheable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setFail")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetFail")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFail")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setTrace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetTrace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getTrace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setFlag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetFlag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFlag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clearAllFlags")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getAllFlags")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFlagString"))),(0,r.kt)("h3",{id:"virtual-functions-inherited-from-the-request-base-class"},"Virtual functions inherited from the ",(0,r.kt)("a",{parentName:"h3",href:"class"},(0,r.kt)("inlineCode",{parentName:"a"},"Request"))," base class"),(0,r.kt)("h4",{id:"makeresponse"},"makeResponse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Request* makeResponse();\n")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"nullptr"),"."),(0,r.kt)("h4",{id:"needsresponse"},"needsResponse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool needsResponse();\n")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h4",{id:"convert"},"convert"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::Event* convert(RequestConverter* converter);\n")),(0,r.kt)("p",null,"Invokes ",(0,r.kt)("inlineCode",{parentName:"p"},"convert()")," on the supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"converter")," visitor class to return an SST::Event in an implementation-specific format."),(0,r.kt)("h4",{id:"handle"},"handle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void handle(RequestHandler* handler) =0;\n")),(0,r.kt)("p",null,"Invokes ",(0,r.kt)("inlineCode",{parentName:"p"},"handle()")," on the supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," visitor class to handle the event according to type."),(0,r.kt)("h4",{id:"getstring"},"getString"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual std::string getString() =0;\n")),(0,r.kt)("p",null,"Returns a formatted string listing all fields of the InvNotify."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"Example Output:\nID: 817, Type: InvNotify, Flags: [], PhysAddr: 0x13240, VirtAddr: 0x0, Size: 64, InstPtr: 0x0, ThreadID: 0\n")),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stdMem.h>\n")))}u.isMDXComponent=!0}}]);