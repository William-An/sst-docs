"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7101],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),f=s,u=m["".concat(o,".").concat(f)]||m[f]||d[f]||r;return n?a.createElement(u,l(l({ref:t},p),{},{components:n})):a.createElement(u,l({ref:t},p))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,l=new Array(r);l[0]=f;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[m]="string"==typeof e?e:s,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var a=n(7462),s=n(3366),r=(n(7294),n(3905)),l=["components"],i={id:"basics_makefile",title:"Basics: Makefile"},o=void 0,c={unversionedId:"guides/files/basics_makefile",id:"guides/files/basics_makefile",title:"Basics: Makefile",description:"This page has not been reviewed recently to ensure that it is up-to-date with the latest SST specification. It is possible the information is out of date.",source:"@site/../docs/guides/files/basics_makefile.md",sourceDirName:"guides/files",slug:"/guides/files/basics_makefile",permalink:"/sst-website/docs/guides/files/basics_makefile",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/guides/files/basics_makefile.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{id:"basics_makefile",title:"Basics: Makefile"},sidebar:"Guides",previous:{title:"Basics: Header (.h) Files",permalink:"/sst-website/docs/guides/files/basics_header_files"}},p={},m=[{value:"Remarks",id:"remarks",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Overview",id:"overview",level:3},{value:"Breakdown",id:"breakdown",level:3},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"See Also",id:"see-also",level:2}],d={toc:m},f="wrapper";function u(e){var t=e.components,n=(0,s.Z)(e,l);return(0,r.kt)(f,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This page has not been reviewed recently to ensure that it is up-to-date with the latest SST specification. It is possible the information is out of date.")),(0,r.kt)("h2",{id:"remarks"},"Remarks"),(0,r.kt)("p",null,"This is intended only to give a general idea of what is required in a makefile for an SST Element. This is not meant to be an introduction to makefiles in general."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("h3",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Content you need to replace appears in double brackets - for example: [","[some label]","]."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-makefile"},"CXX=$(shell sst-config --CXX)\nCXXFLAGS=$(shell sst-config --ELEMENT_CXXFLAGS)\nLDFLAGS=$(shell sst-config --ELEMENT_LDFLAGS)\n\nall: [[library name]].so install\n\n[[library name]].so: [[space separated list of C++ files]]\n    $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $^\n\ninstall:\n    sst-register [[element name]] [[element name]]_LIBDIR=$(CURDIR)\n\nclean:\n    rm -f *.o tests/*.dot tests/*.jpg [[library name]].so\n\n")),(0,r.kt)("h3",{id:"breakdown"},"Breakdown"),(0,r.kt)("p",null,"The top line gets the compiler and flags that are used to compile SST and its elements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-makefile"},"CXX=$(shell sst-config --CXX)\nCXXFLAGS=$(shell sst-config --ELEMENT_CXXFLAGS)\nLDFLAGS=$(shell sst-config --ELEMENT_LDFLAGS)\n")),(0,r.kt)("p",null,"Compile and register the element with SST."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-makefile"},"all: [[library name]].so install\n\n[[library name]].so: [[space separated list of C++ files]]\n    $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $^\n\ninstall:\n    sst-register [[element name]] [[element name]]_LIBDIR=$(CURDIR)\n")),(0,r.kt)("p",null,"The last couple of lines are tasks to do before doing a clean compile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-makefile"},"clean:\n    rm -f *.o tests/*.dot tests/*.jpg [[library name]].so\n")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"example-1"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-makefile"},"CXX=$(shell sst-config --CXX)\nCXXFLAGS=$(shell sst-config --ELEMENT_CXXFLAGS)\nLDFLAGS=$(shell sst-config --ELEMENT_LDFLAGS)\n\nall: libexC_carWash.so install\n\nlibexC_carWash.so: carWash.cc carGenerator.cc bay.cc\n    $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $^\n\ninstall:\n    sst-register exC_carWash exC_carWash_LIBDIR=$(CURDIR)\n\nclean:\n    rm -f *.o tests/*.dot tests/*.jpg libexC_carWash.so\n")),(0,r.kt)("h2",{id:"see-also"},"See Also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/sst-website/docs/tools/commandLine/sst-config"},"sst-config")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/sst-website/docs/tools/commandLine/sst-register"},"sst-register"))))}u.isMDXComponent=!0}}]);