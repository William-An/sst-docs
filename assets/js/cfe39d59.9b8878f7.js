"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6003],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={title:"Compilation Tricks"},s=void 0,c={unversionedId:"guides/tips/compilation",id:"guides/tips/compilation",title:"Compilation Tricks",description:"Avoid unneccessary recompilation",source:"@site/../docs/guides/tips/compilation.md",sourceDirName:"guides/tips",slug:"/guides/tips/compilation",permalink:"/sst-docs/docs/guides/tips/compilation",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/guides/tips/compilation.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1678138197,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{title:"Compilation Tricks"},sidebar:"Guides",previous:{title:"How to Run SST",permalink:"/sst-docs/docs/guides/runningSST"},next:{title:"Basics: Header (.h) Files",permalink:"/sst-docs/docs/guides/files/basics_header_files"}},p={},u=[{value:"Avoid unneccessary recompilation",id:"avoid-unneccessary-recompilation",level:2},{value:"Ignore particular SST Elements",id:"ignore-particular-sst-elements",level:2}],d={toc:u},m="wrapper";function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"avoid-unneccessary-recompilation"},"Avoid unneccessary recompilation"),(0,i.kt)("p",null,"To avoid a majority of redundant recompilation when developing SST Core and Elements, you can have the ",(0,i.kt)("inlineCode",{parentName:"p"},"install")," utility preserve timestamps of installed files. To do this, override the ",(0,i.kt)("inlineCode",{parentName:"p"},"INSTALL")," variable when configuring SST, prior to running ",(0,i.kt)("inlineCode",{parentName:"p"},"make"),". This will allow ",(0,i.kt)("inlineCode",{parentName:"p"},"make")," and friends to continue to work properly while reducing the amount of recompilation. Appending the ",(0,i.kt)("inlineCode",{parentName:"p"},"INSTALL")," flag to your configure scipt invocation will set it appropriately. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ ../configure --prefix=$HOME/install <other configure flags> INSTALL="/usr/bin/install -p"\n')),(0,i.kt)("p",null,"You may need to adjust the path to reflect the location of your ",(0,i.kt)("inlineCode",{parentName:"p"},"install")," binary.\nOnce this is done, you should no longer need to perform unnecessary recompilations.\nPlease note that you must adjust your configuration for Core, Elements, and any other SST libraries."),(0,i.kt)("h2",{id:"ignore-particular-sst-elements"},"Ignore particular SST Elements"),(0,i.kt)("p",null,"To avoid compiling SST Elements that are not of interest, put a ",(0,i.kt)("inlineCode",{parentName:"p"},".ignore")," file in the element directory and run ",(0,i.kt)("inlineCode",{parentName:"p"},"./autogen.sh")," followed by configure and make. Note that this may cause some tests to fail if one element has a testing dependency on another that is not built."),(0,i.kt)("p",null,"For example, to ignore the Ariel library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ cd sst-elements\n$ touch src/sst/elements/ariel/.ignore\n$ ./autogen.sh\n$ ./configure <configure flags>\n$ make all install\n")))}f.isMDXComponent=!0}}]);