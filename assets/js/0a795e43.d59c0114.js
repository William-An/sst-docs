"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5172],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,c=e.mdxType,l=e.originalType,i=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=s(n),k=c,m=u["".concat(i,".").concat(k)]||u[k]||p[k]||l;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var l=n.length,o=new Array(l);o[0]=k;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a[u]="string"==typeof e?e:c,o[1]=a;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},85564:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var r=n(87462),c=(n(67294),n(3905));const l={title:"Clock Handlers"},o=void 0,a={unversionedId:"core/clock/clock_handler",id:"core/clock/clock_handler",title:"Clock Handlers",description:"Clock handlers must follow the function definitions above. When the SSTCore invokes a handler, it passes in the current cycle count, and optionally, an additional argument provided by the user. The handler function should return a boolean value indicating whether the clock should be disabled (true) or stay enabled (false). Disabling a clock function through the handler is more efficient than using unregisterClock().",source:"@site/../docs/core/clock/clock_handler.md",sourceDirName:"core/clock",slug:"/core/clock/clock_handler",permalink:"/sst-docs/docs/core/clock/clock_handler",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/clock/clock_handler.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"Clock Handlers"},sidebar:"core",previous:{title:"Clock",permalink:"/sst-docs/docs/core/clock/class"},next:{title:"Introduction",permalink:"/sst-docs/docs/core/component/introduction"}},i={},s=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}],d={toc:s},u="wrapper";function p(e){let{components:t,...n}=e;return(0,c.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"bool handler( Cycle t cycle );\nbool handler( Cycle_t cycle, dataT data);\n")),(0,c.kt)("p",null,"Clock handlers must follow the function definitions above. When the SSTCore invokes a handler, it passes in the current cycle count, and optionally, an additional argument provided by the user. The handler function should return a boolean value indicating whether the clock should be disabled (true) or stay enabled (false). Disabling a clock function through the handler is more efficient than using ",(0,c.kt)("a",{parentName:"p",href:"../component/time/unregisterClock"},(0,c.kt)("inlineCode",{parentName:"a"},"unregisterClock()")),"."),(0,c.kt)("h2",{id:"parameters"},"Parameters"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"cycle")," (Cycle_t) Current clock cycle count"),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"data")," (dataT) Optional, arbitrary data that the handler is created with"),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"returns")," (bool) Whether the clock should be disabled (true) or not (false)")),(0,c.kt)("h2",{id:"example"},"Example"),(0,c.kt)("p",null,"In this example, a component has two clock handlers, ",(0,c.kt)("inlineCode",{parentName:"p"},"mainTick")," and ",(0,c.kt)("inlineCode",{parentName:"p"},"otherTick"),". Each is registered to a different clock."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/simpleElementExample/basicClocks.h"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/simpleElementExample/basicClocks.h"':!0},"class basicClocks : public SST::Component\n{\npublic:\n    /* ELI and un-related functins omitted for brevity */\n    basicClocks(SST::ComponentId_t id, SST::Params& params);\nprivate:\n    //Handler function for one clock\n    bool mainTick(SST::Cycle_t cycle);\n\n    //Handler function for another clock\n    bool otherTick(SST::Cycle_t cycle, uint32_t id);\n\n    // Clock handler handle\n    Clock::HandlerBase* clock2Handler;\n};\n")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/simpleElementExample/basicClocks.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/simpleElementExample/basicClocks.cc"':!0},"basicClocks::basicClocks(ComponentId_t id, Params& params) : Component(id)\n{\n    /* Code to read parameters for the clock frequencies clock0Freq, clock1Freq, clock2Freq */\n\n    // Register a clock at clock0Freq to call back the 'mainTick' function\n    registerClock(clock0Freq, new Clock::Handler<basicClocks>(this, &basicClocks::mainTick));\n\n    // Register a clock at clock1Freq to call back the 'otherTick' function. \n    // THe handler also has a uint32_t (our arbitrary data) and this handler will pass a '1' in that field\n    clock1converter = registerClock(clock1Freq,\n        new Clock::Handler<basicClocks, uint32_t>(this, &basicClocks::otherTick, 1));\n\n    // Register a clock at clock2Freq to also call back the 'otherTick' function. This will pass a '2' to the \n    // handler so we can differentiate when clock1 calls the handler vs. clock2\n    Clock::HandlerBase* handler = new Clock::Handler<basicClocks, uint32_t>(tis, &basicClocks::otherTick, 2);\n    clock2converter = registerClock(clock2Freq, handler);\n\n    // How many cycles we'll run the simulation\n    cycleCount = 100;\n}\n\nbool basicClocks::mainTick( Cycle_t cycle )\n{\n    // Do something when the clock is called\n    cycleCount--;\n\n    if (cycleCount == 0) {\n        // Let simulation end, unregister this clock since we have nothing else to do\n        primaryComponentOKTOEndSim();\n        return true;\n    } else {\n        // Keep the clock registered\n        return false;\n    }\n}\n\nbool basicClocks::otherTick ( Cycle_t cycle, uint32_t id )\n{\n    // Do something when the clock is called, maybe do something different if id=1 vs id=2\n    if (cycle == 10)\n        return true; // Stop calling this handler after 10 cycles\n    else\n        return false;\n}\n")),(0,c.kt)("h2",{id:"header"},"Header"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n")))}p.isMDXComponent=!0}}]);