"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1020],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),i=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=i(r),d=a,_=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(_,l(l({ref:t},c),{},{components:r})):n.createElement(_,l({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var i=2;i<o;i++)l[i]=r[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5378:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>p,metadata:()=>i,toc:()=>u});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),l=["components"],p={id:"sst_eli_document_ports",title:"SST_ELI_DOCUMENT_PORTS"},s=void 0,i={unversionedId:"cpp/eli/sst_eli_document_ports",id:"cpp/eli/sst_eli_document_ports",title:"SST_ELI_DOCUMENT_PORTS",description:"Fully Qualified Name",source:"@site/../docs/cpp/eli/sst_eli_document_ports.md",sourceDirName:"cpp/eli",slug:"/cpp/eli/sst_eli_document_ports",permalink:"/sst-website/docs/cpp/eli/sst_eli_document_ports",draft:!1,editUrl:"https://github.com/sstsimulator/sst-website/edit/master/docs/../docs/cpp/eli/sst_eli_document_ports.md",tags:[],version:"current",lastUpdatedBy:"Ryan Ledbetter",lastUpdatedAt:1539909317,formattedLastUpdatedAt:"Oct 19, 2018",frontMatter:{id:"sst_eli_document_ports",title:"SST_ELI_DOCUMENT_PORTS"},sidebar:"C++",previous:{title:"SST_ELI_DOCUMENT_PARAMS",permalink:"/sst-website/docs/cpp/eli/sst_eli_document_params"},next:{title:"SST_ELI_DOCUMENT_STATISTICS",permalink:"/sst-website/docs/cpp/eli/sst_eli_document_statistics"}},c={},u=[{value:"Fully Qualified Name",id:"fully-qualified-name",level:2},{value:"Remarks",id:"remarks",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3}],m={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"fully-qualified-name"},"Fully Qualified Name"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#define SST_ELI_DOCUMENT_PORTS( ... )\n")),(0,o.kt)("h3",{id:"remarks"},"Remarks"),(0,o.kt)("p",null,"Document and register ports of a component."),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/elementinfo.h>\n")),(0,o.kt)("h2",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'// Port name, description, event type\nSST_ELI_DOCUMENT_PORTS(\n        { "port1_NAME", "port1_DESCRIPTION", {"port1_EVENT_TYPE"}},\n        { "port2_NAME", "port2_DESCRIPTION", {"port2_EVENT_TYPE"}},\n        { "port3_NAME", "port3_DESCRIPTION", {"port3_EVENT_TYPE"}},\n        ...\n        { "portN_NAME", "portN_DESCRIPTION", {"portN_EVENT_TYPE"}}\n    )\n')),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"portN_NAME")," - A unique name for the port."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"portN_DESCRIPTION")," - A description on what is communicated along the port. This value is shown when you run sst-info in the command line."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"portN_EVENT_TYPE")," - The fully qualified class name of events that are sent from/to the port."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"example-1"},"Example 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'SST_ELI_DOCUMENT_PORTS(\n{ "port", "Port on which cars are sent", {"sst.Interfaces.StringEvent"}}\n)\n')))}d.isMDXComponent=!0}}]);