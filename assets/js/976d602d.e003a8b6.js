"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1332],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9332:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],l={id:"constructor",title:"constructor"},i=void 0,c={unversionedId:"cpp/component/constructor",id:"cpp/component/constructor",title:"constructor",description:"Fully Qualified Name",source:"@site/../docs/cpp/component/constructor.md",sourceDirName:"cpp/component",slug:"/cpp/component/constructor",permalink:"/sst-website/docs/cpp/component/constructor",draft:!1,editUrl:"https://github.com/sstsimulator/sst-website/edit/master/docs/../docs/cpp/component/constructor.md",tags:[],version:"current",lastUpdatedBy:"Ryan Ledbetter",lastUpdatedAt:1539909317,formattedLastUpdatedAt:"Oct 19, 2018",frontMatter:{id:"constructor",title:"constructor"},sidebar:"C++",previous:{title:"Clock::Handler",permalink:"/sst-website/docs/cpp/clock/clock_handler"},next:{title:"configureLink()",permalink:"/sst-website/docs/cpp/component/configureLink"}},p={},u=[{value:"Fully Qualified Name",id:"fully-qualified-name",level:2},{value:"Remarks",id:"remarks",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"See Also",id:"see-also",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"fully-qualified-name"},"Fully Qualified Name"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::Component\n")),(0,o.kt)("h3",{id:"remarks"},"Remarks"),(0,o.kt)("p",null,"Typically not called directly. SST will build and call the constructor."),(0,o.kt)("p",null,"Typical tasks:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Read params from the project driver."),(0,o.kt)("li",{parentName:"ul"},"Process params."),(0,o.kt)("li",{parentName:"ul"},"Initialize SubComponents."),(0,o.kt)("li",{parentName:"ul"},"Register one or more clocks."),(0,o.kt)("li",{parentName:"ul"},"Configure ports."),(0,o.kt)("li",{parentName:"ul"},"Setup statistics.")),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h>\n")),(0,o.kt)("h2",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// base constructor, this is not usually overridden by custom components.\n// instead SST will call the constructor with SST::Params\nSST::Component::Component (SST::ComponentId_t id)\n\n// typical syntax for custom components.\nMyComponent::MyComponent (SST::ComponentId_t id, SST::Params& params) : SST::Component(id) { /* constructor code */ }\n")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"id")," - The id for the component, this is passed in by SST. Usually just need to pass it to the base SST::Component constructor."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"SST::Params&")," - The params set by the project driver."),(0,o.kt)("h2",{id:"return-value"},"Return Value"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"None")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"example-1"},"Example 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'carWash::carWash( SST::ComponentId_t id, SST::Params& params ) : SST::Component(id) {\n\n    output.init("carWash-" + getName() + "-> ", 1, 0, SST::Output::STDOUT);\n\n    // read params from the project driver\n    runTime = params.find<int64_t>("simulationTime", 24);\n    clock = params.find<std::string>("tickFreq", "60s");\n    \n    //process params\n    // Figure out the ticks per hour using the given tickFreq\n    if ( clock.compare(clock.length()-1, 1, "s") == 0 ) {\n        ticksPerHour = (60.0 / std::stof(clock)) * 60.0;\n    }else if ( clock.compare(clock.length()-2, 2, "Hz") == 0 ) {\n        ticksPerHour = std::stof(clock) * 60.0 * 60.0;\n    }\n    \n    // Initialize subcomponents\n    // Using this technique allows for 1 or more bays\n    SST::SubComponentSlotInfo* info = getSubComponentSlotInfo("bay");\n    if ( !info ) {\n        output.fatal(CALL_INFO, -1, "Must specify at least one bay.\\n");\n    }\n    info->createAll(subComps);\n    \n    // tell the simulator not to end without us\n    registerAsPrimaryComponent();\n    primaryComponentDoNotEndSim();\n\n    //register one or more clocks\n    // Set our Main Clock (register main clocks)\n    // This will automatically be called by the SST framework\n    registerClock(clock, new SST::Clock::Handler<carWash>(this, &carWash::tick));\n    \n    // Setup statistics\n    smallCarsWashed = registerStatistic<int>("smallCarsWashed");\n    largeCarsWashed = registerStatistic<int>("largeCarsWashed");\n    noCarEvents = registerStatistic<int>("noCarEvents");\n    smallCarsWaiting = registerStatistic<int>("smallCarsWaiting");\n    largeCarsWaiting = registerStatistic<int>("largeCarsWaiting");\n    \n    // configure ports\n    port = configureLink("port", new SST::Event::Handler<carWash>(this, &carWash::handleEvent));\n    if ( !port ) {\n        output.fatal(CALL_INFO, -1, "Failed to configure port \'port\'\\n");\n    }\n}\n')),(0,o.kt)("h2",{id:"see-also"},"See Also"))}d.isMDXComponent=!0}}]);