"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7719],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(n),u=a,f=p["".concat(l,".").concat(u)]||p[u]||m[u]||i;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var d=2;d<i;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},38933:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const i={title:"Handler"},s=void 0,o={unversionedId:"core/iface/StandardMem/handler",id:"core/iface/StandardMem/handler",title:"Handler",description:"StandardMem passes requests back to an endpoint using a handler. Handlers should use one of the above function signatures and are passed to the interface in its constructor. Calling this function denotes a transfer of responsibility for a Request from the interface to the endpoint. Once called, the interface should no longer access the request and the endpoint is responsible for subsequently deleteing the request if neccessary.",source:"@site/../docs/core/iface/StandardMem/handler.md",sourceDirName:"core/iface/StandardMem",slug:"/core/iface/StandardMem/handler",permalink:"/sst-docs/docs/core/iface/StandardMem/handler",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/handler.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"Handler"},sidebar:"core",previous:{title:"RequestHandler",permalink:"/sst-docs/docs/core/iface/StandardMem/reqhandler"},next:{title:"StringEvent",permalink:"/sst-docs/docs/core/iface/StringEvent/class"}},l={},d=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Defining a handler function in an endpoint",id:"example-1-defining-a-handler-function-in-an-endpoint",level:3},{value:"Example 2: Invoking a registered handler from a SimpleMem interface",id:"example-2-invoking-a-registered-handler-from-a-simplemem-interface",level:3},{value:"Header",id:"header",level:2}],c={toc:d},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void func(StandardMem::Request* request);\nvoid func(StandardMem::Request* request, dataT data);\n")),(0,a.kt)("p",null,"StandardMem passes requests back to an endpoint using a handler. Handlers should use one of the above function signatures and are passed to the interface in its constructor. Calling this function denotes a transfer of responsibility for a Request from the interface to the endpoint. Once called, the interface should no longer access the ",(0,a.kt)("inlineCode",{parentName:"p"},"request")," and the endpoint is responsible for subsequently ",(0,a.kt)("inlineCode",{parentName:"p"},"delete"),"ing the ",(0,a.kt)("inlineCode",{parentName:"p"},"request")," if neccessary. "),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Memory interface")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Memory interface must support the use of handlers."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Use of handlers is optional. If not used, endpoint must poll the interface regularly (e.g., during a clock handler)."),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"request")," (StandardMem::Request*) The event being passed from the interface to the endpoint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"data")," (dataT) A constant returned with the call. This can be used, for example, to differentiate which interface called the handler, when the same handler is used for multiple interfaces."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"returns")," none")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"example-1-defining-a-handler-function-in-an-endpoint"},"Example 1: Defining a handler function in an endpoint"),(0,a.kt)("p",null,"The following shows a handler used inside miranda's BaseCPU Component. The handler determines which request corresponds the response, does some bookkeeping updates, handles the response, and then deletes it. The ",(0,a.kt)("inlineCode",{parentName:"p"},"stdMemHandlers")," variable is an instance of Miranda's ",(0,a.kt)("inlineCode",{parentName:"p"},"StdMemHandler")," class which inherits from StandardMem's ",(0,a.kt)("a",{parentName:"p",href:"reqhandler"},(0,a.kt)("inlineCode",{parentName:"a"},"RequestHandler"))," visitor class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/miranda/mirandaCPU.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/miranda/mirandaCPU.cc"':!0},'/*\n * Called by memory interface to return an event to Miranda\n */\nvoid RequestGenCPU::handleEvent( Interfaces::StandardMem::Request* ev )\n{\n    out->verbose(CALL_INFO, 2, 0, "Recv event for processing from interface\\n");\n\n    // Match this response to its request, using ID\n    Interfaces::StandardMem::Request::id_t reqID = ev->getID();\n    std::map<Interfaces::StandardMem::Request::id_t, CPURequest*>::iterator reqFind = requestsInFlight.find(reqID);\n\n    if(reqFind == requestsInFlight.end()) {\n        out->fatal(CALL_INFO, -1, "Unable to find request %" PRIu64 " in request map.\\n", reqID);\n    } else{\n\n        /* Some bookkeeping updates, statistics tracking, output, etc here */\n\n        // Handle the response according to type\n        ev->handle(stdMemHandlers);\n\n        /* Some clean up for bookkeeping here */\n\n        delete ev;\n    }\n}\n')),(0,a.kt)("h3",{id:"example-2-invoking-a-registered-handler-from-a-simplemem-interface"},"Example 2: Invoking a registered handler from a SimpleMem interface"),(0,a.kt)("p",null,"This example shows how MemHierarchy's StandardInterface subcomponent, which implements the StandardMem interface, triggers callbacks using a handler with the specified signature. The function shown, ",(0,a.kt)("inlineCode",{parentName:"p"},"receive"),", is a callback handler registered on the StandardInterface's Link to the memory subsystem and is called when the Link delivers an SST Event."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from memHierarchy/standardInterface.cc"',title:'"Excerpt',from:!0,'memHierarchy/standardInterface.cc"':!0},'void StandardInterface::receive(SST::Event* ev)\n{\n    // MemEventBase is the memHierarchy library\'s internal event type\n    MemEventBase *me = static_cast<MemEventBase*>(ev);\n    StandardMem::Request* deliverReq = nullptr;\n    \n    /* \n     * Some logic to generate \'deliverReq\' which is the StandardMem::Request that should be passed \n     * back to the endpoint \n     */\n\n    delete me;\n\n    if (deliverReq) {\n#ifdef __SST_DEBUG_OUTPUT__\n        debug.debug(_L5_, "E: %-40" PRIu64 "  %-20s Req:Deliver   (%s)\\n", getCurrentSimCycle(), getName().c_str(), deliverReq->getString().c_str());\n#endif\n// highlight-next-line\n        (*recvHandler_)(deliverReq);\n    }\n\n}\n')),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stdMem.h>\n")))}m.isMDXComponent=!0}}]);