"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2945],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,f=m["".concat(d,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},24820:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"sendUntimedData"},o=void 0,s={unversionedId:"core/iface/SimpleNetwork/sendUntimedData",id:"core/iface/SimpleNetwork/sendUntimedData",title:"sendUntimedData",description:"This function should be used to send requests on a network during SST's untimed phases, init() and complete. This is not a pure virtual function, however, implementing it is recommended per the note below. See SST::sendUntimedData for additional detail on the use of this function.",source:"@site/../docs/core/iface/SimpleNetwork/sendUntimedData.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/sendUntimedData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/sendUntimedData",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/sendUntimedData.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"sendUntimedData"},sidebar:"core",previous:{title:"sendInitData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/sendInitData"},next:{title:"setNotifyOnReceive",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/setNotifyOnReceive"}},d={},l=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Parameters",id:"parameters-1",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Supporting sendUntimedData at a network interface",id:"example-1-supporting-senduntimeddata-at-a-network-interface",level:3},{value:"Example 2: Sending untimed data from an endpoint",id:"example-2-sending-untimed-data-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}],p={toc:l},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void sendUntimedData(Request* req);\n")),(0,r.kt)("p",null,"This function should be used to send requests on a network during SST's untimed phases, ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"complete"),". This is not a pure virtual function, however, implementing it is recommended per the note below. See ",(0,r.kt)("a",{parentName:"p",href:"../../link/sendUntimedData"},"SST::Link::sendUntimedData")," for additional detail on the use of this function."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sendInitData")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sendUntimedData")," functions are identical. The latter was added when SST added the ",(0,r.kt)("inlineCode",{parentName:"p"},"complete()")," phase to indicate that it could be used during ",(0,r.kt)("em",{parentName:"p"},"any")," untimed phase, not just ",(0,r.kt)("inlineCode",{parentName:"p"},"init()"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"sendInitData")," is deprecated as of SST 13, and ",(0,r.kt)("inlineCode",{parentName:"p"},"sendUntimedData")," will become required (pure virtual) in SST 14.")),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n","Must support sending events via this function during SST's ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"complete()")," phases. During ",(0,r.kt)("inlineCode",{parentName:"p"},"init()"),". This function is allowed to cause an error if it is called during ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," but a call to ",(0,r.kt)("inlineCode",{parentName:"p"},"isNetworkInitialized()")," would return ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n","May optionally use this function during ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"complete()")," to send events over the network. Must ",(0,r.kt)("em",{parentName:"p"},"not")," call this function during ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," until ",(0,r.kt)("inlineCode",{parentName:"p"},"isNetworkInitialized()")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"returns")," (Request*) A request if one was received, otherwise nullptr. The caller is responsible for deleting any Request returned.")),(0,r.kt)("h2",{id:"parameters-1"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"req")," (Request*) A ",(0,r.kt)("a",{parentName:"li",href:"Request"},"Request")," to send"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"returns")," none")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"example-1-supporting-senduntimeddata-at-a-network-interface"},"Example 1: Supporting sendUntimedData at a network interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"':!0},"void LinkControl::sendUntimedData(SST::Interfaces::SimpleNetwork::Request* req)\n{\n    if ( use_nid_map ) {\n        req->dest = nid_map[req->dest];\n    }\n    // Send the request on interface's link into the network using merlin's internal RtrEvent type\n    rtr_link->sendUntimedData(new RtrEvent(req, id, 0));\n}\n")),(0,r.kt)("h3",{id:"example-2-sending-untimed-data-from-an-endpoint"},"Example 2: Sending untimed data from an endpoint"),(0,r.kt)("p",null,"After the network is initialized, the endpoint uses ",(0,r.kt)("inlineCode",{parentName:"p"},"sendUntimedData()")," to broadcast a message containing the endpoint's name and network ID. The endpoints use these messages to build a map of available network destinations (",(0,r.kt)("inlineCode",{parentName:"p"},"IDmap"),"). "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Endpoint::init(unsigned int phase) {\n    net_iface->init(phase);\n    \n    bool networkReady = net_iface->isNetworkInitialized();\n\n    if (networkReady) {\n        /* Broadcast all the endpoint IDs so the endpoints can send data */\n        SST::Interfaces::SimpleNetwork::Request * req = new SST::Interfaces::SimpleNetwork::Request();\n        req->dest = SST::Interfaces::SimpleNetwork::INIT_BROADCAST_ADDR; /* Broadcast */\n        req->src = net_iface->getEndpointID();\n        \n        // Create an event with this endpoint's name so the other endpoints can map our ID to our name\n        SST::Interfaces::StringEvent* strEv = new SST::Interfaces::StringEvent(getName());\n        req->givePayload(strEv);\n\n        //highlight-next-line\n        net_iface->sendUntimedData(req); \n\n        while (SST::Interfaces::SimpleNetwork::Request* req = net_iface->recvInitData()) {\n            /* set up a mapping table of the other endpoints' names -> IDs */\n            SST::Interfaces::StringEvent* name = static_cast<SST::Interfaces::StringEvent*>(req->takePayload());\n            IDMap.insert(std::make_pair(name->getString(), req->src));\n            delete req;\n            delete name; /* Have to delete separately from req since we used takePayload() to extract it */\n        }\n    }\n}\n")),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}c.isMDXComponent=!0}}]);