"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4815],{31763:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>i});var n=r(85893),s=r(11151);const o={title:"operator=="},a=void 0,c={id:"core/unitalgebra/compeq",title:"operator==",description:"Compare if this object is equal to the argument v.",source:"@site/../docs/core/unitalgebra/compeq.md",sourceDirName:"core/unitalgebra",slug:"/core/unitalgebra/compeq",permalink:"/sst-docs/docs/core/unitalgebra/compeq",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/unitalgebra/compeq.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"operator=="},sidebar:"core",previous:{title:"operator/=",permalink:"/sst-docs/docs/core/unitalgebra/operatordiv"},next:{title:"operator!=",permalink:"/sst-docs/docs/core/unitalgebra/compneq"}},l={},i=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"bool operator==(const UnitAlgebra& v) const;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Compare if this object is equal to the argument ",(0,n.jsx)(t.code,{children:"v"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"v"})," (UnitAlgebra) Object to compare to"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"returns"})," (bool) Whether this object is equal to the argument."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'SST::UnitAlgebra* num0 = new UnitAlgebra("3bps");\nSST::UnitAlgebra* num1 = new UnitAlgebra("3b/s");\n\nsst_assert(num0 == num1, CALL_INFO, -1, "Error: These really should be the same!!");\n'})}),"\n",(0,n.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/unitalgebra.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},11151:(e,t,r)=>{r.d(t,{Z:()=>c,a:()=>a});var n=r(67294);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);