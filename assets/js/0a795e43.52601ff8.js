"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5172],{62035:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var t=c(85893),l=c(11151);const o={title:"Clock Handlers"},r=void 0,s={id:"core/clock/clock_handler",title:"Clock Handlers",description:"Clock handlers must follow the function definitions above. When the SSTCore invokes a handler, it passes in the current cycle count, and optionally, an additional argument provided by the user. The handler function should return a boolean value indicating whether the clock should be disabled (true) or stay enabled (false). Disabling a clock function through the handler is more efficient than using unregisterClock().",source:"@site/../docs/core/clock/clock_handler.md",sourceDirName:"core/clock",slug:"/core/clock/clock_handler",permalink:"/sst-docs/docs/core/clock/clock_handler",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/clock/clock_handler.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1695940750,formattedLastUpdatedAt:"Sep 28, 2023",frontMatter:{title:"Clock Handlers"},sidebar:"core",previous:{title:"Clock",permalink:"/sst-docs/docs/core/clock/class"},next:{title:"Introduction",permalink:"/sst-docs/docs/core/component/introduction"}},a={},i=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool handler( Cycle t cycle );\nbool handler( Cycle_t cycle, dataT data);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Clock handlers must follow the function definitions above. When the SSTCore invokes a handler, it passes in the current cycle count, and optionally, an additional argument provided by the user. The handler function should return a boolean value indicating whether the clock should be disabled (true) or stay enabled (false). Disabling a clock function through the handler is more efficient than using ",(0,t.jsx)(n.a,{href:"../component/time/unregisterClock",children:(0,t.jsx)(n.code,{children:"unregisterClock()"})}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"cycle"})," (Cycle_t) Current clock cycle count"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"data"})," (dataT) Optional, arbitrary data that the handler is created with"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (bool) Whether the clock should be disabled (true) or not (false)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["In this example, a component has two clock handlers, ",(0,t.jsx)(n.code,{children:"mainTick"})," and ",(0,t.jsx)(n.code,{children:"otherTick"}),". Each is registered to a different clock."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/simpleElementExample/basicClocks.h"',children:"class basicClocks : public SST::Component\n{\npublic:\n    /* ELI and un-related functins omitted for brevity */\n    basicClocks(SST::ComponentId_t id, SST::Params& params);\nprivate:\n    //Handler function for one clock\n    bool mainTick(SST::Cycle_t cycle);\n\n    //Handler function for another clock\n    bool otherTick(SST::Cycle_t cycle, uint32_t id);\n\n    // Clock handler handle\n    Clock::HandlerBase* clock2Handler;\n};\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/simpleElementExample/basicClocks.cc"',children:"basicClocks::basicClocks(ComponentId_t id, Params& params) : Component(id)\n{\n    /* Code to read parameters for the clock frequencies clock0Freq, clock1Freq, clock2Freq */\n\n    // Register a clock at clock0Freq to call back the 'mainTick' function\n    registerClock(clock0Freq, new Clock::Handler<basicClocks>(this, &basicClocks::mainTick));\n\n    // Register a clock at clock1Freq to call back the 'otherTick' function. \n    // THe handler also has a uint32_t (our arbitrary data) and this handler will pass a '1' in that field\n    clock1converter = registerClock(clock1Freq,\n        new Clock::Handler<basicClocks, uint32_t>(this, &basicClocks::otherTick, 1));\n\n    // Register a clock at clock2Freq to also call back the 'otherTick' function. This will pass a '2' to the \n    // handler so we can differentiate when clock1 calls the handler vs. clock2\n    Clock::HandlerBase* handler = new Clock::Handler<basicClocks, uint32_t>(tis, &basicClocks::otherTick, 2);\n    clock2converter = registerClock(clock2Freq, handler);\n\n    // How many cycles we'll run the simulation\n    cycleCount = 100;\n}\n\nbool basicClocks::mainTick( Cycle_t cycle )\n{\n    // Do something when the clock is called\n    cycleCount--;\n\n    if (cycleCount == 0) {\n        // Let simulation end, unregister this clock since we have nothing else to do\n        primaryComponentOKToEndSim();\n        return true;\n    } else {\n        // Keep the clock registered\n        return false;\n    }\n}\n\nbool basicClocks::otherTick ( Cycle_t cycle, uint32_t id )\n{\n    // Do something when the clock is called, maybe do something different if id=1 vs id=2\n    if (cycle == 10)\n        return true; // Stop calling this handler after 10 cycles\n    else\n        return false;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,c)=>{c.d(n,{Z:()=>s,a:()=>r});var t=c(67294);const l={},o=t.createContext(l);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);