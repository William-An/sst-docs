"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1275],{90176:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var s=n(85893),a=n(11151);const r={title:"getValue"},i=void 0,l={id:"core/unitalgebra/getValue",title:"getValue",description:"Return the value portion of the UnitAlgebra as an sstbignum, which is a decimal fixed point format used internally in SST. This discards the units and returns the value in its base units (without SI prefixes).",source:"@site/../docs/core/unitalgebra/getValue.md",sourceDirName:"core/unitalgebra",slug:"/core/unitalgebra/getValue",permalink:"/sst-docs/docs/core/unitalgebra/getValue",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/unitalgebra/getValue.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"getValue"},sidebar:"core",previous:{title:"getRoundedValue",permalink:"/sst-docs/docs/core/unitalgebra/getRoundedValue"},next:{title:"hasUnits",permalink:"/sst-docs/docs/core/unitalgebra/hasUnits"}},o={},u=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"sst_big_num getValue() const;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the value portion of the UnitAlgebra as an sst_big_num, which is a decimal fixed point format used internally in SST. This discards the units and returns the value in its base units (without SI prefixes)."}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"returns"})," (sst_big_num) The value portion of the UnitAlgebra as an int64_t."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'SST::UnitAlgebra* num = new UnitAlgebra("2GHz");\nsst_big_num hz = num->getRoundedValue();\n'})}),"\n",(0,s.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/unitalgebra.h>\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>i});var s=n(67294);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);