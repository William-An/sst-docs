"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4330],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>y});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=a.createContext({}),c=function(e){var r=a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=c(e.components);return a.createElement(i.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},d=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=n,y=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return t?a.createElement(y,s(s({ref:r},p),{},{components:t})):a.createElement(y,s({ref:r},p))}));function y(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,s=new Array(o);s[0]=d;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[u]="string"==typeof e?e:n,s[1]=l;for(var c=2;c<o;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},25206:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(87462),n=(t(67294),t(3905));const o={title:"is_value_array"},s=void 0,l={unversionedId:"core/params/is_value_array",id:"core/params/is_value_array",title:"is_value_array",description:"Returns whether the value associated with the given key is a valid array format (i.e., can be parsed correctly by findarray).",source:"@site/../docs/core/params/is_value_array.md",sourceDirName:"core/params",slug:"/core/params/is_value_array",permalink:"/sst-docs/docs/core/params/is_value_array",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/params/is_value_array.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"is_value_array"},sidebar:"core",previous:{title:"empty",permalink:"/sst-docs/docs/core/params/empty"},next:{title:"print_all_params",permalink:"/sst-docs/docs/core/params/print_all_params"}},i={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}],p={toc:c},u="wrapper";function m(e){let{components:r,...t}=e;return(0,n.kt)(u,(0,a.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"bool is_value_array(const std::string& key) const;\n")),(0,n.kt)("p",null,"Returns whether the value associated with the given key is a valid array format (i.e., can be parsed correctly by ",(0,n.kt)("a",{parentName:"p",href:"find_array"},(0,n.kt)("inlineCode",{parentName:"a"},"find_array")),")."),(0,n.kt)("h2",{id:"parameters"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"key")," (std::string) Key whose value should be checked"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"returns")," (bool) Whether the corresponding value is an array format or not.")),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'example::example(ComponentId_t id, Params& params) : Component(id)\n{\n    output = new SST::Output("", 1, 0, SST::Output::STDOUT);\n    //highlight-next-line\n    if (!params.is_value_array("names")) {\n        out->fatal(CALL_INFO, -1, "Error: The parameter \'names\' should be an array but is not formatted correctly. Is it enclosed in square brackets?");\n    }\n}\n')),(0,n.kt)("h2",{id:"header"},"Header"),(0,n.kt)("p",null,"The Params header file is included with any SST object that supports Params."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h> // or\n#include <sst/core/params.h> // if not included in base class\n")))}m.isMDXComponent=!0}}]);