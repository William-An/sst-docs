"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4002],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),v=a,g=m["".concat(o,".").concat(v)]||m[v]||u[v]||l;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8362:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>v,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],s={id:"StringEvent",title:"StringEvent"},o=void 0,p={unversionedId:"cpp/events/StringEvent",id:"cpp/events/StringEvent",title:"StringEvent",description:"Fully Qualified Name",source:"@site/../docs/cpp/events/StringEvent.md",sourceDirName:"cpp/events",slug:"/cpp/events/StringEvent",permalink:"/sst-website/docs/cpp/events/StringEvent",draft:!1,editUrl:"https://github.com/sstsimulator/sst-website/edit/master/docs/../docs/cpp/events/StringEvent.md",tags:[],version:"current",lastUpdatedBy:"Nick Fleischmann",lastUpdatedAt:1540350786,formattedLastUpdatedAt:"Oct 24, 2018",frontMatter:{id:"StringEvent",title:"StringEvent"},sidebar:"C++",previous:{title:"SST_ELI_REGISTER_SUBCOMPONENT",permalink:"/sst-website/docs/cpp/eli/sst_eli_register_subcomponent"},next:{title:"configureLink()",permalink:"/sst-website/docs/cpp/link/configureLink"}},c={},u=[{value:"Fully Qualified Name",id:"fully-qualified-name",level:2},{value:"Remarks",id:"remarks",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Functions",id:"functions",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"getString",id:"getstring",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Return Value",id:"return-value-1",level:4},{value:"Examples",id:"examples",level:2},{value:"Example 1: Constructor #1",id:"example-1-constructor-1",level:3},{value:"Example 2: Constructor #2",id:"example-2-constructor-2",level:3},{value:"Example 2: getString()",id:"example-2-getstring",level:3}],m={toc:u};function v(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"fully-qualified-name"},"Fully Qualified Name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::Interfaces::StringEvent\n")),(0,l.kt)("h3",{id:"remarks"},"Remarks"),(0,l.kt)("p",null,"A simple event to pass a string between two ports."),(0,l.kt)("h2",{id:"requirements"},"Requirements"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stringEvent.h>\n")),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("h3",{id:"constructor"},"Constructor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// #1\nStringEvent(const std::string& str)\n\n// #2 - copy an existing StrinEvent reference or pointer\nStringEvent(const StringEvent& me)\nStringEvent(const StringEvent* me)\n\n\n")),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"str")," - The string contents of this event."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"me")," - The StringEvent to copy."),(0,l.kt)("h4",{id:"return-value"},"Return Value"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"None")),(0,l.kt)("h3",{id:"getstring"},"getString"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"const std::string& getString()\n")),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"None")),(0,l.kt)("h4",{id:"return-value-1"},"Return Value"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"const std::string&")," - The contents of the StringEvent."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"example-1-constructor-1"},"Example 1: Constructor #1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'cpuLinks_[i]->sendInitData(new Interfaces::StringEvent("SST::MemHierarchy::MemEvent"));\n')),(0,l.kt)("h3",{id:"example-2-constructor-2"},"Example 2: Constructor #2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'StringEvent myEvent = new StringEvent("Hello");\nStringEvent myEventCopy = new StringEvent(myEvent);\n')),(0,l.kt)("h3",{id:"example-2-getstring"},"Example 2: getString()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'StringEvent myEvent = new StringEvent("Hello");\nstd::string str = myEvent.getString();\n')))}v.isMDXComponent=!0}}]);