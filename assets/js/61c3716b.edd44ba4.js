"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6376],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),i=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=i(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=i(r),d=a,f=m["".concat(u,".").concat(d)]||m[d]||c[d]||l;return r?n.createElement(f,o(o({ref:t},s),{},{components:r})):n.createElement(f,o({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=m;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var i=2;i<l;i++)o[i]=r[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9484:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>d,frontMatter:()=>p,metadata:()=>i,toc:()=>c});var n=r(7462),a=r(3366),l=(r(7294),r(3905)),o=["components"],p={id:"verbose",title:"verbose()"},u=void 0,i={unversionedId:"cpp/output/verbose",id:"cpp/output/verbose",title:"verbose()",description:"Fully Qualified Name",source:"@site/../docs/cpp/output/verbose.md",sourceDirName:"cpp/output",slug:"/cpp/output/verbose",permalink:"/sst-website/docs/cpp/output/verbose",draft:!1,editUrl:"https://github.com/sstsimulator/sst-website/edit/master/docs/../docs/cpp/output/verbose.md",tags:[],version:"current",lastUpdatedBy:"Ryan Ledbetter",lastUpdatedAt:1539909317,formattedLastUpdatedAt:"Oct 19, 2018",frontMatter:{id:"verbose",title:"verbose()"},sidebar:"C++",previous:{title:"output()",permalink:"/sst-website/docs/cpp/output/"},next:{title:"MarsagliaRNG",permalink:"/sst-website/docs/cpp/rng/MarsagliaRNG"}},s={},c=[{value:"Fully Qualified Name",id:"fully-qualified-name",level:2},{value:"Remarks",id:"remarks",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"See Also",id:"see-also",level:2}],m={toc:c};function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"fully-qualified-name"},"Fully Qualified Name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::Output::verbose()\n")),(0,l.kt)("h3",{id:"remarks"},"Remarks"),(0,l.kt)("p",null,"Output the verbose message with formatting as specified by the format parameter."),(0,l.kt)("p",null,"Output will occur only if specified output_level and output_bits meet criteria defined in the call to the ",(0,l.kt)("a",{parentName:"p",href:"/sst-website/docs/cpp/output/init"},"init function"),". The output will also be prepended with the expanded prefix set in the call to the ",(0,l.kt)("a",{parentName:"p",href:"/sst-website/docs/cpp/output/init"},"init function"),"."),(0,l.kt)("h2",{id:"requirements"},"Requirements"),(0,l.kt)("p",null,"Main definition"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/output.h>\n")),(0,l.kt)("p",null,"Also included in the following"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/simulation.h>\n#include <sst/core/component.h>\n")),(0,l.kt)("h2",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void SST::Output::verbose(uint32_t line, const char* file, const char* func, uint32_t output_level, uint32_t output_bits, const char* format, ... )\n")),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"line")," - Line number of calling function (use CALL_INFO macro)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"file")," - File name calling function (use CALL_INFO macro)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"func")," - Function name calling function (use CALL_INFO macro)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"output_level")," - For output to occur, output_level must be less than or equal to verbose_level set in the call to the ",(0,l.kt)("a",{parentName:"p",href:"/sst-website/docs/cpp/output/init"},"init function"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"output_bits")," - The Output object will only output the message if the set bits of the output_bits parameter are set in the verbose_mask (see the ",(0,l.kt)("a",{parentName:"p",href:"/sst-website/docs/cpp/output/init"},"init function"),"). It uses this logic: if (~verbose_mask & output_bits == 0) then output is enabled."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"format")," - Format string. All valid formats for printf are available."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"...")," - Argument for format."),(0,l.kt)("h2",{id:"return-value"},"Return Value"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"None")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"example-1"},"Example 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'out->verbose(CALL_INFO, 16, 0, "Configured to print rank to block maps\\n");\n')),(0,l.kt)("h3",{id:"example-2"},"Example 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'output->verbose(CALL_INFO, 1, 0, "Configuring for %" PRIu32 " memory levels; default level is %" PRIu32 ".\\n", memoryLevels, defaultLevel);\n')),(0,l.kt)("h2",{id:"see-also"},"See Also"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/init"},"init()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/"},"output()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/debug"},"debug()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/output/fatal"},"fatal()"))))}d.isMDXComponent=!0}}]);