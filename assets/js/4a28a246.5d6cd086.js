"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2824],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,k=m["".concat(o,".").concat(u)]||m[u]||c[u]||i;return a?n.createElement(k,s(s({ref:t},d),{},{components:a})):n.createElement(k,s({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:r,s[1]=l;for(var p=2;p<i;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},87676:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={title:"CustomReq"},s=void 0,l={unversionedId:"core/iface/StandardMem/req/customreq",id:"core/iface/StandardMem/req/customreq",title:"CustomReq",description:"Response Type StandardMem::CustomResp  &nbsp;",source:"@site/../docs/core/iface/StandardMem/req/customreq.md",sourceDirName:"core/iface/StandardMem/req",slug:"/core/iface/StandardMem/req/customreq",permalink:"/sst-docs/docs/core/iface/StandardMem/req/customreq",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/req/customreq.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"CustomReq"},sidebar:"core",previous:{title:"InvNotify",permalink:"/sst-docs/docs/core/iface/StandardMem/req/invnotify"},next:{title:"CustomResp",permalink:"/sst-docs/docs/core/iface/StandardMem/req/customresp"}},o={},p=[{value:"Member variables",id:"member-variables",level:2},{value:"Member functions",id:"member-functions",level:2},{value:"Defined in <code>Request</code> base class",id:"defined-in-request-base-class",level:3},{value:"Virtual functions inherited from the <code>Request</code> base class",id:"virtual-functions-inherited-from-the-request-base-class",level:3},{value:"makeResponse",id:"makeresponse",level:4},{value:"needsResponse",id:"needsresponse",level:4},{value:"convert",id:"convert",level:4},{value:"handle",id:"handle",level:4},{value:"getString",id:"getstring",level:4},{value:"Header",id:"header",level:2}],d={toc:p},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Constructor\nSST::Interfaces::StandardMem::CustomReq(CustomData* data, flags_t flags = 0, Addr iPtr = 0, \n    uint32_t tid = 0);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response Type")," ",(0,r.kt)("a",{parentName:"p",href:"customresp"},"StandardMem::CustomResp"),"  ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Needs Response")," ",(0,r.kt)("inlineCode",{parentName:"p"},"true")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomReq")," class allows implementations (endpoints and/or memory systems) to add additional custom memory transactions to the set provided by StandardMem. The class wraps a generic data structure, ",(0,r.kt)("a",{parentName:"p",href:"customdata"},(0,r.kt)("inlineCode",{parentName:"a"},"CustomData"))," which can be extended by endpoints and the memory system to dynmaically add new request types to the StandardInterface. The ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomData")," class provides a minimal set of functions to enable a memory system to route requests by address, create responses, and generate debug/output for the CustomReq. "),(0,r.kt)("h2",{id:"member-variables"},"Member variables"),(0,r.kt)("p",null,"Including those inherited from the ",(0,r.kt)("inlineCode",{parentName:"p"},"StandardMem::Request")," base class, ",(0,r.kt)("inlineCode",{parentName:"p"},"StandardMem::CustomReq")," includes the following member variables."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"id")," (id_t) A request or response identifier. A request and its response contain the same identifier."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"flags")," (flags_t) A 32-bit vector indicating any special flags added to the request"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"data")," (CustomData*) A custom data structure encapsulating any custom fields provided by the custom request"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"iPtr")," (Addr) An instruction pointer. This is optional metadata."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"tid")," (uint32_t) An optional thread ID, can be used by memory systems if needed")),(0,r.kt)("h2",{id:"member-functions"},"Member functions"),(0,r.kt)("h3",{id:"defined-in-request-base-class"},"Defined in ",(0,r.kt)("a",{parentName:"h3",href:"class"},(0,r.kt)("inlineCode",{parentName:"a"},"Request"))," base class"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getId")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setNoncacheable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetNoncacheable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getNoncacheable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getSuccess")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setFail")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetFail")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFail")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setTrace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetTrace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getTrace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setFlag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unsetFlag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFlag")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clearAllFlags")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getAllFlags")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getFlagString"))),(0,r.kt)("h3",{id:"virtual-functions-inherited-from-the-request-base-class"},"Virtual functions inherited from the ",(0,r.kt)("a",{parentName:"h3",href:"class"},(0,r.kt)("inlineCode",{parentName:"a"},"Request"))," base class"),(0,r.kt)("h4",{id:"makeresponse"},"makeResponse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Request* makeResponse();\n")),(0,r.kt)("p",null,"Creates a ",(0,r.kt)("a",{parentName:"p",href:"customresp"},"CustomResp")," initialized as a response to this CustomReq request. The ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," field in the response is populated by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"makeResponse()")," on this request's custom data object."),(0,r.kt)("h4",{id:"needsresponse"},"needsResponse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool needsResponse();\n")),(0,r.kt)("p",null,"Returns the result of calling ",(0,r.kt)("inlineCode",{parentName:"p"},"needsResponse()")," on the CustomData object ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),"."),(0,r.kt)("h4",{id:"convert"},"convert"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::Event* convert(RequestConverter* converter);\n")),(0,r.kt)("p",null,"Invokes ",(0,r.kt)("inlineCode",{parentName:"p"},"convert()")," on the supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"converter")," visitor class to return an SST::Event in an implementation-specific format."),(0,r.kt)("h4",{id:"handle"},"handle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void handle(RequestHandler* handler) =0;\n")),(0,r.kt)("p",null,"Invokes ",(0,r.kt)("inlineCode",{parentName:"p"},"handle()")," on the supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," visitor class to handle the event according to type."),(0,r.kt)("h4",{id:"getstring"},"getString"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual std::string getString() =0;\n")),(0,r.kt)("p",null,"Returns a formatted string listing the fields of the CustomReq request as well as the result of calling ",(0,r.kt)("inlineCode",{parentName:"p"},"getString()")," on the the CustomData object ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'Example Output:\n# In this example, data->getString() returns "atomic increment at addr 0x7ffffcf0"\nID: 133, Type: CustomReq, Flags: [],  atomic increment at addr 0x7ffffcf0, InstPtr: 0x0, ThreadID: 0\n')),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stdMem.h>\n")))}c.isMDXComponent=!0}}]);