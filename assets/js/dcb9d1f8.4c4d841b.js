"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9760],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>b});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=a.createContext({}),u=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},i=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,p=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),c=u(r),d=o,b=c["".concat(p,".").concat(d)]||c[d]||m[d]||n;return r?a.createElement(b,s(s({ref:t},i),{},{components:r})):a.createElement(b,s({ref:t},i))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,s=new Array(n);s[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:o,s[1]=l;for(var u=2;u<n;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},459:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>b,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var a=r(7462),o=r(3366),n=(r(7294),r(3905)),s=["components"],l={title:"setVerboseMask"},p=void 0,u={unversionedId:"core/output/setVerboseMask",id:"core/output/setVerboseMask",title:"setVerboseMask",description:"Sets the Output's verbosemask for debug() and verbose(). Output object will only output the message if the set bits of those calls' outputbits parameter are also set in the verbose_mask.",source:"@site/../docs/core/output/setVerboseMask.md",sourceDirName:"core/output",slug:"/core/output/setVerboseMask",permalink:"/sst-website/docs/core/output/setVerboseMask",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/output/setVerboseMask.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"setVerboseMask"},sidebar:"Core API",previous:{title:"getVerboseMask",permalink:"/sst-website/docs/core/output/getVerboseMask"},next:{title:"getDefaultObject",permalink:"/sst-website/docs/core/output/getDefaultObject"}},i={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],m={toc:c},d="wrapper";function b(e){var t=e.components,r=(0,o.Z)(e,s);return(0,n.kt)(d,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"void setVerboseMask(uint32_t verbose_mask);\n")),(0,n.kt)("p",null,"Sets the Output's verbose_mask for ",(0,n.kt)("a",{parentName:"p",href:"debug"},(0,n.kt)("inlineCode",{parentName:"a"},"debug()"))," and ",(0,n.kt)("a",{parentName:"p",href:"verbose"},(0,n.kt)("inlineCode",{parentName:"a"},"verbose()")),". Output object will only output the message if the set bits of those calls' ",(0,n.kt)("inlineCode",{parentName:"p"},"output_bits")," parameter are also set in the verbose_mask."),(0,n.kt)("p",null,"The logic is:\nif (",(0,n.kt)("inlineCode",{parentName:"p"},"verbose_mask & output_bits == 0"),") then output is enabled"),(0,n.kt)("h2",{id:"parameters"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"verbose_mask")," (uint32_t) The mask to set the Output's verbose_mask to"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"returns")," none")),(0,n.kt)("h2",{id:"examples"},"Examples"),(0,n.kt)("h3",{id:"example-1"},"Example 1"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"out->setVerboseMask(3); // Output will only occur on debug/verbose if the mask bits match\n")),(0,n.kt)("h2",{id:"header"},"Header"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/output.h>\n")))}b.isMDXComponent=!0}}]);