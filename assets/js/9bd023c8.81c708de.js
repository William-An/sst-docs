"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6472],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=s(t),d=o,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||c;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,i=new Array(c);i[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[m]="string"==typeof e?e:o,i[1]=a;for(var s=2;s<c;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5372:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var r=t(7462),o=t(3366),c=(t(7294),t(3905)),i=["components"],a={title:"emergencyShutdown"},l=void 0,s={unversionedId:"core/component/lifecycle/emergencyShutdown",id:"core/component/lifecycle/emergencyShutdown",title:"emergencyShutdown",description:"\x3c!---",source:"@site/../docs/core/component/lifecycle/emergencyShutdown.md",sourceDirName:"core/component/lifecycle",slug:"/core/component/lifecycle/emergencyShutdown",permalink:"/sst-docs/docs/core/component/lifecycle/emergencyShutdown",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/component/lifecycle/emergencyShutdown.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1675712938,formattedLastUpdatedAt:"Feb 6, 2023",frontMatter:{title:"emergencyShutdown"},sidebar:"Core API",previous:{title:"finish",permalink:"/sst-docs/docs/core/component/lifecycle/finish"},next:{title:"printStatus",permalink:"/sst-docs/docs/core/component/lifecycle/printStatus"}},p={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],u={toc:m},d="wrapper";function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,c.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void emergencyShutdown();\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Availability:")," Component, SubComponent, ComponentExtension"),(0,c.kt)("p",null,"This function is called by the SSTCore on each Component if SST encounters a SIGINT or SIGTERM. Common uses include cleaning up external state and generating additional error or debug information."),(0,c.kt)("admonition",{title:"Important",type:"info"},(0,c.kt)("p",{parentName:"admonition"},"This function is called by SSTCore on Components only. Components, SubComponents, and ComponentExtensions must in turn manually call ",(0,c.kt)("inlineCode",{parentName:"p"},"emergencyShutdown()")," on their SubComponents and ComponentExtensions. This allows developers to control both whether those objects participate in EmergencyShutdown, and the order in which they participate. ")),(0,c.kt)("h2",{id:"parameters"},"Parameters"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"returns")," none")),(0,c.kt)("h2",{id:"examples"},"Examples"),(0,c.kt)("h3",{id:"example-1"},"Example 1"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},'/********* basicSimLifeCycle.h **********/\n#include <sst/core/component.h>\n#include <sst/core/link.h>\n\nclass basicSimLifeCycle : public SST::Component {\n  public:\n    \n    /** ELI removed for brevity, would be here **/\n\n    basicSimLifeCycle(SST::ComponentId_t id, SST::Params& params);\n    ~basicSimLifeCycle();\n\n    virtual void emergencyShutdown() override;\n\n    /** Other public functions here */\n\n  private:\n\n    // Component state\n    unsigned eventsReceived;                // Number of events we\'ve received\n    unsigned eventsForwarded;               // Number of events we\'ve forwarded\n    unsigned eventsSent;                    // Number of events we\'ve sent (initiated)\n\n    // SST Output object, for printing, error messages, etc.\n    SST::Output* out;\n\n    /** Additional private class members here */\n}\n\n/********* basicSimLifeCycle.cc *********/\n#include "sst_config.h"\n#include "basicSimLifeCycle.h"\n\nvoid basicSimLifeCycle::emergencyShutdown() \n{\n    out->output("Uh-oh, my name is %s and I have to quit. I sent %u messages.\\n", getName().c_str(), eventsSent);\n}\n')),(0,c.kt)("h2",{id:"header"},"Header"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n")))}f.isMDXComponent=!0}}]);