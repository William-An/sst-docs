"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=i,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},63462:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={title:"recv"},l=void 0,o={unversionedId:"core/iface/SimpleNetwork/recv",id:"core/iface/SimpleNetwork/recv",title:"recv",description:"Receive a Request from the network on the specified virtual network (vn).",source:"@site/../docs/core/iface/SimpleNetwork/recv.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/recv",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/recv",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/recv.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"recv"},sidebar:"core",previous:{title:"isNetworkInitialized",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/isNetworkInitialized"},next:{title:"recvInitData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/recvInitData"}},c={},s=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing recv() in a SimpleNetwork interface",id:"example-1-implementing-recv-in-a-simplenetwork-interface",level:3},{value:"Example 2: Polling SimpleNetwork from an endpoint",id:"example-2-polling-simplenetwork-from-an-endpoint",level:3},{value:"Example 3: Using a callback from an endpoint to receive a notification when a request is received",id:"example-3-using-a-callback-from-an-endpoint-to-receive-a-notification-when-a-request-is-received",level:3},{value:"Header",id:"header",level:2}],p={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual Request* recv(int vn) = 0;\n")),(0,i.kt)("p",null,"Receive a Request from the network on the specified virtual network (",(0,i.kt)("inlineCode",{parentName:"p"},"vn"),")."),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","Return a Request that was received on virtual network ",(0,i.kt)("inlineCode",{parentName:"p"},"vn"),". If no Request exists, return ",(0,i.kt)("inlineCode",{parentName:"p"},"nullptr"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","Call this function to get a request from the network."),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"vn")," (int) Virtual network to receive on"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns")," (Request*) Request that has been delivered or ",(0,i.kt)("inlineCode",{parentName:"li"},"nullptr")," if none is available. Caller is responsible for deleting any event returned.")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"example-1-implementing-recv-in-a-simplenetwork-interface"},"Example 1: Implementing recv() in a SimpleNetwork interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"':!0},"\n// Returns nullptr if no event in input_buf[vn]. Otherwise, returns\n// the next event.\nSST::Interfaces::SimpleNetwork::Request* LinkControl::recv(int vn) {\n    if ( input_queues[vn].size() == 0 ) return nullptr; /* No events */\n\n    RtrEvent* event = input_queues[vn].front();\n    input_queues[vn].pop();\n\n    /* Some bookkeeping to manage network credits for this event */\n\n    SST::Interfaces::SimpleNetwork::Request* ret = event->takeRequest();\n    if ( use_nid_map ) ret->dest = logical_nid; /* Merlin is maintaining aliases for network IDs */\n    delete event;\n\n    return ret; /* Return the Request */\n}\n")),(0,i.kt)("h3",{id:"example-2-polling-simplenetwork-from-an-endpoint"},"Example 2: Polling SimpleNetwork from an endpoint"),(0,i.kt)("p",null,"In this example, the endpoint calls ",(0,i.kt)("inlineCode",{parentName:"p"},"recv()")," in a clock handler function to check if anything has been received."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"bool Endpoint::clockTick(SimCycle_t cycle)\n{\n    SST::Interfaces::SimpleNetwork::Request* req = net_iface->recv(0);\n    if (req)\n    {\n        /* Got something - code to handle it here */\n        delete req; /* Delete the request when we're done with it */\n    }\n    return false;\n}\n\n")),(0,i.kt)("h3",{id:"example-3-using-a-callback-from-an-endpoint-to-receive-a-notification-when-a-request-is-received"},"Example 3: Using a callback from an endpoint to receive a notification when a request is received"),(0,i.kt)("p",null,"In this example, the endpoint registers a callback function, ",(0,i.kt)("inlineCode",{parentName:"p"},"requestAvailable()")," with a SimpleNetwork interface. Inside the callback, the endpoint uses ",(0,i.kt)("inlineCode",{parentName:"p"},"recv()")," to acquire a Request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Endpoint::Endpoint( ComponentId_t id, Params& params ) : Component(id)\n{\n    ...\n    net_iface->setNotifyOnRecv(new SimpleNetwork::Handler<Endpoint>(this, &Endpoint::requestAvailable));\n    ...\n}\n\nbool Endpoint::requestAvailable(int vn) {\n    //highlight-next-line\n    SST::Interfaces::SimpleNetwork::Request* req = net_iface->recv(vn);\n    if (req) {\n        /* Got something, code to handle it here */\n        delete req;\n    } else {\n        /* That's strange, we were notified there was a request and it disappeared! */\n    }\n}\n")),(0,i.kt)("h2",{id:"header"},"Header"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}u.isMDXComponent=!0}}]);