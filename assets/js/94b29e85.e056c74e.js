"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5112],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?i.createElement(k,o(o({ref:t},c),{},{components:n})):i.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96283:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(87462),r=(n(67294),n(3905));const a={title:"isNetworkInitialized"},o=void 0,l={unversionedId:"core/iface/SimpleNetwork/isNetworkInitialized",id:"core/iface/SimpleNetwork/isNetworkInitialized",title:"isNetworkInitialized",description:"This function is used during SST's init() phase to give a network time to initialize itself prior to accepting requests. Once the network is initialized the function should return true. The following must be the case at that point:",source:"@site/../docs/core/iface/SimpleNetwork/isNetworkInitialized.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/isNetworkInitialized",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/isNetworkInitialized",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/isNetworkInitialized.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"isNetworkInitialized"},sidebar:"core",previous:{title:"getLinkBW",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/getLinkBW"},next:{title:"recv",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/recv"}},s={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: A network interface using isNetworkIntialized",id:"example-1-a-network-interface-using-isnetworkintialized",level:3},{value:"Example 2: An endpoint using isNetworkInitialized",id:"example-2-an-endpoint-using-isnetworkinitialized",level:3},{value:"Header",id:"header",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual bool isNetworkInitialized() const = 0;\n")),(0,r.kt)("p",null,"This function is used during SST's ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," phase to give a network time to initialize itself prior to accepting requests. Once the network is initialized the function should return ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". The following must be the case at that point:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Any future call to ",(0,r.kt)("inlineCode",{parentName:"li"},"isNetworkInitialized()")," must return ",(0,r.kt)("inlineCode",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},"A call to ",(0,r.kt)("inlineCode",{parentName:"li"},"getEndpointID()")," returns an accurate ID"),(0,r.kt)("li",{parentName:"ul"},"A call to ",(0,r.kt)("inlineCode",{parentName:"li"},"getLinkBW()")," returns the correct link bandwidth"),(0,r.kt)("li",{parentName:"ul"},"A call to ",(0,r.kt)("inlineCode",{parentName:"li"},"sendUntimedData()")," successfully sends data on the network"),(0,r.kt)("li",{parentName:"ul"},"A call to ",(0,r.kt)("inlineCode",{parentName:"li"},"recvUntimedData()")," returns Requests if any have arrived")),(0,r.kt)("p",null,"During ",(0,r.kt)("inlineCode",{parentName:"p"},"init()"),", endpoints must not call the above functions until this function indicates the network is initialized."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n","May return ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," during early phases of ",(0,r.kt)("inlineCode",{parentName:"p"},"init()"),". As soon as the network is initialized, should return ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". May not later return ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," after previously returning ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". When returning ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", the functions identified above must operate correctly."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n","Must use this function during ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," to wait until the network is initialized prior to calling any of the functions listed above."),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"returns")," (bool) Whether the network is initialized")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"example-1-a-network-interface-using-isnetworkintialized"},"Example 1: A network interface using isNetworkIntialized"),(0,r.kt)("p",null,"In this example, taken from the Merlin element library, the SimpleNetwork interface uses phase numbers 0-2 of ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," to perform internal initialization and allow network components to agree on network parameters. During those phase numbers, calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"isNetworkInitialized()")," will return ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". Once the network is ready, ",(0,r.kt)("inlineCode",{parentName:"p"},"isNetworkInitialized()")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", allowing the endpoints to do their own ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," protocols if needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.h/cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.h/cc"':!0},"#include <sst/core/interfaces/simpleNetwork.h>\n\nLinkControl::LinkControl(...) {\n    ...\n    network_initialized = false;\n    ...\n}\n\nvoid LinkControl::init(unsigned int phase)\n{\n    /* Starting at phase=0 of init(), merlin routers and interfaces perform handshakes to determine\n     * endpoint IDs, agree on link bandwidths, and establish routing information */\n     switch ( phase ) {\n        case 0:\n            /* Start negotiating bandwidth */\n            break;\n        case 1:\n            /* Finish negotiating bandwidth and start setting up mappings for virtual networks */\n            /* Set the endpoint ID */\n            break;\n        case 2:\n            /* Set up mappings for virtual networks; other initialization activities */\n            network_initialized = true;\n            break;\n        default:\n            /* Network is initialized now, handle init() for the endpoints by sending/receiving untimed events */\n            break;\n     }\n}\n\nbool isNetworkInitialized() const { return network_initialized; }\n")),(0,r.kt)("h3",{id:"example-2-an-endpoint-using-isnetworkinitialized"},"Example 2: An endpoint using isNetworkInitialized"),(0,r.kt)("p",null,"During each phase of ",(0,r.kt)("inlineCode",{parentName:"p"},"init()"),", an endpoint must call ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," on a SimpleNetwork interface. It must not call any other functions on the interface until a call to ",(0,r.kt)("inlineCode",{parentName:"p"},"isNetworkInitialized()")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Endpoint::init(unsigned int phase) {\n    net_iface->init(phase);\n\n    //highlight-next-line\n    bool networkReady = net_iface->isNetworkInitialized();\n\n    if (networkReady) {\n        /* Broadcast all the endpoint IDs so the endpoints can send data */\n        SST::Interfaces::SimpleNetwork::Request * req = new SST::Interfaces::SimpleNetwork::Request();\n        req->dest = SST::Interfaces::SimpleNetwork::INIT_BROADCAST_ADDR; /* Broadcast */\n        req->src = net_iface->getEndpointID();\n        \n        // Create an event with this endpoint's name so the other endpoints can map our ID to our name\n        SST::Interfaces::StringEvent* strEv = new SST::Interfaces::StringEvent(getName());\n        req->givePayload(strEv);\n\n        net_iface->sendUntimedData(req); \n\n        while (SST::Interfaces::SimpleNetwork::Request* req = net_iface->recvUntimedData()) {\n            /* set up a mapping table of the other endpoints' names -> IDs */\n            SST::Interfaces::StringEvent* name = static_cast<SST::Interfaces::StringEvent*>(req->takePayload());\n            IDMap.insert(std::make_pair(name->getString(), req->src));\n            delete req;\n            delete name; /* Have to delete separately from req since we used takePayload() to extract it */\n        }\n    }\n}\n")),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}u.isMDXComponent=!0}}]);