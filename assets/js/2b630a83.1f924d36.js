"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9802],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,_=m["".concat(i,".").concat(d)]||m[d]||u[d]||s;return n?o.createElement(_,a(a({ref:t},c),{},{components:n})):o.createElement(_,a({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<s;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var o=n(7462),r=n(3366),s=(n(7294),n(3905)),a=["components"],l={id:"sst_eli_doument_subcomponent_slots",title:"SST_ELI_DOCUMENT_SUBCOMPONENT_SLOTS"},i=void 0,p={unversionedId:"cpp/eli/sst_eli_doument_subcomponent_slots",id:"cpp/eli/sst_eli_doument_subcomponent_slots",title:"SST_ELI_DOCUMENT_SUBCOMPONENT_SLOTS",description:"Fully Qualified Name",source:"@site/../docs/cpp/eli/sst_eli_doument_subcomponent_slots.md",sourceDirName:"cpp/eli",slug:"/cpp/eli/sst_eli_doument_subcomponent_slots",permalink:"/sst-website/docs/cpp/eli/sst_eli_doument_subcomponent_slots",draft:!1,editUrl:"https://github.com/sstsimulator/sst-website/edit/master/docs/../docs/cpp/eli/sst_eli_doument_subcomponent_slots.md",tags:[],version:"current",lastUpdatedBy:"Ryan Ledbetter",lastUpdatedAt:1539909317,formattedLastUpdatedAt:"Oct 19, 2018",frontMatter:{id:"sst_eli_doument_subcomponent_slots",title:"SST_ELI_DOCUMENT_SUBCOMPONENT_SLOTS"},sidebar:"C++",previous:{title:"SST_ELI_DOCUMENT_STATISTICS",permalink:"/sst-website/docs/cpp/eli/sst_eli_document_statistics"},next:{title:"SST_ELI_REGISTER_COMPONENT",permalink:"/sst-website/docs/cpp/eli/sst_eli_register_component"}},c={},u=[{value:"Fully Qualified Name",id:"fully-qualified-name",level:2},{value:"Remarks",id:"remarks",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"fully-qualified-name"},"Fully Qualified Name"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#define SST_ELI_DOCUMENT_SUBCOMPONENT_SLOTS( ... )\n")),(0,s.kt)("h3",{id:"remarks"},"Remarks"),(0,s.kt)("p",null,"Specifies one or more slots for subcomponents. Each slot can have 1 or more subcomponents assigned to it."),(0,s.kt)("h2",{id:"requirements"},"Requirements"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/elementinfo.h>\n")),(0,s.kt)("h2",{id:"syntax"},"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'    SST_ELI_DOCUMENT_SUBCOMPONENT_SLOTS(\n        { "slot1_NAME", "slot1_DESCRIPTION", "slot1_SLOT_TYPE" },\n        { "slot2_NAME", "slot2_DESCRIPTION", "slot2_SLOT_TYPE" },\n        { "slot3_NAME", "slot3_DESCRIPTION", "slot3_SLOT_TYPE" },\n        ...\n        { "slotN_NAME", "slotN_DESCRIPTION", "slotN_SLOT_TYPE" }\n    )\n')),(0,s.kt)("h2",{id:"parameters"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"slotN_NAME")," - The name of the subcomponent slot."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"slotN_DESCRIPTION")," - A description of this subcomponent slot."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"slotN_SLOT_TYPE")," - The fully qualified class/interface the slot expects the subcomponent to support. "),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("h3",{id:"example-1"},"Example 1"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'// .h\nSST_ELI_DOCUMENT_SUBCOMPONENT_SLOTS(\n    { "bay", "Car Wash Bay", "SST::exC_carWash::carWashBay" }\n)\n')),(0,s.kt)("p",null,"As mentioned above, the bay can take 1 or more objects. Usually you will have code like this to initialize a list of subcomponents."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'//.cc\ncarWash::carWash( SST::ComponentId_t id, SST::Params& params ) : SST::Component(id) {\n    ...\n\nSST::SubComponentSlotInfo* info = getSubComponentSlotInfo("bay");\n    if ( !info ) {\n        output.fatal(CALL_INFO, -1, "Must specify at least one bay.\\n");\n    }\n// std::vector<carWashBay*> subComps\n    info->createAll(subComps);\n\n    ...\n}\n\n')))}d.isMDXComponent=!0}}]);