"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3756],{49048:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var i=t(85893),r=t(11151);const s={title:"recvUntimedData"},a=void 0,c={id:"core/iface/SimpleNetwork/recvUntimedData",title:"recvUntimedData",description:"This function should be used to check for received requests on a network during SST's untimed phases, init() and complete. This is not a pure virtual function, however, implementing it is recommended per the note below. See SST::recvUntimedData for additional detail on the use of this function.",source:"@site/../docs/core/iface/SimpleNetwork/recvUntimedData.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/recvUntimedData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/recvUntimedData",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/recvUntimedData.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"recvUntimedData"},sidebar:"core",previous:{title:"recvInitData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/recvInitData"},next:{title:"requestToReceive",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/requestToReceive"}},d={},o=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing recvUntimedData() in a SimpleNetwork interface",id:"example-1-implementing-recvuntimeddata-in-a-simplenetwork-interface",level:3},{value:"Example 2: Using recvUntimedData() from an endpoint",id:"example-2-using-recvuntimeddata-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"virtual Request* recvUntimedData();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This function should be used to check for received requests on a network during SST's untimed phases, ",(0,i.jsx)(n.code,{children:"init()"})," and ",(0,i.jsx)(n.code,{children:"complete"}),". This is not a pure virtual function, however, implementing it is recommended per the note below. See ",(0,i.jsx)(n.a,{href:"../../link/recvUntimedData",children:"SST::Link::recvUntimedData"})," for additional detail on the use of this function."]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"recvInitData"})," and ",(0,i.jsx)(n.code,{children:"recvUntimedData"})," functions are identical. The latter was added when SST added the ",(0,i.jsx)(n.code,{children:"complete()"})," phase to indicate that it could be used during ",(0,i.jsx)(n.em,{children:"any"})," untimed phase, not just ",(0,i.jsx)(n.code,{children:"init()"}),". ",(0,i.jsx)(n.code,{children:"recvInitData"})," is deprecated as of SST 13, and ",(0,i.jsx)(n.code,{children:"recvUntimedData"})," will become required (pure virtual) in SST 14."]})]}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Network interface"})," \xa0",(0,i.jsx)(n.br,{}),"\n","Must support receiving events via this function during SST's ",(0,i.jsx)(n.code,{children:"init()"})," and ",(0,i.jsx)(n.code,{children:"complete()"})," phases."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Endpoint"})," \xa0",(0,i.jsx)(n.br,{}),"\n","May optionally use this function during ",(0,i.jsx)(n.code,{children:"init()"})," and ",(0,i.jsx)(n.code,{children:"complete()"})," to receive events sent over the network."]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," (Request*) A request if one was received, otherwise nullptr. The caller is responsible for deleting any Request returned."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-1-implementing-recvuntimeddata-in-a-simplenetwork-interface",children:"Example 1: Implementing recvUntimedData() in a SimpleNetwork interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',children:"SST::Interfaces::SimpleNetwork::Request* LinkControl::recvUntimedData()\n{\n    if ( init_events.size() ) {\n        RtrEvent *ev = init_events.front();\n        init_events.pop_front();\n        SST::Interfaces::SimpleNetwork::Request* ret = ev->takeRequest();\n        delete ev;\n        return ret;\n    } else {\n        return nullptr;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-2-using-recvuntimeddata-from-an-endpoint",children:"Example 2: Using recvUntimedData() from an endpoint"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"void Endpoint::init(unsigned int phase)\n{\n    net_iface->init(phase);\n    \n    if (net_iface->isNetworkInitialized())\n    {\n        while ( (SST::Interfaces::SimpleNetworkRequest* req = net_iface->recvUntimedData()) ) \n        {\n            /* Handle req here */\n            delete req;\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/simpleNetwork.h>\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>a});var i=t(67294);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);