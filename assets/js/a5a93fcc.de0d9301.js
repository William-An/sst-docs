"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2954],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5759:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={title:"spaceToSend"},o=void 0,s={unversionedId:"core/iface/SimpleNetwork/spaceToSend",id:"core/iface/SimpleNetwork/spaceToSend",title:"spaceToSend",description:"Checks if there is sufficient space to send the specified number of bits on the specified virtual network.",source:"@site/../docs/core/iface/SimpleNetwork/spaceToSend.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/spaceToSend",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/spaceToSend",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/spaceToSend.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"spaceToSend"},sidebar:"core",previous:{title:"setNotifyOnSend",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/setNotifyOnSend"},next:{title:"Handler",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/handler"}},l={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing spaceToSend in a SimpleNetwork",id:"example-1-implementing-spacetosend-in-a-simplenetwork",level:3},{value:"Example 2: Using spaceToSend in an Endpoint",id:"example-2-using-spacetosend-in-an-endpoint",level:3},{value:"Header",id:"header",level:2}],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual bool spaceToSend(int vn, int num_bits) = 0;\n")),(0,a.kt)("p",null,"Checks if there is sufficient space to send the specified number of bits on the specified virtual network."),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","Return whether the network interface can accept a Request of size ",(0,a.kt)("inlineCode",{parentName:"p"},"num_bits")," on virtual network ",(0,a.kt)("inlineCode",{parentName:"p"},"vn"),". Returning ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," implies that an immediately subsequent call to ",(0,a.kt)("inlineCode",{parentName:"p"},"send()")," for a Request with this same number of bits and virtual network should succeed and return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," as well."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,a.kt)("br",{parentName:"p"}),"\n","May optionally use this function to query available buffer space."),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"vn")," (int) Virtual network to check"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"num_bits")," (int) Number of bits to check for. If this number of bits can be accepted by the interface, the interface has space to send."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"returns")," ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," if space exists, ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," otherwise")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"example-1-implementing-spacetosend-in-a-simplenetwork"},"Example 1: Implementing spaceToSend in a SimpleNetwork"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"':!0},"bool LinkControl::spaceToSend(int vn, int bits) \n{\n    if ( vn_remap_out[vn]->credits * flit_size < bits )\n    {\n        return false;\n    }\n    return true;\n}\n")),(0,a.kt)("h3",{id:"example-2-using-spacetosend-in-an-endpoint"},"Example 2: Using spaceToSend in an Endpoint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'SimpleNetwork::Request *req = new SimpleNetwork::Request();\nSST::Interfaces::StringEvent *strEv = new SST::Interfaces::StringEvent("hi!");\nreq->src = my_endpoint_id;\nreq->dest = a_destination_id;\nreq->size_in_bits = sizeof(strEv->getString()) * 8;\nreq->vn = vn;\nreq->givePayload(strEv);\n\n//highlight-next-line\nif ( net_iface->spaceToSend(req->vn, req->num_bits) )\n{\n    // Do not need to check return value of send()\n    // since we already checked that the request\n    // can be accepted\n    net_iface->send(req, req->vn);\n}\n')),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}d.isMDXComponent=!0}}]);