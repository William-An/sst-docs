"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2237],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=r,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||a;return n?i.createElement(d,o(o({ref:t},c),{},{components:n})):i.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},83494:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(87462),r=(n(67294),n(3905));const a={title:"finish"},o=void 0,l={unversionedId:"core/iface/SimpleNetwork/finish",id:"core/iface/SimpleNetwork/finish",title:"finish",description:"See finish() for a description of SST's finish phase and the use of this function. The (Sub)Component that loaded a SimpleNetwork interface should call this function during its own finish() function. A SimpleNetwork interface may implement this function if needed, but it is not required.",source:"@site/../docs/core/iface/SimpleNetwork/finish.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/finish",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/finish",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/finish.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"finish"},sidebar:"core",previous:{title:"complete",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/complete"},next:{title:"getEndpointID",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/getEndpointID"}},s={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing finish() at a SimpleNetwork",id:"example-1-implementing-finish-at-a-simplenetwork",level:3},{value:"Example 2: Supporting SimpleNetwork&#39;s finish() at an endpoint",id:"example-2-supporting-simplenetworks-finish-at-an-endpoint",level:3},{value:"Header",id:"header",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void finish();\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../../component/lifecycle/finish"},(0,r.kt)("inlineCode",{parentName:"a"},"finish()"))," for a description of SST's finish phase and the use of this function. The (Sub)Component that loaded a SimpleNetwork interface should call this function during its own ",(0,r.kt)("inlineCode",{parentName:"p"},"finish()")," function. A SimpleNetwork interface may implement this function if needed, but it is not required."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n","This function is optional."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n","Call ",(0,r.kt)("inlineCode",{parentName:"p"},"finish()")," on the interface during the ",(0,r.kt)("inlineCode",{parentName:"p"},"finish()")," phase as SST does not automatically call this function on SubComponents. "),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"returns")," none")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"example-1-implementing-finish-at-a-simplenetwork"},"Example 1: Implementing finish() at a SimpleNetwork"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"':!0},"void LinkControl::finish(void)\n{\n    // Final update to statistics if needed\n    if (is_idle) {\n        idle_time->addData(getCurrentSimCycle() - idle_start);\n        is_ide = false;\n    }\n\n    // Clean up all the events left in the queues. This will help\n    // track down real memory leask as all these events won't be in the\n    // way\n    for ( int i = 0; i < req_vns; i++ ) {\n        while ( !input_queues[i].empty() ) {\n            delete input_queues[i].front();\n            input_queues[i].pop();\n        }\n    }\n    for ( int i = 0; i < used_vns; i++ ) {\n        while ( !output_queues[i].queue.empty() ) {\n            delete output_queues[i].queue.front();\n            output_queues[i].queue.pop();\n        }\n    }\n}\n")),(0,r.kt)("h3",{id:"example-2-supporting-simplenetworks-finish-at-an-endpoint"},"Example 2: Supporting SimpleNetwork's finish() at an endpoint"),(0,r.kt)("p",null,"An endpoint should call ",(0,r.kt)("inlineCode",{parentName:"p"},"finish()")," on a SimpleNetwork interface in its own ",(0,r.kt)("inlineCode",{parentName:"p"},"finish()")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Endpoint::finish() \n{\n    net_iface->finish();\n}\n")),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}m.isMDXComponent=!0}}]);