"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8975],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},p=Object.keys(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),i=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,p=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=i(r),d=n,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||p;return r?a.createElement(f,o(o({ref:t},c),{},{components:r})):a.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=r.length,o=new Array(p);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:n,o[1]=l;for(var i=2;i<p;i++)o[i]=r[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2298:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var a=r(7462),n=r(3366),p=(r(7294),r(3905)),o=["components"],l={title:"print_all_params"},s=void 0,i={unversionedId:"core/params/print_all_params",id:"core/params/print_all_params",title:"print_all_params",description:"Print all key/value pairs in the Params object to the specified std::Output. Optionally, prepend each printed key with the given prefix.",source:"@site/../docs/core/params/print_all_params.md",sourceDirName:"core/params",slug:"/core/params/print_all_params",permalink:"/sst-docs/docs/core/params/print_all_params",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/params/print_all_params.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1678138197,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{title:"print_all_params"},sidebar:"Core API",previous:{title:"is_value_array",permalink:"/sst-docs/docs/core/params/is_value_array"},next:{title:"SST::Random",permalink:"/sst-docs/docs/core/rng/"}},c={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],u={toc:m},d="wrapper";function f(e){var t=e.components,r=(0,n.Z)(e,o);return(0,p.kt)(d,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cpp"},'void print_all_params(std::ostream& os, const std::string& prefix = "") const;\nvoid print_all_params(Output& out, const std::string& prefix = "") const;\n')),(0,p.kt)("p",null,"Print all key/value pairs in the Params object to the specified ",(0,p.kt)("inlineCode",{parentName:"p"},"std::ostream")," or ",(0,p.kt)("inlineCode",{parentName:"p"},"SST::Output"),". Optionally, prepend each printed key with the given prefix."),(0,p.kt)("h2",{id:"parameters"},"Parameters"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"os")," (std::ostream&) Where to print the parameters to"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"out")," (SST::Output) Where to print the parameters to"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"prefix")," (std::string) A prefix to prepend to each key"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"returns")," none")),(0,p.kt)("h2",{id:"examples"},"Examples"),(0,p.kt)("h3",{id:"example-1"},"Example 1"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cpp"},'example::example(ComponentId_t id, Params& params) : Component(id)\n{\n    SST::Output* out = new Output("", 1, 0, Output::STDOUT);\n    params.print_all_params(out);\n}\n')),(0,p.kt)("h2",{id:"header"},"Header"),(0,p.kt)("p",null,"The Params header file is included with any SST object that supports Params."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h> // or\n#include <sst/core/params.h> // if not included in base class\n")))}f.isMDXComponent=!0}}]);