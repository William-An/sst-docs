"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1365],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,f=p["".concat(d,".").concat(u)]||p[u]||m[u]||i;return n?a.createElement(f,s(s({ref:t},l),{},{components:n})):a.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},96424:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={title:"recvUntimedData"},s=void 0,o={unversionedId:"core/iface/StandardMem/recvUntimedData",id:"core/iface/StandardMem/recvUntimedData",title:"recvUntimedData",description:"Receive messages from the interface during SST's init() and complete() phases. A registered callback handler is not used during these phases so the parent must use this function to poll for messages if any are expected.",source:"@site/../docs/core/iface/StandardMem/recvUntimedData.md",sourceDirName:"core/iface/StandardMem",slug:"/core/iface/StandardMem/recvUntimedData",permalink:"/sst-docs/docs/core/iface/StandardMem/recvUntimedData",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/recvUntimedData.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"recvUntimedData"},sidebar:"core",previous:{title:"poll",permalink:"/sst-docs/docs/core/iface/StandardMem/poll"},next:{title:"send",permalink:"/sst-docs/docs/core/iface/StandardMem/send"}},d={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing recvUntimedData() in a StandardMem interface",id:"example-1-implementing-recvuntimeddata-in-a-standardmem-interface",level:3},{value:"Example 2: Using recvUntimedData from an endpoint",id:"example-2-using-recvuntimeddata-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}],l={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual Request* recvUntimedData() = 0;\n")),(0,r.kt)("p",null,"Receive messages from the interface during SST's ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"complete()")," phases. A registered callback handler is not used during these phases so the parent must use this function to poll for messages if any are expected."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Memory interface")," ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n","Facilitate returning messages to an endpoint via this function."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,r.kt)("br",{parentName:"p"}),"\n","Use this function to get messages during SST's ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"complete()")," phases if needed."),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"returns")," (Request*) A pointer to a Request if one is available, otherwise ",(0,r.kt)("inlineCode",{parentName:"li"},"nullptr"))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"example-1-implementing-recvuntimeddata-in-a-standardmem-interface"},"Example 1: Implementing recvUntimedData() in a StandardMem interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Request* StandardMemClassName::recvUntimedData()\n{\n    if ( !receivedUntimedMessages.empty() )\n    {\n        Request* top = receivedUntimedMessages.front();\n        receivedUntimedMessages.pop():\n        return top;\n    }\n    return nullptr;\n}\n")),(0,r.kt)("h3",{id:"example-2-using-recvuntimeddata-from-an-endpoint"},"Example 2: Using recvUntimedData from an endpoint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Endpoint::complete(unsigned int phase)\n{\n    while ( (Request* req = mem_iface->recvUntimedData()) ) {\n        /* Handle request */\n        delete req;\n    }\n}\n")),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stdMem.h>\n")))}m.isMDXComponent=!0}}]);