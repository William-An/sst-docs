"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7578],{22472:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var n=r(85893),a=r(11151);const s={title:"operator+="},o=void 0,i={id:"core/unitalgebra/operatoradd",title:"operator+=",description:"Add something to this UnitAlgebra. If the argument is a UnitAlgebra and the units do not match, an error will occur. Otherwise, if the value is unitless (e.g., an int), it will be added to the value of this UnitAlgebra.",source:"@site/../docs/core/unitalgebra/operatoradd.md",sourceDirName:"core/unitalgebra",slug:"/core/unitalgebra/operatoradd",permalink:"/sst-docs/docs/core/unitalgebra/operatoradd",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/unitalgebra/operatoradd.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"operator+="},sidebar:"core",previous:{title:"operator=",permalink:"/sst-docs/docs/core/unitalgebra/operatoreq"},next:{title:"operator-=",permalink:"/sst-docs/docs/core/unitalgebra/operatorsub"}},l={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"UnitAlgebra& operator+=(const UnitAlgebra& v);\ntemplate <typename T> UnitAlgebra& operator+= (const T& v);\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Add something to this UnitAlgebra. If the argument is a UnitAlgebra and the units do not match, an error will occur. Otherwise, if the value is unitless (e.g., an ",(0,n.jsx)(t.code,{children:"int"}),"), it will be added to the value of this UnitAlgebra."]}),"\n",(0,n.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"v"})," (UnitAlgebra) value to add."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"v"})," (typename T) value to add"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"returns"})," (UnitAlgebra&) This UnitAlgebra after the addition operation."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'SST::UnitAlgebra num0("3s");\nSST::UnitAlgebra num1("4s");\nnum0 += num1;\n// num0 = 7s\n'})}),"\n",(0,n.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/unitalgebra.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},11151:(e,t,r)=>{r.d(t,{Z:()=>i,a:()=>o});var n=r(67294);const a={},s=n.createContext(a);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);