"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2945],{96732:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var i=t(85893),s=t(11151);const r={title:"sendUntimedData"},a=void 0,d={id:"core/iface/SimpleNetwork/sendUntimedData",title:"sendUntimedData",description:"This function should be used to send requests on a network during SST's untimed phases, init() and complete. This is not a pure virtual function, however, implementing it is recommended per the note below. See SST::sendUntimedData for additional detail on the use of this function.",source:"@site/../docs/core/iface/SimpleNetwork/sendUntimedData.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/sendUntimedData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/sendUntimedData",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/sendUntimedData.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"sendUntimedData"},sidebar:"core",previous:{title:"sendInitData",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/sendInitData"},next:{title:"setNotifyOnReceive",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/setNotifyOnReceive"}},o={},l=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Parameters",id:"parameters-1",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Supporting sendUntimedData at a network interface",id:"example-1-supporting-senduntimeddata-at-a-network-interface",level:3},{value:"Example 2: Sending untimed data from an endpoint",id:"example-2-sending-untimed-data-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"void sendUntimedData(Request* req);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This function should be used to send requests on a network during SST's untimed phases, ",(0,i.jsx)(n.code,{children:"init()"})," and ",(0,i.jsx)(n.code,{children:"complete"}),". This is not a pure virtual function, however, implementing it is recommended per the note below. See ",(0,i.jsx)(n.a,{href:"../../link/sendUntimedData",children:"SST::Link::sendUntimedData"})," for additional detail on the use of this function."]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"sendInitData"})," and ",(0,i.jsx)(n.code,{children:"sendUntimedData"})," functions are identical. The latter was added when SST added the ",(0,i.jsx)(n.code,{children:"complete()"})," phase to indicate that it could be used during ",(0,i.jsx)(n.em,{children:"any"})," untimed phase, not just ",(0,i.jsx)(n.code,{children:"init()"}),". ",(0,i.jsx)(n.code,{children:"sendInitData"})," is deprecated as of SST 13, and ",(0,i.jsx)(n.code,{children:"sendUntimedData"})," will become required (pure virtual) in SST 14."]})]}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Network interface"})," \xa0",(0,i.jsx)(n.br,{}),"\n","Must support sending events via this function during SST's ",(0,i.jsx)(n.code,{children:"init()"})," and ",(0,i.jsx)(n.code,{children:"complete()"})," phases. During ",(0,i.jsx)(n.code,{children:"init()"}),". This function is allowed to cause an error if it is called during ",(0,i.jsx)(n.code,{children:"init()"})," but a call to ",(0,i.jsx)(n.code,{children:"isNetworkInitialized()"})," would return ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Endpoint"})," \xa0",(0,i.jsx)(n.br,{}),"\n","May optionally use this function during ",(0,i.jsx)(n.code,{children:"init()"})," and ",(0,i.jsx)(n.code,{children:"complete()"})," to send events over the network. Must ",(0,i.jsx)(n.em,{children:"not"})," call this function during ",(0,i.jsx)(n.code,{children:"init()"})," until ",(0,i.jsx)(n.code,{children:"isNetworkInitialized()"})," returns ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," (Request*) A request if one was received, otherwise nullptr. The caller is responsible for deleting any Request returned."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"req"})," (Request*) A ",(0,i.jsx)(n.a,{href:"Request",children:"Request"})," to send"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-1-supporting-senduntimeddata-at-a-network-interface",children:"Example 1: Supporting sendUntimedData at a network interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',children:"void LinkControl::sendUntimedData(SST::Interfaces::SimpleNetwork::Request* req)\n{\n    if ( use_nid_map ) {\n        req->dest = nid_map[req->dest];\n    }\n    // Send the request on interface's link into the network using merlin's internal RtrEvent type\n    rtr_link->sendUntimedData(new RtrEvent(req, id, 0));\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-2-sending-untimed-data-from-an-endpoint",children:"Example 2: Sending untimed data from an endpoint"}),"\n",(0,i.jsxs)(n.p,{children:["After the network is initialized, the endpoint uses ",(0,i.jsx)(n.code,{children:"sendUntimedData()"})," to broadcast a message containing the endpoint's name and network ID. The endpoints use these messages to build a map of available network destinations (",(0,i.jsx)(n.code,{children:"IDmap"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"void Endpoint::init(unsigned int phase) {\n    net_iface->init(phase);\n    \n    bool networkReady = net_iface->isNetworkInitialized();\n\n    if (networkReady) {\n        /* Broadcast all the endpoint IDs so the endpoints can send data */\n        SST::Interfaces::SimpleNetwork::Request * req = new SST::Interfaces::SimpleNetwork::Request();\n        req->dest = SST::Interfaces::SimpleNetwork::INIT_BROADCAST_ADDR; /* Broadcast */\n        req->src = net_iface->getEndpointID();\n        \n        // Create an event with this endpoint's name so the other endpoints can map our ID to our name\n        SST::Interfaces::StringEvent* strEv = new SST::Interfaces::StringEvent(getName());\n        req->givePayload(strEv);\n\n        //highlight-next-line\n        net_iface->sendUntimedData(req); \n\n        while (SST::Interfaces::SimpleNetwork::Request* req = net_iface->recvInitData()) {\n            /* set up a mapping table of the other endpoints' names -> IDs */\n            SST::Interfaces::StringEvent* name = static_cast<SST::Interfaces::StringEvent*>(req->takePayload());\n            IDMap.insert(std::make_pair(name->getString(), req->src));\n            delete req;\n            delete name; /* Have to delete separately from req since we used takePayload() to extract it */\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/simpleNetwork.h>\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>a});var i=t(67294);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);