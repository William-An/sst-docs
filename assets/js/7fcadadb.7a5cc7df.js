"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6898],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(r),d=n,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return r?a.createElement(h,o(o({ref:t},p),{},{components:r})):a.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4075:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var a=r(7462),n=r(3366),s=(r(7294),r(3905)),o=["components"],i={title:"insert"},l=void 0,c={unversionedId:"core/params/insert",id:"core/params/insert",title:"insert",description:"Insert a key/value pair or a set of parameters into this Params object. In the case of inserting a Params object, global parameters will be copied into the global params section of this Params object. All other inserted params will be inserted into the local params. The key/value variant of this function optionally takes a parameter to indicate whether the new key/value should overwrite an existing one if it already exists in the Params object. If overwrite=False and the parameter exists in the Params object already, this function will have no effect.",source:"@site/../docs/core/params/insert.md",sourceDirName:"core/params",slug:"/core/params/insert",permalink:"/sst-docs/docs/core/params/insert",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/params/insert.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1678138197,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{title:"insert"},sidebar:"Core API",previous:{title:"getKeys",permalink:"/sst-docs/docs/core/params/getKeys"},next:{title:"size",permalink:"/sst-docs/docs/core/params/size"}},p={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],u={toc:m},d="wrapper";function h(e){var t=e.components,r=(0,n.Z)(e,o);return(0,s.kt)(d,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void insert(const std::string& key ,const std::string& value, bool overwrite = true);\nvoid insert(const Params& params);\n")),(0,s.kt)("p",null,"Insert a key/value pair or a set of parameters into this Params object. In the case of inserting a Params object, global parameters will be copied into the global params section of this Params object. All other inserted params will be inserted into the local params. The key/value variant of this function optionally takes a parameter to indicate whether the new key/value should overwrite an existing one if it already exists in the Params object. If ",(0,s.kt)("inlineCode",{parentName:"p"},"overwrite=False")," and the parameter exists in the Params object already, this function will have no effect."),(0,s.kt)("h2",{id:"parameters"},"Parameters"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"key")," (std::string) New key to add to the Params"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"value")," (std::string) New value set the new key to in the Params"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"overwrite")," (bool) Whether this insert should overwrite an existing key in the Params. By default, the parameter is True. "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"params")," (Params) A set of params to add to the insert function. Inserted params that match an existing key will overwrite the existing one."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"returns")," none")),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("h3",{id:"example-1"},"Example 1"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'Params p;\np.insert("frequency", "2MHz"); \n')),(0,s.kt)("h2",{id:"header"},"Header"),(0,s.kt)("p",null,"The Params header file is included with any SST object that supports Params."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h> // or\n#include <sst/core/params.h> // if not included in base class\n")))}h.isMDXComponent=!0}}]);