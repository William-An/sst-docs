"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6343],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},23226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={title:"constructor"},l=void 0,i={unversionedId:"core/iface/SimpleNetwork/constructor",id:"core/iface/SimpleNetwork/constructor",title:"constructor",description:"This constructor is called when a (Sub)Component loads a SimpleNetwork interface.",source:"@site/../docs/core/iface/SimpleNetwork/constructor.md",sourceDirName:"core/iface/SimpleNetwork",slug:"/core/iface/SimpleNetwork/constructor",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/constructor",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/constructor.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"constructor"},sidebar:"core",previous:{title:"SST::Interfaces::SimpleNetwork",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/class"},next:{title:"destructor",permalink:"/sst-docs/docs/core/iface/SimpleNetwork/destructor"}},s={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// Interface constructor\nSimpleNetworkClassName(SST::ComponentId_t id, Params& params, int vns);\n// Base SimpleNetwork class constructor\nSST::Interfaces::SimpleNetwork(SST::ComponentId_t id);\n")),(0,o.kt)("p",null,"This constructor is called when a (Sub)Component loads a SimpleNetwork interface."),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Network interface")," ","\xa0",(0,o.kt)("br",{parentName:"p"}),"\n","No specific requirements beyond constructing the object."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Endpoint")," ","\xa0",(0,o.kt)("br",{parentName:"p"}),"\n","Do not call this function directly. The functions for loading SubComponents invoke this constructor."),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"id")," (ComponentId_t) A unique ID generated by SST for each SubComponent"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"params")," (Params&) The parameter set passed into the SimpleNetwork SubComponent by the simulation configuration file if user-defined or by the parent (Sub)Component if anonymous"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"vns")," (int) Number of virtual networks requested to be used by the endpoint"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"returns")," (SimpleNetwork) The newly constructed SimpleNetwork SubComponent")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.h"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.h"':!0},'#include <sst/core/interfaces/simpleNetwork.h>\n\n// SubComponent API - define an API for a type of subcomponent\nclass LinkControl : public SST::Interfaces::SimpleNetwork {\npublic:\n    // Tell SST that this class is a SubComponent API\n    SST_ELI_REGISTER_SUBCOMPONENT(LinkControl, \n        "merlin", \n        "linkcontrol",\n        SST_ELI_ELEMENT_VERSION(1,0,0),\n        "Link Control module for building Merlin-enabled NICs",\n        SST::Interfaces::SimpleNetwork)\n\n    /* Rest of ELI macros */\n    LinkControl(ComponentId_t cid, Params &params, int vns);\n\n    ~LinkControl();\n\n    /* Rest of class */\n};\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"':!0},'#include <sst_config.h>\n#include "linkControl.h"\n\nLinkControl::LinkControl(ComponentId_t cid, Params &params, int vns) :\n    SST::Interfaces::SimpleNetwork(cid),\n    rtr_link(nullptr), output_timing(nullptr), congestion_timing(nullptr),\n    req_vns(vns), used_vns(0), total_vns(0), vn_out_map(nullptr),\n    vn_remap_out(nullptr), output_queues(nullptr), router_credits(nullptr),\n    router_return_credits(nullptr), input_queues(nullptr),\n    id(-1), logical_nid(-1), use_nid_map(false), job_id(0),\n    curr_out_vn(0), waiting(true), have_packets(false), start_block(0),\n    idle_start(0), is_idle(true),\n    receiveFunctor(nullptr), sendFunctor(nullptr),\n    network_initialized(false),\n    output(getSimulationOutput()),\n    sent(0)\n    {\n        /** Constructor implementation **/\n    }\n')),(0,o.kt)("h2",{id:"header"},"Header"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/simpleNetwork.h>\n")))}m.isMDXComponent=!0}}]);