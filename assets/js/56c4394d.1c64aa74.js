"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4626],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},i=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,k=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(k,p(p({ref:t},i),{},{components:n})):r.createElement(k,p({ref:t},i))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,p=new Array(a);p[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,p[1]=c;for(var s=2;s<a;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2106:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>m});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),p=["components"],c={id:"connect",title:"connect()"},l=void 0,s={unversionedId:"projectDriver/link/connect",id:"projectDriver/link/connect",title:"connect()",description:"Remarks",source:"@site/../docs/projectDriver/link/connect.md",sourceDirName:"projectDriver/link",slug:"/projectDriver/link/connect",permalink:"/sst-website/docs/projectDriver/link/connect",draft:!1,editUrl:"https://github.com/sstsimulator/sst-website/edit/master/docs/../docs/projectDriver/link/connect.md",tags:[],version:"current",lastUpdatedBy:"Ryan Ledbetter",lastUpdatedAt:1539909317,formattedLastUpdatedAt:"Oct 19, 2018",frontMatter:{id:"connect",title:"connect()"},sidebar:"ProjectDriver",previous:{title:"setSubComponent()",permalink:"/sst-website/docs/projectDriver/component/setSubComponent"},next:{title:"sst.Link()",permalink:"/sst-website/docs/projectDriver/link/"}},i={},m=[{value:"Remarks",id:"remarks",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3}],u={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,p);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"remarks"},"Remarks"),(0,a.kt)("p",null,"Connect ports from two components with a link."),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import sst\n")),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'link.connect( (component1, "port1", "delay1"), (component2, "port2", "delay2") )\n')),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"component1")," & ",(0,a.kt)("strong",{parentName:"p"},"component2")," - A component created using ",(0,a.kt)("a",{parentName:"p",href:"/sst-website/docs/projectDriver/sst/component"},"sst.Component"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"port1")," & ",(0,a.kt)("strong",{parentName:"p"},"port2")," - The port within the component to connect to."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"delay1")," & ",(0,a.kt)("strong",{parentName:"p"},"delay2"),"  - The time it takes to send event from one component to the other. Usually delay1 and delay2 are the same but can be different if events need to move faster/slower between the two components."),(0,a.kt)("h2",{id:"return-value"},"Return Value"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"None")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'link_cpu_tracer = sst.Link("link_cpu_tracer")\nlink_cpu_tracer.connect((comp_cpu, "mem_link", "100ps"), (comp_tracer, "northBus", "100ps"))\n')),(0,a.kt)("h3",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'sst.Link("MyLink").connect( (carWashComponent, "port", "1ps"), (carGeneratorComponent, "port", "1ps") )\n')))}d.isMDXComponent=!0}}]);