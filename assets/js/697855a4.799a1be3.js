"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1129],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,f=p["".concat(o,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87120:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={title:"setDefaultTimeBase"},l=void 0,s={unversionedId:"core/link/setDefaultTimeBase",id:"core/link/setDefaultTimeBase",title:"setDefaultTimeBase",description:"Sets the default time base for the link. This will be the units of send latency if additional latency is added using send() without specifying units.",source:"@site/../docs/core/link/setDefaultTimeBase.md",sourceDirName:"core/link",slug:"/core/link/setDefaultTimeBase",permalink:"/sst-docs/docs/core/link/setDefaultTimeBase",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/link/setDefaultTimeBase.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1695940750,formattedLastUpdatedAt:"Sep 28, 2023",frontMatter:{title:"setDefaultTimeBase"},sidebar:"core",previous:{title:"getDefaultTimeBase",permalink:"/sst-docs/docs/core/link/getDefaultTimeBase"},next:{title:"sendUntimedData",permalink:"/sst-docs/docs/core/link/sendUntimedData"}},o={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void setDefaultTimeBase(TimeConverter* tc);\n")),(0,a.kt)("p",null,"Sets the default time base for the link. This will be the units of send latency if additional latency is added using ",(0,a.kt)("inlineCode",{parentName:"p"},"send()")," without specifying units. "),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Calls to ",(0,a.kt)("a",{parentName:"p",href:"../component/time/registerClock"},(0,a.kt)("inlineCode",{parentName:"a"},"registerClock()"))," and ",(0,a.kt)("a",{parentName:"p",href:"../component/time/registerTimeBase"},(0,a.kt)("inlineCode",{parentName:"a"},"registerTimeBase()"))," can also affect a (sub)component's default time base.")),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"tc")," (TimeConverter*) A TimeConverter representing the default units of latency to use on the link"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"returns")," none")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/kingsley/linkControl.cc"',title:'"Excerpt',from:!0,'sst-elements/src/sst/elements/kingsley/linkControl.cc"':!0},"void LinkControl::init(unsigned int phase)\n{\n    Event* ev;\n    NocInitEvent* init_ev;\n    switch ( init_state ) {\n        case 0:\n            /* Handle case 0 */\n        case 1:\n            ev = rtr_link->recvUntimedData();\n            if ( NULL == ev ) break;\n            init_ev = static_cast<NocInitEvent*>(ev);\n            UnitAlgebra flit_size_ua = init_ev->ua_value;\n            flit_size = flit_size_ua.getRoundedValue();\n\n            // Compute the link timebase based on the link bandwidth\n            UnitAlgebra link_clock = link_bw / flit_size_ua;\n\n            // Set the 'output_timing' link's timebase to match bandwidth\n            TimeConverter* tc = getTimeConverter(link_clock);\n            //highlight-next-line\n            output_timing->setDefaultTimeBase(tc);\n        \n        /* Rest of case handling and init() */\n}\n")),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/link.h>\n")))}m.isMDXComponent=!0}}]);