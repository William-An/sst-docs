"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5147],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(r),v=a,g=u["".concat(c,".").concat(v)]||u[v]||d[v]||i;return r?n.createElement(g,s(s({ref:t},p),{},{components:r})):n.createElement(g,s({ref:t},p))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=v;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}v.displayName="MDXCreateElement"},54707:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const i={title:"SST::Interfaces::StringEvent",sidebar_label:"StringEvent"},s=void 0,o={unversionedId:"core/iface/StringEvent/class",id:"core/iface/StringEvent/class",title:"SST::Interfaces::StringEvent",description:"The StringEvent class is an Event, derived from SST::Event. It is provided for early prototyping and testing use cases. The event wraps a single string. The event is serializable.",source:"@site/../docs/core/iface/StringEvent/class.md",sourceDirName:"core/iface/StringEvent",slug:"/core/iface/StringEvent/class",permalink:"/sst-docs/docs/core/iface/StringEvent/class",draft:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StringEvent/class.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1684522150,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{title:"SST::Interfaces::StringEvent",sidebar_label:"StringEvent"},sidebar:"core",previous:{title:"Handler",permalink:"/sst-docs/docs/core/iface/StandardMem/handler"},next:{title:"TestEvent",permalink:"/sst-docs/docs/core/iface/TestEvent/class"}},c={},l=[{value:"Member variables",id:"member-variables",level:2},{value:"Member functions",id:"member-functions",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Destructor",id:"destructor",level:3},{value:"clone",id:"clone",level:3},{value:"getString",id:"getstring",level:3},{value:"Header",id:"header",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The StringEvent class is an Event, derived from SST::Event. It is provided for early prototyping and testing use cases. The event wraps a single string. The event is serializable."),(0,a.kt)("h2",{id:"member-variables"},"Member variables"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"str")," (std::string) A string. Has no default value.")),(0,a.kt)("h2",{id:"member-functions"},"Member functions"),(0,a.kt)("h3",{id:"constructor"},"Constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"StringEvent::StringEvent(); // For serialization only\nStringEvent::StringEvent(const std::string& str);\n")),(0,a.kt)("h3",{id:"destructor"},"Destructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"StringEvent::~StringEvent();\n")),(0,a.kt)("h3",{id:"clone"},"clone"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual Event* clone();\n")),(0,a.kt)("h3",{id:"getstring"},"getString"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"const std::string& getString();\n")),(0,a.kt)("h2",{id:"header"},"Header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/interfaces/stringEvent.h>\n")))}d.isMDXComponent=!0}}]);