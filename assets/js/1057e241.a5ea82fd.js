"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1324],{17469:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var o=r(74848),n=r(28453);const c={title:"getFactor"},s=void 0,i={id:"core/timeconverter/getFactor",title:"getFactor",description:"Returns the factor used for conversions with Core Time.",source:"@site/../docs/core/timeconverter/getFactor.md",sourceDirName:"core/timeconverter",slug:"/core/timeconverter/getFactor",permalink:"/sst-docs/docs/core/timeconverter/getFactor",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/timeconverter/getFactor.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1716583959e3,frontMatter:{title:"getFactor"},sidebar:"core",previous:{title:"convertToCoreTime",permalink:"/sst-docs/docs/core/timeconverter/convertToCoreTime"},next:{title:"getPeriod",permalink:"/sst-docs/docs/core/timeconverter/getPeriod"}},a={},d=[{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"SimTime_t getFactor() const;\n"})}),"\n",(0,o.jsx)(t.p,{children:"Returns the factor used for conversions with Core Time."}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:'#include <sst/core/timeConverter.h>\nexample::example(ComponentId_t id, Params& params) : Component(id) \n{\n    TimeConverter* converter = registerClock("200MHz", new Clock::Handler2<example, &example::clockHandler>(this));\n\n    Output* out = getSimulationOutput();\n    // Assuming core time base is the default 1ps, converter->getFactor() returns 5ns / 1ps = 5000\n    //highlight-start\n    out->output("Registered a 200MHz clock. The Core Time base is %s. 200MHz / %s is %" PRIu64 "\\n.",\n        getCoreTimeBase().toStringBestSI().c_str(), converter->getFactor());\n    //highlight-end\n}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/timeConverter.h\n"})})]})}function m(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>i});var o=r(96540);const n={},c=o.createContext(n);function s(e){const t=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),o.createElement(c.Provider,{value:t},e.children)}}}]);