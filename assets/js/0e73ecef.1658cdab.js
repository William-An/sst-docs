"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5913],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>b});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=a.createContext({}),c=function(e){var r=a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=c(e.components);return a.createElement(s.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),m=n,b=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(b,l(l({ref:r},p),{},{components:t})):a.createElement(b,l({ref:r},p))}));function b(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o[u]="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},998:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>b,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=t(7462),n=t(3366),i=(t(7294),t(3905)),l=["components"],o={title:"serialize_order"},s=void 0,c={unversionedId:"core/unitalgebra/serialize_order",id:"core/unitalgebra/serialize_order",title:"serialize_order",description:"This function serializes a UnitAlgebra object. It is not called directly by SST Elements, but enables Elements to easily serialize a UnitAlgebra, as shown in the example below.",source:"@site/../docs/core/unitalgebra/serialize_order.md",sourceDirName:"core/unitalgebra",slug:"/core/unitalgebra/serialize_order",permalink:"/sst-docs/docs/core/unitalgebra/serialize_order",draft:!1,editUrl:"https://github.com/sstsimulator/docs/edit/master/docs/../docs/core/unitalgebra/serialize_order.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1678138197,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{title:"serialize_order"},sidebar:"Core API",previous:{title:"toStringBestSI",permalink:"/sst-docs/docs/core/unitalgebra/toStringBestSI"}},p={},u=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Header",id:"header",level:2}],d={toc:u},m="wrapper";function b(e){var r=e.components,t=(0,n.Z)(e,l);return(0,i.kt)(m,(0,a.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void serialize_order(SST::Core::Serialization::serializer& ser) override;\n")),(0,i.kt)("p",null,"This function serializes a UnitAlgebra object. It is not called directly by SST Elements, but enables Elements to easily serialize a UnitAlgebra, as shown in the example below."),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"val")," (serializer) Serializer to add object to. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"returns")," none")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"example-1"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},' 37 class exampleEvent : public SST::Event\n 38 {\n 39 public:\n 40     // Constructor\n 41     exampleEvent() : SST::Event(), bytes("0B") { }\n 42 \n 43     // Example data member\n 44     UnitAlgebra bytes;\n 46 \n 47     // Events must provide a serialization function that serializes\n 48     // all data members of the event.\n 49     void serialize_order(SST::Core::Serialization::serializer &ser)  override {\n 50         Event::serialize_order(ser);\n 51         ser & bytes; // Serialize a UnitAlgebra\n 53     }\n 54 \n 55     // Register this event as serializable\n 56     ImplementSerializable(SST::simpleElementExample::exampleEvent);\n 57 };\n')),(0,i.kt)("h2",{id:"header"},"Header"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/unitalgebra.h>\n")))}b.isMDXComponent=!0}}]);