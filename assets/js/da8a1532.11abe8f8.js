"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8313],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,f=c["".concat(i,".").concat(m)]||c[m]||d[m]||s;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=c;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<s;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6349:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),l=["components"],o={id:"finish",title:"finish()"},i=void 0,p={unversionedId:"cpp/component/finish",id:"cpp/component/finish",title:"finish()",description:"Fully Qualified Name",source:"@site/../docs/cpp/component/finish.md",sourceDirName:"cpp/component",slug:"/cpp/component/finish",permalink:"/sst-website/docs/cpp/component/finish",draft:!1,editUrl:"https://github.com/sstsimulator/sst-website/edit/master/docs/../docs/cpp/component/finish.md",tags:[],version:"current",lastUpdatedBy:"Ryan Ledbetter",lastUpdatedAt:1537224032,formattedLastUpdatedAt:"Sep 17, 2018",frontMatter:{id:"finish",title:"finish()"},sidebar:"C++",previous:{title:"configureSelfLink()",permalink:"/sst-website/docs/cpp/component/configureSelfLink"},next:{title:"primaryComponentDoNotEndSim()",permalink:"/sst-website/docs/cpp/component/primaryComponentDoNotEndSim"}},u={},d=[{value:"Fully Qualified Name",id:"fully-qualified-name",level:2},{value:"Remarks",id:"remarks",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"See Also",id:"see-also",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"fully-qualified-name"},"Fully Qualified Name"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::BaseComponent::finish()\n")),(0,s.kt)("h3",{id:"remarks"},"Remarks"),(0,s.kt)("p",null,"Called after simulation completes, but before objects are destroyed."),(0,s.kt)("p",null,"Perform any tasks that need to be done at the end of a simulation."),(0,s.kt)("p",null,"Many components don't do anything. Some components might:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"finalize statistics")),(0,s.kt)("h2",{id:"requirements"},"Requirements"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <sst/core/component.h>\n")),(0,s.kt)("h2",{id:"syntax"},"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"SST::BaseComponent::finish()\n")),(0,s.kt)("h2",{id:"parameters"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"None")),(0,s.kt)("h2",{id:"return-value"},"Return Value"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"None")),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("h3",{id:"example-1"},"Example 1"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'// Generally printing is not a good idea from the finish function,\n// but it is an example of what you could do at the end of a simulation.\nvoid carWash::finish() {\n    CAR_RECORD *ptr = ptrCarRecordList;\n    int SmallCarCustomers = 0;\n    int LargeCarCustomers = 0;\n    \n    std::cout << std::endl;\n    std::cout << "------------------------------------------------------------------" << std::endl;\n    std::cout << "Uncle Ed\'s Carwash Simulation has completed!" << std::endl;\n    std::cout << "Here\'s a summary of the results:" << std::endl;\n    std::cout << "Simulation duration was: " << runTime << " hours of operation." << std::endl;\n    std::cout << "Small Cars Washed: " << CarWash.smallCarsWashed << std::endl;\n    std::cout << "Large Cars Washed: " << CarWash.largeCarsWashed << std::endl;\n    std::cout << "Total Cars washed: " << (CarWash.smallCarsWashed + CarWash.largeCarsWashed) << std::endl;\n    \n    while(1) {\n        if(NULL != ptr) {\n            if(SMALL_CAR == ptr->CarSize)\n                SmallCarCustomers++;\n            else if(LARGE_CAR == ptr->CarSize)\n                LargeCarCustomers++;\n            ptr = ptr->ptrNext;\n        }\n        else {\n            std::cout << std::endl;\n            break;\n        }\n    }\n\n    std::cout << "Customers that are still waiting in line" << std::endl;\n    std::cout << "Small Cars: " << SmallCarCustomers << std::endl;\n    std::cout << "Large Cars: " << LargeCarCustomers << std::endl;\n    std::cout << "Total: " << SmallCarCustomers + LargeCarCustomers << std::endl;\n    std::cout << "------------------------------------------------------------------" << std::endl;\n}\n')),(0,s.kt)("h2",{id:"see-also"},"See Also"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/sst-website/docs/cpp/component/setup"},"setup"))))}m.isMDXComponent=!0}}]);